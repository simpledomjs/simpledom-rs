// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4) { WEBPLATFORM.rs_refs[$0].addEventListener(UTF8ToString($1), function (e) {Runtime.dynCall('viii', $3, [$2, $4, e.target ? WEBPLATFORM.rs_refs.push(e.target) - 1 : -1]);}, false); },
 function($0, $1, $2) { WEBPLATFORM.rs_refs[$0][UTF8ToString($1)] = UTF8ToString($2); },
 function($0, $1) { return Number(WEBPLATFORM.rs_refs[$0][UTF8ToString($1)]) },
 function($0, $1) { var a = allocate(intArrayFromString(WEBPLATFORM.rs_refs[$0][UTF8ToString($1)] || ''), 'i8', ALLOC_STACK); console.log(WEBPLATFORM.rs_refs[$0]); return a; },
 function($0, $1) { WEBPLATFORM.rs_refs[$0].appendChild(WEBPLATFORM.rs_refs[$1]); },
 function($0, $1) { WEBPLATFORM.rs_refs[$0].insertAdjacentHTML('beforeEnd', UTF8ToString($1)); },
 function($0, $1) { WEBPLATFORM.rs_refs[$0].insertAdjacentHTML('afterBegin', UTF8ToString($1)); },
 function($0) { var value = document.createElement(UTF8ToString($0));if (!value) {return -1;}return WEBPLATFORM.rs_refs.push(value) - 1; },
 function($0) { var value = document.querySelector(UTF8ToString($0));if (!value) {return -1;}return WEBPLATFORM.rs_refs.push(value) - 1; },
 function() { console.log('hi');window.WEBPLATFORM || (window.WEBPLATFORM = {rs_refs: [],}); }];

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
 return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
 return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_ii(code, a0) {
 return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iii(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_i(code) {
 return ASM_CONSTS[code]();
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 17648;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([1,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,12,0,0,0,4,0,0,0,4,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,12,0,0,0,4,0,0,0,17,0,0,0,12,0,0,0,4,0,0,0,4,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,0,0,0,0,22,0,0,0,16,0,0,0,4,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,12,0,0,0,4,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,12,0,0,0,4,0,0,0,4,0,0,0,32,0,0,0,12,0,0,0,4,0,0,0,4,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,12,0,0,0,4,0,0,0,4,0,0,0,36,0,0,0,12,0,0,0,4,0,0,0,4,0,0,0,37,0,0,0,12,0,0,0,4,0,0,0,4,0,0,0,38,0,0,0,12,0,0,0,8,0,0,0,4,0,0,0,39,0,0,0,12,0,0,0,4,0,0,0,4,0,0,0,40,0,0,0,41,0,0,0,16,0,0,0,4,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,12,0,0,0,4,0,0,0,4,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,12,0,0,0,4,0,0,0,4,0,0,0,48,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,144,7,0,0,13,0,0,0,2,44,0,0,192,1,0,0,248,7,0,0,13,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2,0,2,3,0,0,0,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,2,0,0,0,0,6,0,2,0,0,7,0,0,2,8,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,2,4,0,0,12,0,2,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,2,3,3,3,4,3,3,3,3,3,3,5,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,192,255,0,0,0,0,255,3,0,0,0,0,0,0,0,0,255,3,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,192,1,0,192,255,0,0,0,0,0,0,255,3,255,3,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,255,255,255,255,231,1,0,0,0,0,0,0,128,0,0,0,254,3,0,7,0,0,255,3,0,0,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,2,4,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,192,255,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,192,255,0,0,255,3,0,0,0,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,192,255,255,255,255,255,255,51,0,0,0,8,0,0,0,4,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,51,0,0,0,4,0,0,0,4,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,51,0,0,0,4,0,0,0,4,0,0,0,58,0,0,0,51,0,0,0,4,0,0,0,4,0,0,0,59,0,0,0,208,8,0,0,1,0,0,0,216,8,0,0,2,0,0,0,232,8,0,0,2,0,0,0,248,8,0,0,2,0,0,0,242,24,0,0,14,0,0,0,0,25,0,0,30,0,0,0,30,25,0,0,1,0,0,0,31,25,0,0,29,0,0,0,30,25,0,0,1,0,0,0,60,25,0,0,8,0,0,0,30,25,0,0,1,0,0,0,104,9,0,0,3,0,0,0,96,9,0,0,1,0,0,0,96,9,0,0,1,0,0,0,96,9,0,0,1,0,0,0,96,9,0,0,1,0,0,0,56,9,0,0,5,0,0,0,158,32,0,0,1,0,0,0,224,64,0,0,0,0,0,0,163,32,0,0,1,0,0,0,102,25,0,0,2,0,0,0,163,32,0,0,1,0,0,0,224,64,0,0,0,0,0,0,104,25,0,0,1,0,0,0,105,25,0,0,2,0,0,0,107,25,0,0,1,0,0,0,168,25,0,0,25,0,0,0,193,25,0,0,99,0,0,0,16,4,0,0,168,25,0,0,25,0,0,0,193,25,0,0,99,0,0,0,221,3,0,0,176,9,0,0,2,0,0,0,36,26,0,0,19,0,0,0,55,26,0,0,1,0,0,0,138,29,0,0,44,0,0,0,182,29,0,0,11,0,0,0,193,29,0,0,2,0,0,0,48,30,0,0,108,0,0,0,54,0,0,0,48,30,0,0,108,0,0,0,59,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,9,0,0,0,156,30,0,0,114,0,0,0,21,0,0,0,56,40,0,0,104,0,0,0,98,0,0,0,195,29,0,0,109,0,0,0,47,0,0,0,195,29,0,0,109,0,0,0,45,0,0,0,195,29,0,0,109,0,0,0,43,0,0,0,195,29,0,0,109,0,0,0,41,0,0,0,206,39,0,0,106,0,0,0,83,0,0,0,90,39,0,0,116,0,0,0,188,0,0,0,231,38,0,0,115,0,0,0,51,0,0,0,0,0,0,0,10,0,0,0,116,38,0,0,115,0,0,0,55,0,0,0,14,38,0,0,102,0,0,0,84,1,0,0,14,38,0,0,102,0,0,0,41,1,0,0,14,38,0,0,102,0,0,0,5,1,0,0,165,37,0,0,105,0,0,0,236,0,0,0,64,37,0,0,101,0,0,0,139,2,0,0,0,0,0,0,9,0,0,0,219,36,0,0,101,0,0,0,202,0,0,0,123,36,0,0,96,0,0,0,203,0,0,0,20,36,0,0,103,0,0,0,51,2,0,0,116,34,0,0,50,0,0,0,149,31,0,0,43,0,0,0,214,31,0,0,32,0,0,0,192,31,0,0,21,0,0,0,213,31,0,0,1,0,0,0,80,33,0,0,8,0,0,0,88,33,0,0,15,0,0,0,103,33,0,0,3,0,0,0,106,33,0,0,1,0,0,0,213,31,0,0,1,0,0,0,76,32,0,0,51,0,0,0,63,33,0,0,17,0,0,0,41,33,0,0,22,0,0,0,10,0,0,0,34,33,0,0,2,0,0,0,36,33,0,0,2,0,0,0,38,33,0,0,3,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,25,33,0,0,9,0,0,0,44,34,0,0,36,0,0,0,80,34,0,0,3,0,0,0,224,64,0,0,0,0,0,0,247,35,0,0,11,0,0,0,173,32,0,0,1,0,0,0,224,64,0,0,0,0,0,0,146,41,0,0,27,0,0,0,2,0,0,0,4,43,0,0,28,0,0,0,156,42,0,0,104,0,0,0,41,4,0,0,159,43,0,0,99,0,0,0,128,2,0,0,52,43,0,0,107,0,0,0,67,0,0,0,52,43,0,0,107,0,0,0,63,0,0,0,76,46,0,0,40,0,0,0,226,45,0,0,106,0,0,0,49,0,0,0,194,45,0,0,32,0,0,0,226,45,0,0,106,0,0,0,33,0,0,0,116,46,0,0,17,0,0,0,133,46,0,0,102,0,0,0,202,0,0,0,235,46,0,0,36,0,0,0,133,46,0,0,102,0,0,0,248,1,0,0,116,46,0,0,17,0,0,0,133,46,0,0,102,0,0,0,60,2,0,0,50,0,0,0,113,47,0,0,40,0,0,0,15,47,0,0,98,0,0,0,90,1,0,0,15,47,0,0,98,0,0,0,190,1,0,0,192,12,0,0,3,0,0,0,153,47,0,0,18,0,0,0,171,47,0,0,19,0,0,0,190,47,0,0,21,0,0,0,211,47,0,0,43,0,0,0,254,47,0,0,100,0,0,0,67,1,0,0,98,48,0,0,100,0,0,0,69,3,0,0,0,13,0,0,2,0,0,0,224,64,0,0,0,0,0,0,198,48,0,0,2,0,0,0,43,49,0,0,52,0,0,0,200,48,0,0,99,0,0,0,4,2,0,0,95,49,0,0,101,0,0,0,218,6,0,0,95,49,0,0,101,0,0,0,216,6,0,0,200,48,0,0,99,0,0,0,54,2,0,0,200,48,0,0,99,0,0,0,48,2,0,0,254,47,0,0,100,0,0,0,203,2,0,0,196,50,0,0,101,0,0,0,110,10,0,0,41,51,0,0,32,0,0,0,73,51,0,0,18,0,0,0,35,52,0,0,6,0,0,0,41,52,0,0,34,0,0,0,75,52,0,0,22,0,0,0,97,52,0,0,13,0,0,0,162,52,0,0,14,0,0,0,176,52,0,0,4,0,0,0,180,52,0,0,16,0,0,0,128,52,0,0,1,0,0,0,35,52,0,0,6,0,0,0,115,52,0,0,8,0,0,0,123,52,0,0,5,0,0,0,128,52,0,0,1,0,0,0,129,52,0,0,33,0,0,0,196,52,0,0,101,0,0,0,112,3,0,0,196,52,0,0,101,0,0,0,100,3,0,0,224,64,0,0,0,0,0,0,41,53,0,0,1,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,224,64,0,0,0,0,0,0,224,64,0,0,0,0,0,0,224,64,0,0,0,0,0,0,224,64,0,0,0,0,0,0,224,64,0,0,0,0,0,0,41,53,0,0,1,0,0,0,198,48,0,0,2,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,32,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,224,64,0,0,0,0,0,0,43,53,0,0,1,0,0,0,198,48,0,0,2,0,0,0,224,64,0,0,0,0,0,0,224,64,0,0,0,0,0,0,81,53,0,0,1,0,0,0,82,53,0,0,106,0,0,0,26,0,0,0,199,53,0,0,60,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,62,0,0,0,232,64,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,15,0,0,173,0,120,3,121,3,139,3,141,3,162,3,48,5,87,5,88,5,96,5,136,5,139,5,140,5,144,5,28,6,29,6,221,6,14,7,15,7,75,7,76,7,46,8,47,8,63,8,92,8,93,8,181,8,226,8,132,9,141,9,142,9,145,9,146,9,169,9,177,9,186,9,187,9,197,9,198,9,201,9,202,9,222,9,228,9,229,9,4,10,17,10,18,10,41,10,49,10,52,10,55,10,58,10,59,10,61,10,73,10,74,10,93,10,132,10,142,10,146,10,169,10,177,10,180,10,186,10,187,10,198,10,202,10,206,10,207,10,228,10,229,10,4,11,13,11,14,11,17,11,18,11,41,11,49,11,52,11,58,11,59,11,69,11,70,11,73,11,74,11,94,11,100,11,101,11,132,11,145,11,155,11,157,11,201,11,206,11,207,11,4,12,13,12,17,12,41,12,69,12,73,12,87,12,100,12,101,12,132,12,141,12,145,12,169,12,180,12,186,12,187,12,197,12,201,12,223,12,228,12,229,12,240,12,4,13,13,13,17,13,59,13,60,13,69,13,73,13,100,13,101,13,128,13,129,13,132,13,178,13,188,13,190,13,191,13,213,13,215,13,240,13,241,13,131,14,133,14,134,14,137,14,139,14,140,14,152,14,160,14,164,14,166,14,168,14,169,14,172,14,186,14,190,14,191,14,197,14,199,14,206,14,207,14,218,14,219,14,72,15,152,15,189,15,205,15,198,16,206,16,207,16,73,18,78,18,79,18,87,18,89,18,94,18,95,18,137,18,142,18,143,18,177,18,182,18,183,18,191,18,193,18,198,18,199,18,215,18,17,19,22,19,23,19,91,19,92,19,246,19,247,19,254,19,255,19,128,22,13,23,109,23,113,23,222,23,223,23,14,24,15,24,31,25,110,25,111,25,28,26,29,26,95,26,125,26,126,26,174,26,175,26,247,28,22,31,23,31,30,31,31,31,70,31,71,31,78,31,79,31,88,31,90,31,92,31,94,31,126,31,127,31,181,31,197,31,212,31,213,31,220,31,240,31,241,31,245,31,114,32,115,32,143,32,255,35,116,43,117,43,150,43,151,43,201,43,47,44,95,44,38,45,46,45,47,45,167,45,175,45,183,45,191,45,199,45,207,45,215,45,223,45,154,46,64,48,151,48,152,48,143,49,31,50,255,50,175,167,254,168,255,168,206,169,255,169,78,170,79,170,90,170,91,170,7,171,8,171,15,171,16,171,39,171,47,171,238,171,239,171,110,250,111,250,55,251,61,251,63,251,66,251,69,251,144,253,145,253,254,253,255,253,83,254,103,254,117,254,200,255,201,255,208,255,209,255,216,255,217,255,231,255,254,255,255,255,0,0,32,0,127,0,34,0,128,3,4,0,200,5,8,0,235,5,5,0,245,5,17,0,178,7,14,0,251,7,5,0,95,8,65,0,190,8,22,0,179,9,3,0,207,9,8,0,216,9,4,0,252,9,5,0,11,10,4,0,67,10,4,0,78,10,3,0,82,10,7,0,95,10,7,0,118,10,11,0,209,10,15,0,242,10,7,0,250,10,7,0,78,11,8,0,88,11,4,0,120,11,10,0,139,11,3,0,150,11,3,0,160,11,3,0,165,11,3,0,171,11,3,0,186,11,4,0,195,11,3,0,209,11,6,0,216,11,14,0,251,11,5,0,58,12,3,0,78,12,7,0,91,12,5,0,112,12,8,0,206,12,7,0,215,12,7,0,243,12,14,0,80,13,4,0,151,13,3,0,199,13,3,0,203,13,4,0,224,13,6,0,245,13,12,0,59,14,4,0,92,14,37,0,142,14,6,0,224,14,32,0,109,15,4,0,219,15,37,0,200,16,5,0,125,19,3,0,154,19,6,0,157,22,3,0,249,22,7,0,21,23,11,0,55,23,9,0,84,23,12,0,116,23,12,0,234,23,6,0,250,23,6,0,26,24,6,0,120,24,8,0,171,24,5,0,246,24,10,0,44,25,4,0,60,25,4,0,65,25,3,0,117,25,11,0,172,25,4,0,202,25,6,0,219,25,3,0,138,26,6,0,154,26,6,0,191,26,65,0,76,27,4,0,125,27,3,0,244,27,8,0,56,28,3,0,74,28,3,0,137,28,55,0,200,28,8,0,250,28,6,0,246,29,5,0,255,31,17,0,40,32,8,0,95,32,17,0,157,32,3,0,191,32,17,0,241,32,15,0,140,33,4,0,39,36,25,0,75,36,21,0,186,43,3,0,210,43,26,0,240,43,16,0,244,44,5,0,40,45,5,0,104,45,7,0,113,45,14,0,151,45,9,0,69,46,59,0,244,46,12,0,214,47,26,0,252,47,5,0,0,49,5,0,46,49,3,0,187,49,5,0,228,49,12,0,182,77,10,0,214,159,42,0,141,164,3,0,199,164,9,0,44,166,20,0,248,166,8,0,184,167,63,0,44,168,4,0,58,168,6,0,120,168,8,0,198,168,8,0,218,168,6,0,84,169,11,0,125,169,3,0,218,169,4,0,55,170,9,0,195,170,24,0,247,170,10,0,23,171,9,0,102,171,10,0,250,171,6,0,164,215,12,0,199,215,4,0,252,215,4,33,218,250,38,0,7,251,12,0,24,251,5,0,194,251,17,0,64,253,16,0,200,253,40,0,26,254,6,0,108,254,4,0,253,254,4,0,191,255,3,0,221,255,3,0,239,255,13,0,12,0,39,0,59,0,62,0,78,0,79,0,143,1,158,3,158,4,159,4,6,8,7,8,9,8,54,8,61,8,62,8,86,8,243,8,208,9,209,9,4,10,20,10,24,10,86,11,87,11,189,16,53,17,206,17,207,17,224,17,18,18,135,18,137,18,142,18,158,18,4,19,13,19,14,19,17,19,18,19,41,19,49,19,52,19,58,19,59,19,69,19,70,19,73,19,74,19,78,19,79,19,100,19,101,19,90,20,92,20,182,21,183,21,9,28,55,28,144,28,145,28,168,28,111,36,95,106,238,106,239,106,90,107,98,107,154,188,155,188,39,209,40,209,85,212,157,212,160,212,161,212,163,212,164,212,167,212,168,212,173,212,186,212,188,212,196,212,6,213,11,213,12,213,21,213,29,213,58,213,63,213,69,213,81,213,166,214,167,214,204,215,205,215,160,218,7,224,25,224,26,224,34,224,37,224,197,232,198,232,4,238,32,238,35,238,37,238,38,238,40,238,51,238,56,238,58,238,72,238,74,238,76,238,80,238,83,238,85,238,86,238,88,238,90,238,92,238,94,238,96,238,99,238,101,238,102,238,107,238,115,238,120,238,125,238,127,238,138,238,164,238,170,238,175,240,176,240,192,240,208,240,47,241,31,249,49,249,50,249,63,249,94,0,34,0,251,0,5,0,3,1,4,0,52,1,3,0,156,1,4,0,161,1,47,0,254,1,130,0,157,2,3,0,209,2,15,0,252,2,4,0,36,3,12,0,75,3,5,0,123,3,5,0,196,3,4,0,214,3,42,0,170,4,6,0,212,4,4,0,252,4,4,0,40,5,8,0,100,5,11,0,112,5,144,0,55,7,9,0,86,7,10,0,104,7,152,0,57,8,3,0,159,8,8,0,176,8,48,0,246,8,5,0,28,9,3,0,58,9,5,0,64,9,64,0,184,9,4,0,7,10,5,0,52,10,4,0,59,10,4,0,72,10,8,0,89,10,7,0,160,10,32,0,231,10,4,0,247,10,9,0,54,11,3,0,115,11,5,0,146,11,7,0,157,11,12,0,176,11,80,0,73,12,55,0,179,12,13,0,243,12,7,0,0,13,96,1,127,14,129,1,78,16,4,0,112,16,15,0,194,16,14,0,233,16,7,0,250,16,6,0,68,17,12,0,119,17,9,0,245,17,11,0,63,18,65,0,170,18,6,0,235,18,5,0,250,18,6,0,81,19,6,0,88,19,5,0,109,19,3,0,117,19,139,0,94,20,34,0,200,20,8,0,218,20,166,0,222,21,34,0,69,22,11,0,90,22,6,0,109,22,19,0,184,22,8,0,202,22,54,0,26,23,3,0,44,23,4,0,64,23,96,1,243,24,12,0,0,25,192,1,249,26,7,1,70,28,10,0,109,28,3,0,183,28,73,3,154,35,102,0,117,36,11,0,68,37,188,10,47,52,209,15,71,70,185,33,57,106,7,0,106,106,4,0,112,106,96,0,246,106,10,0,70,107,10,0,120,107,5,0,144,107,112,3,69,111,11,0,127,111,16,0,160,111,64,0,225,111,31,0,237,135,19,0,243,138,13,37,2,176,254,11,107,188,5,0,125,188,3,0,137,188,7,0,160,188,96,19,246,208,10,0,115,209,8,0,233,209,23,0,70,210,186,0,87,211,9,0,114,211,142,0,71,213,3,0,140,218,15,0,176,218,80,5,43,224,213,7,215,232,41,0,75,233,5,0,90,233,4,0,96,233,160,4,60,238,6,0,67,238,4,0,156,238,5,0,188,238,52,0,242,238,14,1,44,240,4,0,148,240,12,0,246,240,10,0,13,241,3,0,108,241,4,0,173,241,57,0,3,242,13,0,60,242,4,0,73,242,7,0,82,242,174,0,211,246,13,0,237,246,3,0,247,246,9,0,116,247,12,0,213,247,43,0,12,248,4,0,72,248,8,0,90,248,6,0,136,248,8,0,174,248,98,0,40,249,8,0,76,249,4,0,95,249,33,0,146,249,46,0,193,249,63,6,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,91,36,48,93,46,97,100,100,69,118,101,110,116,76,105,115,116,101,110,101,114,40,85,84,70,56,84,111,83,116,114,105,110,103,40,36,49,41,44,32,102,117,110,99,116,105,111,110,32,40,101,41,32,123,82,117,110,116,105,109,101,46,100,121,110,67,97,108,108,40,39,118,105,105,105,39,44,32,36,51,44,32,91,36,50,44,32,36,52,44,32,101,46,116,97,114,103,101,116,32,63,32,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,46,112,117,115,104,40,101,46,116,97,114,103,101,116,41,32,45,32,49,32,58,32,45,49,93,41,59,125,44,32,102,97,108,115,101,41,59,0,97,108,114,101,97,100,121,32,98,111,114,114,111,119,101,100,98,111,100,121,104,114,60,104,49,62,72,69,76,76,79,32,70,82,79,77,32,82,85,83,84,60,47,104,49,62,67,76,73,67,75,32,77,69,46,46,46,98,117,116,116,111,110,99,108,105,99,107,98,103,67,111,108,111,114,99,108,105,101,110,116,87,105,100,116,104,98,108,117,101,72,101,108,108,111,44,32,119,111,114,108,100,33,10,84,104,105,115,32,115,104,111,117,108,100,32,98,101,32,115,116,114,105,110,103,32,39,98,108,117,101,39,58,32,10,84,104,105,115,32,115,104,111,117,108,100,32,98,101,32,101,109,112,116,121,32,115,116,114,105,110,103,58,32,87,105,100,116,104,63,58,32,1,103,100,98,95,108,111,97,100,95,114,117,115,116,95,112,114,101,116,116,121,95,112,114,105,110,116,101,114,115,46,112,121,0,60,47,32,61,34,34,99,97,108,108,101,100,32,96,82,101,115,117,108,116,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,110,32,96,69,114,114,96,32,118,97,108,117,101,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,97,116,116,101,109,112,116,32,116,111,32,100,105,118,105,100,101,32,98,121,32,122,101,114,111,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,46,114,115,100,114,111,112,112,105,110,103,32,72,84,77,76,32,78,79,68,69,32,10,99,97,108,108,101,100,32,96,82,101,115,117,108,116,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,110,32,96,69,114,114,96,32,118,97,108,117,101,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,91,36,48,93,91,85,84,70,56,84,111,83,116,114,105,110,103,40,36,49,41,93,32,61,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,50,41,59,0,114,101,116,117,114,110,32,78,117,109,98,101,114,40,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,91,36,48,93,91,85,84,70,56,84,111,83,116,114,105,110,103,40,36,49,41,93,41,0,118,97,114,32,97,32,61,32,97,108,108,111,99,97,116,101,40,105,110,116,65,114,114,97,121,70,114,111,109,83,116,114,105,110,103,40,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,91,36,48,93,91,85,84,70,56,84,111,83,116,114,105,110,103,40,36,49,41,93,32,124,124,32,39,39,41,44,32,39,105,56,39,44,32,65,76,76,79,67,95,83,84,65,67,75,41,59,32,99,111,110,115,111,108,101,46,108,111,103,40,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,91,36,48,93,41,59,32,114,101,116,117,114,110,32,97,59,0,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,91,36,48,93,46,97,112,112,101,110,100,67,104,105,108,100,40,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,91,36,49,93,41,59,0,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,91,36,48,93,46,105,110,115,101,114,116,65,100,106,97,99,101,110,116,72,84,77,76,40,39,98,101,102,111,114,101,69,110,100,39,44,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,49,41,41,59,0,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,91,36,48,93,46,105,110,115,101,114,116,65,100,106,97,99,101,110,116,72,84,77,76,40,39,97,102,116,101,114,66,101,103,105,110,39,44,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,49,41,41,59,0,118,97,114,32,118,97,108,117,101,32,61,32,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,109,101,110,116,40,85,84,70,56,84,111,83,116,114,105,110,103,40,36,48,41,41,59,105,102,32,40,33,118,97,108,117,101,41,32,123,114,101,116,117,114,110,32,45,49,59,125,114,101,116,117,114,110,32,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,46,112,117,115,104,40,118,97,108,117,101,41,32,45,32,49,59,0,118,97,114,32,118,97,108,117,101,32,61,32,100,111,99,117,109,101,110,116,46,113,117,101,114,121,83,101,108,101,99,116,111,114,40,85,84,70,56,84,111,83,116,114,105,110,103,40,36,48,41,41,59,105,102,32,40,33,118,97,108,117,101,41,32,123,114,101,116,117,114,110,32,45,49,59,125,114,101,116,117,114,110,32,87,69,66,80,76,65,84,70,79,82,77,46,114,115,95,114,101,102,115,46,112,117,115,104,40,118,97,108,117,101,41,32,45,32,49,59,0,99,111,110,115,111,108,101,46,108,111,103,40,39,104,105,39,41,59,119,105,110,100,111,119,46,87,69,66,80,76,65,84,70,79,82,77,32,124,124,32,40,119,105,110,100,111,119,46,87,69,66,80,76,65,84,70,79,82,77,32,61,32,123,114,115,95,114,101,102,115,58,32,91,93,44,125,41,59,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,96,40,108,101,102,116,32,61,61,32,114,105,103,104,116,41,96,32,40,108,101,102,116,58,32,96,96,44,32,114,105,103,104,116,58,32,96,96,41,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,99,111,110,100,118,97,114,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,114,119,108,111,99,107,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,116,104,114,101,97,100,95,108,111,99,97,108,46,114,115,1,99,97,110,110,111,116,32,97,99,99,101,115,115,32,97,32,84,76,83,32,118,97,108,117,101,32,100,117,114,105,110,103,32,111,114,32,97,102,116,101,114,32,105,116,32,105,115,32,100,101,115,116,114,111,121,101,100,114,119,108,111,99,107,32,109,97,120,105,109,117,109,32,114,101,97,100,101,114,32,99,111,117,110,116,32,101,120,99,101,101,100,101,100,114,119,108,111,99,107,32,114,101,97,100,32,108,111,99,107,32,119,111,117,108,100,32,114,101,115,117,108,116,32,105,110,32,100,101,97,100,108,111,99,107,116,104,114,101,97,100,32,112,97,110,105,99,107,101,100,32,119,104,105,108,101,32,112,97,110,105,99,107,105,110,103,46,32,97,98,111,114,116,105,110,103,46,10,102,97,116,97,108,32,114,117,110,116,105,109,101,32,101,114,114,111,114,58,32,10,102,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,116,101,32,112,97,110,105,99,44,32,101,114,114,111,114,32,82,85,83,84,95,66,65,67,75,84,82,65,67,69,48,66,111,120,60,65,110,121,62,60,117,110,110,97,109,101,100,62,102,111,114,109,97,116,116,101,114,32,101,114,114,111,114,83,116,114,105,110,103,69,114,114,111,114,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,119,104,111,108,101,32,98,117,102,102,101,114,110,111,116,101,58,32,82,117,110,32,119,105,116,104,32,96,82,85,83,84,95,66,65,67,75,84,82,65,67,69,61,49,96,32,102,111,114,32,97,32,98,97,99,107,116,114,97,99,101,46,10,69,95,90,78,90,78,58,58,95,36,46,36,36,83,80,36,64,36,66,80,36,42,36,82,70,36,38,36,76,84,36,60,36,71,84,36,62,36,76,80,36,40,36,82,80,36,41,36,67,36,44,36,117,55,101,36,126,36,117,50,48,36,32,36,117,50,55,36,39,36,117,53,98,36,91,36,117,53,100,36,93,36,117,55,98,36,123,36,117,55,100,36,125,36,117,51,98,36,59,36,117,50,98,36,43,36,117,50,50,36,34,99,97,108,108,101,100,32,96,82,101,115,117,108,116,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,110,32,96,69,114,114,96,32,118,97,108,117,101,60,117,110,107,110,111,119,110,62,32,32,58,32,32,45,32,32,46,46,46,32,60,102,114,97,109,101,115,32,111,109,105,116,116,101,100,62,10,115,116,97,99,107,32,98,97,99,107,116,114,97,99,101,58,10,116,104,114,101,97,100,32,39,39,32,112,97,110,105,99,107,101,100,32,97,116,32,39,39,44,32,58,97,108,114,101,97,100,121,32,98,111,114,114,111,119,101,100,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,107,101,121,32,33,61,32,48,116,104,114,101,97,100,32,110,97,109,101,32,109,97,121,32,110,111,116,32,99,111,110,116,97,105,110,32,105,110,116,101,114,105,111,114,32,110,117,108,108,32,98,121,116,101,115,102,97,105,108,101,100,32,116,111,32,103,101,110,101,114,97,116,101,32,117,110,105,113,117,101,32,116,104,114,101,97,100,32,73,68,58,32,98,105,116,115,112,97,99,101,32,101,120,104,97,117,115,116,101,100,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,78,117,108,69,114,114,111,114,97,108,114,101,97,100,121,32,109,117,116,97,98,108,121,32,98,111,114,114,111,119,101,100,102,97,105,108,101,100,32,116,111,32,103,101,116,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,32,96,96,58,32,100,97,116,97,32,112,114,111,118,105,100,101,100,32,99,111,110,116,97,105,110,115,32,97,32,110,117,108,32,98,121,116,101,116,104,114,101,97,100,32,112,97,110,105,99,107,101,100,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,112,97,110,105,99,46,32,97,98,111,114,116,105,110,103,46,10,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,101,110,116,101,114,101,100,32,117,110,114,101,97,99,104,97,98,108,101,32,99,111,100,101,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,111,116,104,101,114,32,111,115,32,101,114,114,111,114,111,112,101,114,97,116,105,111,110,32,105,110,116,101,114,114,117,112,116,101,100,119,114,105,116,101,32,122,101,114,111,116,105,109,101,100,32,111,117,116,105,110,118,97,108,105,100,32,100,97,116,97,105,110,118,97,108,105,100,32,105,110,112,117,116,32,112,97,114,97,109,101,116,101,114,111,112,101,114,97,116,105,111,110,32,119,111,117,108,100,32,98,108,111,99,107,101,110,116,105,116,121,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,98,114,111,107,101,110,32,112,105,112,101,97,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,97,100,100,114,101,115,115,32,105,110,32,117,115,101,110,111,116,32,99,111,110,110,101,99,116,101,100,99,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,99,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,99,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,112,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,101,110,116,105,116,121,32,110,111,116,32,102,111,117,110,100,32,40,111,115,32,101,114,114,111,114,32,115,116,114,101,114,114,111,114,95,114,32,102,97,105,108,117,114,101,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,116,104,114,101,97,100,47,109,111,100,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,101,110,118,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,105,111,47,101,114,114,111,114,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,105,111,47,115,116,100,105,111,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,110,99,47,99,111,110,100,118,97,114,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,110,99,47,111,110,99,101,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,95,99,111,109,109,111,110,47,97,116,95,101,120,105,116,95,105,109,112,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,95,99,111,109,109,111,110,47,116,104,114,101,97,100,95,105,110,102,111,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,95,99,111,109,109,111,110,47,116,104,114,101,97,100,95,108,111,99,97,108,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,97,114,103,115,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,111,115,46,114,115,117,115,101,32,111,102,32,115,116,100,58,58,116,104,114,101,97,100,58,58,99,117,114,114,101,110,116,40,41,32,105,115,32,110,111,116,32,112,111,115,115,105,98,108,101,32,97,102,116,101,114,32,116,104,101,32,116,104,114,101,97,100,39,115,32,108,111,99,97,108,32,100,97,116,97,32,104,97,115,32,98,101,101,110,32,100,101,115,116,114,111,121,101,100,97,116,116,101,109,112,116,101,100,32,116,111,32,117,115,101,32,97,32,99,111,110,100,105,116,105,111,110,32,118,97,114,105,97,98,108,101,32,119,105,116,104,32,116,119,111,32,109,117,116,101,120,101,115,80,111,105,115,111,110,69,114,114,111,114,32,123,32,105,110,110,101,114,58,32,46,46,32,125,99,97,110,110,111,116,32,97,99,99,101,115,115,32,115,116,100,111,117,116,32,100,117,114,105,110,103,32,115,104,117,116,100,111,119,110,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,116,104,101,32,98,117,102,102,101,114,101,100,32,100,97,116,97,102,97,105,108,101,100,32,112,114,105,110,116,105,110,103,32,116,111,32,115,116,100,111,117,116,58,32,79,110,99,101,32,105,110,115,116,97,110,99,101,32,104,97,115,32,112,114,101,118,105,111,117,115,108,121,32,98,101,101,110,32,112,111,105,115,111,110,101,100,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,115,116,97,116,101,32,38,32,83,84,65,84,69,95,77,65,83,75,32,61,61,32,82,85,78,78,73,78,71,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,40,113,117,101,117,101,32,97,115,32,117,115,105,122,101,41,32,33,61,32,49,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,99,46,98,111,114,114,111,119,40,41,46,105,115,95,110,111,110,101,40,41,109,97,105,110,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,40,42,112,116,114,41,46,105,115,95,110,111,110,101,40,41,102,97,116,97,108,32,114,117,110,116,105,109,101,32,101,114,114,111,114,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,10,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,108,108,101,99,116,105,111,110,115,47,118,101,99,46,114,115,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,101,110,100,32,60,61,32,108,101,110,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,239,191,189,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,95,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,46,114,115,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,3,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,7,0,0,8,0,0,0,6,0,0,0,0,0,8,0,8,0,0,0,0,0,8,0,9,6,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,33,112,116,114,46,105,115,95,110,117,108,108,40,41,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,112,97,110,105,99,95,117,110,119,105,110,100,47,101,109,99,99,46,114,115,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,101,110,116,101,114,101,100,32,117,110,114,101,97,99,104,97,98,108,101,32,99,111,100,101,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,97,108,108,111,99,47,114,97,119,95,118,101,99,46,114,115,84,114,105,101,100,32,116,111,32,115,104,114,105,110,107,32,116,111,32,97,32,108,97,114,103,101,114,32,99,97,112,97,99,105,116,121,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115,116,111,95,100,105,103,105,116,58,32,114,97,100,105,120,32,105,115,32,116,111,111,32,104,105,103,104,32,40,109,97,120,105,109,117,109,32,51,54,41,101,110,99,111,100,101,95,117,116,102,56,58,32,110,101,101,100,32,32,98,121,116,101,115,32,116,111,32,101,110,99,111,100,101,32,85,43,44,32,98,117,116,32,116,104,101,32,98,117,102,102,101,114,32,104,97,115,32,99,97,108,108,101,100,32,96,79,112,116,105,111,110,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,32,96,78,111,110,101,96,32,118,97,108,117,101,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115,58,32,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,46,114,115,100,101,115,116,105,110,97,116,105,111,110,32,97,110,100,32,115,111,117,114,99,101,32,115,108,105,99,101,115,32,104,97,118,101,32,100,105,102,102,101,114,101,110,116,32,108,101,110,103,116,104,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,58,32,116,104,101,32,108,101,110,32,105,115,32,32,98,117,116,32,116,104,101,32,105,110,100,101,120,32,105,115,32,48,48,48,49,48,50,48,51,48,52,48,53,48,54,48,55,48,56,48,57,49,48,49,49,49,50,49,51,49,52,49,53,49,54,49,55,49,56,49,57,50,48,50,49,50,50,50,51,50,52,50,53,50,54,50,55,50,56,50,57,51,48,51,49,51,50,51,51,51,52,51,53,51,54,51,55,51,56,51,57,52,48,52,49,52,50,52,51,52,52,52,53,52,54,52,55,52,56,52,57,53,48,53,49,53,50,53,51,53,52,53,53,53,54,53,55,53,56,53,57,54,48,54,49,54,50,54,51,54,52,54,53,54,54,54,55,54,56,54,57,55,48,55,49,55,50,55,51,55,52,55,53,55,54,55,55,55,56,55,57,56,48,56,49,56,50,56,51,56,52,56,53,56,54,56,55,56,56,56,57,57,48,57,49,57,50,57,51,57,52,57,53,57,54,57,55,57,56,57,57,105,110,100,101,120,32,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,115,108,105,99,101,32,111,102,32,108,101,110,103,116,104,32,115,108,105,99,101,32,105,110,100,101,120,32,115,116,97,114,116,115,32,97,116,32,32,98,117,116,32,101,110,100,115,32,97,116,32,91,46,46,46,93,32,97,110,100,47,111,114,32,32,105,110,32,96,96,32,100,111,32,110,111,116,32,108,105,101,32,111,110,32,99,104,97,114,97,99,116,101,114,32,98,111,117,110,100,97,114,121,98,101,103,105,110,32,60,61,32,101,110,100,32,40,32,60,61,32,41,32,119,104,101,110,32,115,108,105,99,105,110,103,32,96,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115,10,41,32,32,32,32,32,66,111,114,114,111,119,69,114,114,111,114,66,111,114,114,111,119,77,117,116,69,114,114,111,114,32,123,10,125,32,125,44,32,91,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,110,105,103,104,116,108,121,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,95,112,114,105,118,97,116,101,46,114,115,107,105,110,100,69,109,112,116,121,48,120,102,114,111,109,95,115,116,114,95,114,97,100,105,120,95,105,110,116,58,32,109,117,115,116,32,108,105,101,32,105,110,32,116,104,101,32,114,97,110,103,101,32,96,91,50,44,32,51,54,93,96,32,45,32,102,111,117,110,100,32,80,97,114,115,101,73,110,116,69,114,114,111,114,73,110,118,97,108,105,100,68,105,103,105,116,79,118,101,114,102,108,111,119,85,110,100,101,114,102,108,111,119,85,116,102,56,69,114,114,111,114,118,97,108,105,100,95,117,112,95,116,111,69,114,114,111,114,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Add"] = _i64Add;

  function _pthread_mutex_destroy() {}

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  function __Unwind_FindEnclosingFunction() {
      return 0; // we cannot succeed
    }

  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else window.postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        var argArray = [arg];
        browserIterationFunc = function() {
          Runtime.dynCall('vi', func, argArray);
        };
      } else {
        browserIterationFunc = function() {
          Runtime.dynCall('v', func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_pause_main_loop() {
      Browser.mainLoop.pause();
    }

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

  function _pthread_mutexattr_settype() {}

  function _abort() {
      Module['abort']();
    }

  function _pthread_cond_destroy() { return 0; }

  function _pthread_condattr_destroy() { return 0; }

  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function _pthread_condattr_setclock() { return 0; }

  function ___lock() {}

  function ___unlock() {}

  var _emscripten_asm_const_int=true;

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

  function _pthread_key_delete(key) {
      if (key in PTHREAD_SPECIFIC) {
        delete PTHREAD_SPECIFIC[key];
        return 0;
      }
      return ERRNO_CODES.EINVAL;
    }

   
  Module["_pthread_self"] = _pthread_self;

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _pthread_mutexattr_destroy() {}

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy; 
  Module["_memmove"] = _memmove;

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __Unwind_GetIPInfo() {
      abort('Unwind_GetIPInfo');
    }

  function _llvm_trap() {
      abort('trap!');
    }

  var _llvm_ctlz_i32=true;

  
  
  function __emscripten_traverse_stack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for(i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        Runtime.warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        var stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
          stack_args = __emscripten_traverse_stack(stack_args[0]);
      }
      
      // Process all lines:
      lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
      
      for(l in lines) {
        var line = lines[l];
  
        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          jsSymbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
          cSymbolName = jsSymbolName;
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = '+jsSymbolName) : ('    at '+cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
        
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }function __Unwind_Backtrace(func, arg) {
      var trace = _emscripten_get_callstack_js();
      var parts = trace.split('\n');
      for (var i = 0; i < parts.length; i++) {
        var ret = Runtime.dynCall('iii', [0, arg]);
        if (ret !== 0) return;
      }
    }


  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_rwlock_rdlock() { return 0; }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;

  function _pthread_cond_signal() { return 0; }

  function _pthread_mutexattr_init() {}

  function _pthread_cond_init() { return 0; }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_nacl_atomic_cmpxchg_i8=undefined;

   
  Module["_sbrk"] = _sbrk;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _dladdr(addr, info) {
      // report all function pointers as coming from this program itself XXX not really correct in any way
      var fname = allocate(intArrayFromString(Module['thisProgram'] || './this.program'), 'i8', ALLOC_NORMAL); // XXX leak
      HEAP32[((addr)>>2)]=fname;
      HEAP32[(((addr)+(4))>>2)]=0;
      HEAP32[(((addr)+(8))>>2)]=0;
      HEAP32[(((addr)+(12))>>2)]=0;
      return 1;
    }

  function ___gxx_personality_v0() {
    }


  function _pthread_cond_wait() { return 0; }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function _pthread_condattr_init() { return 0; }

   
  Module["_llvm_bswap_i16"] = _llvm_bswap_i16;


  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_nacl_atomic_cmpxchg_i32=undefined;

  function _pthread_rwlock_unlock() { return 0; }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_key_create": _pthread_key_create, "__Unwind_FindEnclosingFunction": __Unwind_FindEnclosingFunction, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___gxx_personality_v0": ___gxx_personality_v0, "_pthread_rwlock_unlock": _pthread_rwlock_unlock, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___buildEnvironment": ___buildEnvironment, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_pthread_cond_init": _pthread_cond_init, "__Unwind_GetIPInfo": __Unwind_GetIPInfo, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_pthread_mutexattr_destroy": _pthread_mutexattr_destroy, "__emscripten_traverse_stack": __emscripten_traverse_stack, "___setErrNo": ___setErrNo, "___cxa_free_exception": ___cxa_free_exception, "_pthread_key_delete": _pthread_key_delete, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_pthread_condattr_setclock": _pthread_condattr_setclock, "_pthread_getspecific": _pthread_getspecific, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "_pthread_rwlock_rdlock": _pthread_rwlock_rdlock, "_pthread_cond_signal": _pthread_cond_signal, "_emscripten_pause_main_loop": _emscripten_pause_main_loop, "_abort": _abort, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_pthread_mutexattr_init": _pthread_mutexattr_init, "_pthread_mutexattr_settype": _pthread_mutexattr_settype, "_pthread_condattr_init": _pthread_condattr_init, "_getenv": _getenv, "_pthread_condattr_destroy": _pthread_condattr_destroy, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall140": ___syscall140, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_pthread_setspecific": _pthread_setspecific, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_dladdr": _dladdr, "___cxa_throw": ___cxa_throw, "___lock": ___lock, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall4": ___syscall4, "_emscripten_get_now": _emscripten_get_now, "_pthread_cond_destroy": _pthread_cond_destroy, "_llvm_trap": _llvm_trap, "_pthread_mutex_init": _pthread_mutex_init, "__Unwind_Backtrace": __Unwind_Backtrace, "___syscall146": ___syscall146, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_key_create=env._pthread_key_create;
  var __Unwind_FindEnclosingFunction=env.__Unwind_FindEnclosingFunction;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _pthread_rwlock_unlock=env._pthread_rwlock_unlock;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___buildEnvironment=env.___buildEnvironment;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _pthread_cond_init=env._pthread_cond_init;
  var __Unwind_GetIPInfo=env.__Unwind_GetIPInfo;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _pthread_mutexattr_destroy=env._pthread_mutexattr_destroy;
  var __emscripten_traverse_stack=env.__emscripten_traverse_stack;
  var ___setErrNo=env.___setErrNo;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var _pthread_key_delete=env._pthread_key_delete;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _pthread_condattr_setclock=env._pthread_condattr_setclock;
  var _pthread_getspecific=env._pthread_getspecific;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var _pthread_rwlock_rdlock=env._pthread_rwlock_rdlock;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _emscripten_pause_main_loop=env._emscripten_pause_main_loop;
  var _abort=env._abort;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _pthread_mutexattr_init=env._pthread_mutexattr_init;
  var _pthread_mutexattr_settype=env._pthread_mutexattr_settype;
  var _pthread_condattr_init=env._pthread_condattr_init;
  var _getenv=env._getenv;
  var _pthread_condattr_destroy=env._pthread_condattr_destroy;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall140=env.___syscall140;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _pthread_setspecific=env._pthread_setspecific;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _dladdr=env._dladdr;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall4=env.___syscall4;
  var _emscripten_get_now=env._emscripten_get_now;
  var _pthread_cond_destroy=env._pthread_cond_destroy;
  var _llvm_trap=env._llvm_trap;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var __Unwind_Backtrace=env.__Unwind_Backtrace;
  var ___syscall146=env.___syscall146;
  var _emscripten_get_callstack_js=env._emscripten_get_callstack_js;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h8f65a8d552d87478E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17hc325a020e20b087aE($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h949e5b795cd3d504E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h5da33358dd5c34e7E($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h84d763b59a1692f0E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $index;
 __THREW__ = 0;
 $13 = (invoke_iiii(63,($9|0),($11|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h96073221e77ac80bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h2480914c11445481E($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17h6c600bf934960db6E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_viii(64,($0|0),($8|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  HEAP32[$personalityslot>>2] = $13;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $14;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN11collections5slice4hack8into_vec17h772ddc8760271ab7E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0;
 var $_13 = 0, $_14 = 0, $arg0 = 0, $b = 0, $personalityslot = 0, $personalityslot$index4 = 0, $xs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg0 = sp + 48|0;
 $b = sp + 40|0;
 $xs = sp + 24|0;
 $_12 = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_14 = 0;
 $_13 = 0;
 $_13 = 1;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$b>>2] = $4;
 $7 = ((($b)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$b>>2]|0;
 $9 = ((($b)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_iii(65,($8|0),($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $16 = HEAP32[$b>>2]|0;
  $17 = ((($b)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  $19 = (invoke_iii(66,($16|0),($18|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = HEAP32[$b>>2]|0;
   $23 = ((($b)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   __THREW__ = 0;
   $25 = (invoke_iii(66,($22|0),($24|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    __THREW__ = 0;
    invoke_viiii(67,($xs|0),($11|0),($19|0),($25|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $_14 = 1;
     $_13 = 0;
     $30 = HEAP32[$b>>2]|0;
     $31 = ((($b)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     __THREW__ = 0;
     invoke_vii(68,($30|0),($32|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $_14 = 0;
      ;HEAP32[$_12>>2]=HEAP32[$xs>>2]|0;HEAP32[$_12+4>>2]=HEAP32[$xs+4>>2]|0;HEAP32[$_12+8>>2]=HEAP32[$xs+8>>2]|0;
      ;HEAP32[$0>>2]=HEAP32[$_12>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_12+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_12+8>>2]|0;
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $35 = ___cxa_find_matching_catch_2()|0;
 $36 = tempRet0;
 HEAP32[$personalityslot>>2] = $35;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $36;
 $37 = $_14;
 $38 = $37&1;
 if ($38) {
  $_14 = 0;
  __ZN4drop17hf03441be7b92ee0aE($xs);
 }
 $14 = $_13;
 $15 = $14&1;
 if (!($15)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_13 = 0;
 __ZN4drop17h166dc44ee0c91c20E($b);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11webplatform11rust_caller17hee7921a5aed2286aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_13 = 0, $_14 = 0, $_17 = 0, $a = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $docptr = 0, $id = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_12 = sp + 48|0;
 $_13 = sp + 32|0;
 $_14 = sp + 16|0;
 $_17 = sp + 8|0;
 $lvalue_temp = sp + 64|0;
 $lvalue_temp1 = sp + 60|0;
 $personalityslot = sp;
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $a = $3;
 $4 = $arg1;
 $docptr = $4;
 $5 = $arg2;
 $id = $5;
 $6 = $a;
 HEAP32[$lvalue_temp>>2] = $6;
 $7 = HEAP32[$lvalue_temp>>2]|0;
 $v = $7;
 $8 = $v;
 $9 = $id;
 $10 = ($9|0)==(-1);
 if ($10) {
  HEAP32[$_14>>2] = 0;
 } else {
  $11 = $id;
  $12 = $docptr;
  HEAP32[$lvalue_temp1>>2] = $12;
  $13 = HEAP32[$lvalue_temp1>>2]|0;
  HEAP32[$_17>>2] = $11;
  $14 = ((($_17)) + 4|0);
  HEAP32[$14>>2] = $13;
  HEAP32[$_14>>2] = 1;
  $15 = ((($_17)) + 4|0);
  $16 = HEAP32[$_17>>2]|0;
  $17 = HEAP32[$15>>2]|0;
  $18 = ((($_14)) + 4|0);
  HEAP32[$18>>2] = $16;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
 }
 ;HEAP32[$_13>>2]=HEAP32[$_14>>2]|0;HEAP32[$_13+4>>2]=HEAP32[$_14+4>>2]|0;HEAP32[$_13+8>>2]=HEAP32[$_14+8>>2]|0;
 ;HEAP32[$_12>>2]=HEAP32[$_13>>2]|0;HEAP32[$_12+4>>2]=HEAP32[$_13+4>>2]|0;HEAP32[$_12+8>>2]=HEAP32[$_13+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(2,($8|0),($_12|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_2()|0;
  $23 = tempRet0;
  HEAP32[$personalityslot>>2] = $22;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $23;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN11webplatform8HtmlNode2on17h41ac77ef239a6a37E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field$field = 0, $$field11$field = 0, $$field14$field = 0, $$field18 = 0, $$field2$field = 0, $$field21 = 0, $$field5$field = 0, $$field8$field = 0, $$index20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $_4$i = 0, $_50 = 0, $_57 = 0, $_58 = 0, $_8 = 0, $a = 0, $abi_cast = 0, $abi_cast$i = 0, $arena = 0, $arg = 0, $arg0 = 0, $arg0$i = 0, $arg0$i$i = 0, $arg0$i3 = 0, $arg1 = 0;
 var $arg2 = 0, $b = 0, $f = 0, $personalityslot = 0, $personalityslot$index23 = 0, $personalityslot$index25 = 0, $personalityslot$index27 = 0, $s = 0, $self = 0, $self$i = 0, $self$i$i = 0, $x$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $arg0$i = sp + 96|0;
 $abi_cast$i = sp + 120|0;
 $x$i = sp + 88|0;
 $_4$i = sp + 80|0;
 $arg1 = sp + 72|0;
 $arg2 = sp + 64|0;
 $abi_cast = sp + 112|0;
 $s = sp + 56|0;
 $f = sp + 48|0;
 $b = sp + 104|0;
 $_8 = sp + 40|0;
 $arena = sp + 24|0;
 $_50 = sp + 16|0;
 $arg = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $2;
 HEAP32[$abi_cast>>2] = $3;
 ;HEAP32[$arg2>>2]=HEAP32[$abi_cast>>2]|0;
 $_57 = 0;
 $_58 = 0;
 $5 = $arg0;
 $self = $5;
 $6 = HEAP32[$arg1>>2]|0;
 $7 = ((($arg1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$s>>2] = $6;
 $9 = ((($s)) + 4|0);
 HEAP32[$9>>2] = $8;
 $$field$field = HEAP32[$arg2>>2]|0;
 HEAP32[$f>>2] = $$field$field;
 $$field2$field = HEAP32[$f>>2]|0;
 HEAP32[$_8>>2] = $$field2$field;
 $$field5$field = HEAP32[$_8>>2]|0;
 HEAP32[$arg>>2] = $$field5$field;
 $10 = HEAP32[$arg>>2]|0;
 HEAP32[$abi_cast$i>>2] = $10;
 ;HEAP32[$arg0$i>>2]=HEAP32[$abi_cast$i>>2]|0;
 $$field8$field = HEAP32[$arg0$i>>2]|0;
 HEAP32[$x$i>>2] = $$field8$field;
 __THREW__ = 0;
 $11 = (invoke_iii(69,4,4)|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if ($13) {
   label = 20;
  } else {
   $$field11$field = HEAP32[$x$i>>2]|0;
   HEAP32[$_4$i>>2] = $$field11$field;
   $$field14$field = HEAP32[$_4$i>>2]|0;
   HEAP32[$11>>2] = $$field14$field;
   HEAP32[$b>>2] = $11;
   $_57 = 1;
   $14 = HEAP32[$b>>2]|0;
   $a = $14;
   __THREW__ = 0;
   invoke_vi(70,($arena|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    $_58 = 1;
    $17 = $self;
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    $19 = (invoke_iii(71,($18|0),($arena|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     $22 = HEAP32[$s>>2]|0;
     $23 = ((($s)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     __THREW__ = 0;
     $25 = (invoke_iiii(72,($22|0),($24|0),($arena|0))|0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if (!($27)) {
      $28 = $a;
      __THREW__ = 0;
      $29 = (invoke_iii(73,($28|0),($arena|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if (!($31)) {
       __THREW__ = 0;
       $32 = (invoke_iii(73,(74|0),($arena|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if (!($34)) {
        $35 = $self;
        $36 = ((($35)) + 4|0);
        $37 = HEAP32[$36>>2]|0;
        __THREW__ = 0;
        $38 = (invoke_iii(73,($37|0),($arena|0))|0);
        $39 = __THREW__; __THREW__ = 0;
        $40 = $39&1;
        if (!($40)) {
         $41 = _emscripten_asm_const_iiiiii(0, ($19|0), ($25|0), ($29|0), ($32|0), ($38|0))|0;
         $_58 = 0;
         __THREW__ = 0;
         invoke_vi(75,($arena|0));
         $42 = __THREW__; __THREW__ = 0;
         $43 = $42&1;
         if ($43) {
          label = 20;
          break;
         }
         $44 = $self;
         $45 = ((($44)) + 4|0);
         $46 = HEAP32[$45>>2]|0;
         $arg0$i3 = $46;
         $47 = $arg0$i3;
         $self$i = $47;
         $48 = $self$i;
         $arg0$i$i = $48;
         $49 = $arg0$i$i;
         $self$i$i = $49;
         $50 = $self$i$i;
         $51 = HEAP32[$50>>2]|0;
         __THREW__ = 0;
         (invoke_ii(76,($51|0))|0);
         $52 = __THREW__; __THREW__ = 0;
         $53 = $52&1;
         if ($53) {
          label = 20;
          break;
         }
         $54 = $self$i$i;
         __THREW__ = 0;
         $55 = (invoke_ii(77,($54|0))|0);
         $56 = __THREW__; __THREW__ = 0;
         $57 = $56&1;
         if ($57) {
          label = 20;
          break;
         }
         $58 = HEAP32[$55>>2]|0;
         $59 = ((($58)) + 8|0);
         __THREW__ = 0;
         invoke_vii(78,($_50|0),($59|0));
         $60 = __THREW__; __THREW__ = 0;
         $61 = $60&1;
         if ($61) {
          label = 20;
          break;
         }
         __THREW__ = 0;
         $62 = (invoke_ii(79,($_50|0))|0);
         $63 = __THREW__; __THREW__ = 0;
         $64 = $63&1;
         if (!($64)) {
          $_57 = 0;
          $65 = HEAP32[$b>>2]|0;
          __THREW__ = 0;
          invoke_viii(80,($62|0),($65|0),(8|0));
          $66 = __THREW__; __THREW__ = 0;
          $67 = $66&1;
          if (!($67)) {
           __THREW__ = 0;
           invoke_vi(81,($_50|0));
           $68 = __THREW__; __THREW__ = 0;
           $69 = $68&1;
           if ($69) {
            label = 20;
            break;
           }
           STACKTOP = sp;return;
          }
         }
         $78 = ___cxa_find_matching_catch_2()|0;
         $79 = tempRet0;
         HEAP32[$personalityslot>>2] = $78;
         $personalityslot$index27 = ((($personalityslot)) + 4|0);
         HEAP32[$personalityslot$index27>>2] = $79;
         __ZN4drop17h9988fea94e44325dE($_50);
         break;
        }
       }
      }
     }
    }
   }
   $74 = ___cxa_find_matching_catch_2()|0;
   $75 = tempRet0;
   HEAP32[$personalityslot>>2] = $74;
   $personalityslot$index25 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index25>>2] = $75;
   $76 = $_58;
   $77 = $76&1;
   if ($77) {
    $_58 = 0;
    __ZN4drop17hc2512a9167c6ec2fE($arena);
   }
  }
 } while(0);
 if ((label|0) == 20) {
  $72 = ___cxa_find_matching_catch_2()|0;
  $73 = tempRet0;
  HEAP32[$personalityslot>>2] = $72;
  $personalityslot$index23 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index23>>2] = $73;
 }
 $70 = $_57;
 $71 = $70&1;
 if (!($71)) {
  $$field18 = HEAP32[$personalityslot>>2]|0;
  $$index20 = ((($personalityslot)) + 4|0);
  $$field21 = HEAP32[$$index20>>2]|0;
  ___resumeException($$field18|0);
  // unreachable;
 }
 $_57 = 0;
 __ZN4drop17h5db21c691d1a16dfE($b);
 $$field18 = HEAP32[$personalityslot>>2]|0;
 $$index20 = ((($personalityslot)) + 4|0);
 $$field21 = HEAP32[$$index20>>2]|0;
 ___resumeException($$field18|0);
 // unreachable;
}
function __ZN13drop_contents17h0defdbdca0c80acfE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13drop_contents17h101f632fab02b382E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h8621290ecb337928E($0);
 return;
}
function __ZN13drop_contents17h19ad216dcb0858f3E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hfdd033c410114ff4E($0);
 return;
}
function __ZN13drop_contents17h2ba875ae322bbecfE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13drop_contents17h6fe1215d7d39866fE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13drop_contents17h86791f505b238803E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13drop_contents17hb393097f2511c3bdE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13drop_contents17hc2512a9167c6ec2fE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hfb06615c140affc4E($0);
 return;
}
function __ZN13drop_contents17hccfc6765fb5309cfE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13drop_contents17hd149da3cb874e5c3E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h86791f505b238803E($0);
 return;
}
function __ZN13drop_contents17he054896e36c770a0E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h6fe1215d7d39866fE($0);
 return;
}
function __ZN13drop_contents17he504cf7c5a4efd98E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13drop_contents17hf03441be7b92ee0aE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h2ba875ae322bbecfE($0);
 return;
}
function __ZN13drop_contents17hfb06615c140affc4E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13drop_contents17hfdd033c410114ff4E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17h291309cf02aab594E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17hb496313349b05f7eE($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17h5e039cab79421a09E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $value = $3;
 $4 = $value;
 $5 = $self;
 $6 = (__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17hb496313349b05f7eE($5)|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h1f125474e9b421a3E($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h65b05d74ea2ba073E($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h82e4da70006f6e9dE($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN37__LT_core__cell__RefCell_LT_T_GT__GT_10borrow_mut17hec8fa778bac9e76aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_3 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_3 = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN37__LT_core__cell__RefCell_LT_T_GT__GT_14try_borrow_mut17h939fdd1f5ce9108aE($_3,$3);
 __THREW__ = 0;
 invoke_viiii(82,($0|0),($_3|0),(6296|0),16);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  HEAP32[$personalityslot>>2] = $6;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $7;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN37__LT_core__cell__RefCell_LT_T_GT__GT_14try_borrow_mut17h939fdd1f5ce9108aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val23 = 0, $$expand_i1_val24 = 0, $$expand_i1_val25 = 0, $$expand_i1_val26 = 0, $$expand_i1_val27 = 0, $$field = 0, $$field10 = 0, $$field13 = 0, $$field17 = 0, $$field4 = 0, $$field7 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_16 = 0, $_17 = 0, $_3 = 0, $_7 = 0, $abi_cast = 0, $arg0 = 0, $b = 0, $personalityslot = 0, $personalityslot$index20 = 0, $personalityslot$index22 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_3 = sp + 32|0;
 $b = sp + 24|0;
 $_7 = sp + 16|0;
 $_13 = sp + 8|0;
 $abi_cast = sp + 36|0;
 $personalityslot = sp;
 $arg0 = $1;
 $_17 = 0;
 $_16 = 0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $_16 = 1;
 $4 = (__ZN4core4cell12BorrowRefMut3new17h9c5555681b9a57e9E($3)|0);
 HEAP32[$abi_cast>>2] = $4;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $5 = HEAP32[$_3>>2]|0;
 $6 = ($5|0)!=(0|0);
 $$expand_i1_val = $6&1;
 $$expand_i1_val23 = 1;
 $switch2 = ($$expand_i1_val&255)<($$expand_i1_val23&255);
 do {
  if ($switch2) {
   HEAP32[$0>>2] = 0;
   label = 7;
  } else {
   $_16 = 0;
   $_17 = 1;
   $$field7 = HEAP32[$_3>>2]|0;
   HEAP32[$b>>2] = $$field7;
   $9 = $self;
   $10 = ((($9)) + 4|0);
   __THREW__ = 0;
   $11 = (invoke_ii(83,($10|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $_17 = 0;
    $$field10 = HEAP32[$b>>2]|0;
    HEAP32[$_13>>2] = $$field10;
    HEAP32[$_7>>2] = $11;
    $$field13 = HEAP32[$_13>>2]|0;
    $14 = ((($_7)) + 4|0);
    HEAP32[$14>>2] = $$field13;
    $15 = ((($_7)) + 4|0);
    $16 = HEAP32[$_7>>2]|0;
    $$field17 = HEAP32[$15>>2]|0;
    HEAP32[$0>>2] = $16;
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $$field17;
    label = 7;
    break;
   }
   $28 = ___cxa_find_matching_catch_2()|0;
   $29 = tempRet0;
   HEAP32[$personalityslot>>2] = $28;
   $personalityslot$index20 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index20>>2] = $29;
   $30 = $_17;
   $31 = $30&1;
   if ($31) {
    $_17 = 0;
    __ZN4drop17hccfc6765fb5309cfE($b);
   }
   $7 = HEAP32[$_3>>2]|0;
   $8 = ($7|0)!=(0|0);
   $$expand_i1_val24 = $8&1;
   $$expand_i1_val25 = 1;
   $switch = ($$expand_i1_val24&255)<($$expand_i1_val25&255);
   if ($switch) {
    __ZN4drop17h604dc3172dcac63fE($_3);
    break;
   }
   $20 = $_16;
   $21 = $20&1;
   if ($21) {
    $_16 = 0;
    __ZN4drop17hccfc6765fb5309cfE($_3);
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $18 = HEAP32[$_3>>2]|0;
  $19 = ($18|0)!=(0|0);
  $$expand_i1_val26 = $19&1;
  $$expand_i1_val27 = 1;
  $switch1 = ($$expand_i1_val26&255)<($$expand_i1_val27&255);
  if ($switch1) {
   __THREW__ = 0;
   invoke_vi(84,($_3|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    STACKTOP = sp;return;
   }
  } else {
   $24 = $_16;
   $25 = $24&1;
   if (!($25)) {
    STACKTOP = sp;return;
   }
   $_16 = 0;
   __THREW__ = 0;
   invoke_vi(85,($_3|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    STACKTOP = sp;return;
   }
  }
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  HEAP32[$personalityslot>>2] = $32;
  $personalityslot$index22 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index22>>2] = $33;
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17heb1f366c3384df31E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index6 = 0, $personalityslot$index8 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 32|0;
 $self = sp + 16|0;
 $val = sp + 8|0;
 $personalityslot = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 $_7 = 0;
 $_7 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;
 $2 = HEAP32[$self>>2]|0;
 $switch1 = ($2>>>0)<(1);
 do {
  if ($switch1) {
   __THREW__ = 0;
   invoke_vi(86,(3288|0));
   $3 = __THREW__; __THREW__ = 0;
   $4 = ___cxa_find_matching_catch_2()|0;
   $5 = tempRet0;
   HEAP32[$personalityslot>>2] = $4;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $5;
   $6 = HEAP32[$self>>2]|0;
   $switch2 = ($6>>>0)<(1);
   if ($switch2) {
    __ZN4drop17h87dfd1e8f8a4cb6dE($self);
    break;
   }
   $17 = $_7;
   $18 = $17&1;
   if ($18) {
    $_7 = 0;
    $19 = ((($self)) + 4|0);
    __ZN4drop17h0defdbdca0c80acfE($19);
   }
  } else {
   $_7 = 0;
   $7 = ((($self)) + 4|0);
   $8 = ((($7)) + 4|0);
   $9 = HEAP32[$7>>2]|0;
   $10 = HEAP32[$8>>2]|0;
   HEAP32[$val>>2] = $9;
   $11 = ((($val)) + 4|0);
   HEAP32[$11>>2] = $10;
   $12 = ((($val)) + 4|0);
   $13 = HEAP32[$val>>2]|0;
   $14 = HEAP32[$12>>2]|0;
   HEAP32[$0>>2] = $13;
   $15 = ((($0)) + 4|0);
   HEAP32[$15>>2] = $14;
   $16 = HEAP32[$self>>2]|0;
   $switch = ($16>>>0)<(1);
   if (!($switch)) {
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_vi(87,($self|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $22 = ___cxa_find_matching_catch_2()|0;
    $23 = tempRet0;
    HEAP32[$personalityslot>>2] = $22;
    $personalityslot$index8 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index8>>2] = $23;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_14from_raw_parts17hae92b2cc052f1c35E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field$field = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $capacity = 0, $length = 0, $ptr = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $arg1 = $2;
 $arg2 = $3;
 $4 = $arg0;
 $ptr = $4;
 $5 = $arg1;
 $length = $5;
 $6 = $arg2;
 $capacity = $6;
 $7 = $ptr;
 $8 = $capacity;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17hdd8fc42bc367b9c9E($tmp_ret,$7,$8);
 $9 = ((($tmp_ret)) + 4|0);
 $$field$field = HEAP32[$tmp_ret>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $length;
 HEAP32[$0>>2] = $$field$field;
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17h38da251d6b68dc83E($0) {
 $0 = $0|0;
 var $$field$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h895432b4e85f32a8E($tmp_ret);
 $1 = ((($tmp_ret)) + 4|0);
 $$field$field = HEAP32[$tmp_ret>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $$field$field;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_4push17he1aa43e42998e393E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$sreg$field = 0, $$sreg$field5 = 0, $$sreg$index4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_22 = 0;
 var $arg0 = 0, $arg0$i = 0, $arg1 = 0, $end = 0, $personalityslot = 0, $personalityslot$index7 = 0, $self = 0, $self$i = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $arg1 = sp + 24|0;
 $value = sp + 16|0;
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $2;
 $_22 = 0;
 $5 = $arg0;
 $self = $5;
 $_22 = 1;
 $6 = HEAP32[$arg1>>2]|0;
 $7 = ((($arg1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$value>>2] = $6;
 $9 = ((($value)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $self;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $self;
 $arg0$i = $13;
 $14 = $arg0$i;
 $self$i = $14;
 __THREW__ = 0;
 $15 = (invoke_i(88)|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 do {
  if (!($17)) {
   $18 = ($15|0)==(0);
   if ($18) {
    $_0$i = -1;
   } else {
    $19 = $self$i;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $_0$i = $21;
   }
   $22 = $_0$i;
   $23 = ($12|0)==($22|0);
   if ($23) {
    $24 = $self;
    __THREW__ = 0;
    invoke_vi(89,($24|0));
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     break;
    }
   }
   $27 = $self;
   __THREW__ = 0;
   invoke_vii(90,($3|0),($27|0));
   $$sreg$field = HEAP32[$3>>2]|0;
   $$sreg$index4 = ((($3)) + 4|0);
   $$sreg$field5 = HEAP32[$$sreg$index4>>2]|0;
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    __THREW__ = 0;
    $30 = (invoke_iii(91,($$sreg$field|0),($$sreg$field5|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if (!($32)) {
     $33 = $self;
     $34 = ((($33)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     $36 = (invoke_iii(92,($30|0),($35|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if (!($38)) {
      $end = $36;
      $39 = $end;
      $_22 = 0;
      $40 = HEAP32[$value>>2]|0;
      $41 = ((($value)) + 4|0);
      $42 = HEAP32[$41>>2]|0;
      __THREW__ = 0;
      invoke_viii(93,($39|0),($40|0),($42|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if (!($44)) {
       $45 = $self;
       $46 = ((($45)) + 8|0);
       $47 = $self;
       $48 = ((($47)) + 8|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (($49) + 1)|0;
       HEAP32[$46>>2] = $50;
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 } while(0);
 $51 = ___cxa_find_matching_catch_2()|0;
 $52 = tempRet0;
 HEAP32[$personalityslot>>2] = $51;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $52;
 $53 = $_22;
 $54 = $53&1;
 if (!($54)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_22 = 0;
 __ZN4drop17h98420d1c175822bcE($value);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17hdd8fc42bc367b9c9E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $cap = 0, $ptr = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $abi_cast = sp + 4|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $cap = $4;
 $5 = $ptr;
 $6 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h1f125474e9b421a3E($5)|0);
 HEAP32[$abi_cast>>2] = $6;
 ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret>>2]|0;
 $7 = $cap;
 HEAP32[$0>>2] = $$field;
 $8 = ((($0)) + 4|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h895432b4e85f32a8E($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $abi_cast = 0, $cap = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp;
 $abi_cast = sp + 4|0;
 $1 = (__ZN4core3mem7size_of17h6b2a5e5b6654bff6E()|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $cap = -1;
 } else {
  $cap = 0;
 }
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h65b05d74ea2ba073E((1))|0);
 HEAP32[$abi_cast>>2] = $3;
 ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret>>2]|0;
 $4 = $cap;
 HEAP32[$0>>2] = $$field;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h08da60f1da26d7caE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h381c4460d502091dE($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h0e1aeebaaf4243cdE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd09980720cd59956E($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h80ac1ad82cccc24eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hbd38f9fc458f30d0E($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h9e50d461979fcd78E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h27a654e33c937434E($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hf85ec2338e76a049E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h9851ebce34f52a0cE($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h0e8c7f4888ba14f8E($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $abi_cast = 0, $align = 0, $arg0 = 0, $elem_size = 0, $new_alloc_size = 0, $new_cap = 0;
 var $new_cap1 = 0, $new_cap3 = 0, $ptr = 0, $ptr2 = 0, $ptr4 = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_13 = sp + 8|0;
 $tmp_ret = sp;
 $abi_cast = sp + 16|0;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17headfa8af309595d8E()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 $5 = $4 ^ 1;
 if ($5) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3160);
  // unreachable;
 }
 $6 = (__ZN4core3mem8align_of17h27591068d88f93b8E()|0);
 $align = $6;
 $7 = $self;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $elem_size;
  $12 = ($11>>>0)>(536870911);
  if ($12) {
   $new_cap1 = 1;
  } else {
   $new_cap1 = 4;
  }
  $34 = $new_cap1;
  $35 = $elem_size;
  $36 = Math_imul($34, $35)|0;
  $37 = $align;
  $38 = (__ZN5alloc4heap8allocate17h358fb0ac596fce84E($36,$37)|0);
  $ptr2 = $38;
  $39 = $new_cap1;
  $40 = $ptr2;
  HEAP32[$_13>>2] = $39;
  $41 = ((($_13)) + 4|0);
  HEAP32[$41>>2] = $40;
 } else {
  $13 = $self;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $new_cap3 = $16;
  $17 = $new_cap3;
  $18 = $elem_size;
  $19 = Math_imul($17, $18)|0;
  $new_alloc_size = $19;
  $20 = $new_alloc_size;
  __ZN5alloc7raw_vec11alloc_guard17h6eacc493ea6b88dbE($20);
  $21 = $self;
  $22 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h08da60f1da26d7caE($21)|0);
  $23 = $self;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $elem_size;
  $27 = Math_imul($25, $26)|0;
  $28 = $new_alloc_size;
  $29 = $align;
  $30 = (__ZN5alloc4heap10reallocate17he28f7928a028933bE($22,$27,$28,$29)|0);
  $ptr4 = $30;
  $31 = $new_cap3;
  $32 = $ptr4;
  HEAP32[$_13>>2] = $31;
  $33 = ((($_13)) + 4|0);
  HEAP32[$33>>2] = $32;
 }
 $42 = HEAP32[$_13>>2]|0;
 $new_cap = $42;
 $43 = ((($_13)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $ptr = $44;
 $45 = $ptr;
 $46 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE($45)|0);
 if ($46) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 } else {
  $47 = $ptr;
  $48 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h82e4da70006f6e9dE($47)|0);
  HEAP32[$abi_cast>>2] = $48;
  ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
  $$field = HEAP32[$tmp_ret>>2]|0;
  $49 = $self;
  HEAP32[$49>>2] = $$field;
  $50 = $new_cap;
  $51 = $self;
  $52 = ((($51)) + 4|0);
  HEAP32[$52>>2] = $50;
  STACKTOP = sp;return;
 }
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17h9563817f345a3618E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17hb496313349b05f7eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6expect17h57c3f1996cc9a614E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$expand_i1_val = 0, $$expand_i1_val15 = 0, $$expand_i1_val16 = 0, $$expand_i1_val17 = 0, $$expand_i1_val18 = 0, $$expand_i1_val19 = 0, $$field = 0, $$field11 = 0, $$field4 = 0, $$field7 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0;
 var $arg0 = 0, $arg1 = 0, $msg = 0, $personalityslot = 0, $personalityslot$index14 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg0 = sp + 40|0;
 $arg1 = sp + 32|0;
 $self = sp + 24|0;
 $msg = sp + 16|0;
 $t = sp + 8|0;
 $personalityslot = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;
 HEAP32[$arg1>>2] = $2;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $3;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 $_11 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$msg>>2] = $5;
 $8 = ((($msg)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$self>>2]|0;
 $10 = ($9|0)==(0|0);
 $$expand_i1_val = $10&1;
 $$expand_i1_val15 = 1;
 $switch1 = ($$expand_i1_val&255)<($$expand_i1_val15&255);
 if ($switch1) {
  $_11 = 0;
  $11 = ((($self)) + 4|0);
  $12 = HEAP32[$self>>2]|0;
  $$field7 = HEAP32[$11>>2]|0;
  HEAP32[$t>>2] = $12;
  $13 = ((($t)) + 4|0);
  HEAP32[$13>>2] = $$field7;
  $14 = ((($t)) + 4|0);
  $15 = HEAP32[$t>>2]|0;
  $$field11 = HEAP32[$14>>2]|0;
  HEAP32[$0>>2] = $15;
  $16 = ((($0)) + 4|0);
  HEAP32[$16>>2] = $$field11;
  $17 = HEAP32[$self>>2]|0;
  $18 = ($17|0)==(0|0);
  $$expand_i1_val16 = $18&1;
  $$expand_i1_val17 = 1;
  $switch = ($$expand_i1_val16&255)<($$expand_i1_val17&255);
  if ($switch) {
   STACKTOP = sp;return;
  }
  $_10 = 0;
  STACKTOP = sp;return;
 }
 $_10 = 0;
 $19 = HEAP32[$msg>>2]|0;
 $20 = ((($msg)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 __THREW__ = 0;
 invoke_vii(94,($19|0),($21|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = ___cxa_find_matching_catch_2()|0;
 $24 = tempRet0;
 HEAP32[$personalityslot>>2] = $23;
 $personalityslot$index14 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index14>>2] = $24;
 $25 = HEAP32[$self>>2]|0;
 $26 = ($25|0)==(0|0);
 $$expand_i1_val18 = $26&1;
 $$expand_i1_val19 = 1;
 $switch2 = ($$expand_i1_val18&255)<($$expand_i1_val19&255);
 if ($switch2) {
  $27 = $_11;
  $28 = $27&1;
  if ($28) {
   $_11 = 0;
   __ZN4drop17h9988fea94e44325dE($self);
  }
 } else {
  $29 = $_10;
  $30 = $29&1;
  if ($30) {
   $_10 = 0;
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core3fmt10ArgumentV13new17h008b2b0633a7e985E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt10ArgumentV13new17h018a2d28ebe4c1caE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt10ArgumentV13new17h4fc99b8d04e93a27E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt10ArgumentV13new17ha2f19ba0a108ab54E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt9Arguments6new_v117h22aa263f6d4613b4E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_6 = 0, $arg0 = 0, $arg1 = 0, $args = 0, $pieces = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 32|0;
 $arg1 = sp + 24|0;
 $pieces = sp + 16|0;
 $args = sp + 8|0;
 $_6 = sp;
 HEAP32[$arg0>>2] = $1;
 $5 = ((($arg0)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$arg1>>2] = $3;
 $6 = ((($arg1)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[$arg0>>2]|0;
 $8 = ((($arg0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$pieces>>2] = $7;
 $10 = ((($pieces)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$arg1>>2]|0;
 $12 = ((($arg1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$args>>2] = $11;
 $14 = ((($args)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$pieces>>2]|0;
 $16 = ((($pieces)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$_6>>2] = 0;
 $18 = HEAP32[$args>>2]|0;
 $19 = ((($args)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$0>>2] = $15;
 $21 = ((($0)) + 4|0);
 HEAP32[$21>>2] = $17;
 $22 = ((($0)) + 8|0);
 ;HEAP32[$22>>2]=HEAP32[$_6>>2]|0;HEAP32[$22+4>>2]=HEAP32[$_6+4>>2]|0;
 $23 = ((($0)) + 16|0);
 HEAP32[$23>>2] = $18;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $20;
 STACKTOP = sp;return;
}
function __ZN4core3mem11size_of_val17h529f813afa514346E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $tmp_ret = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $val = $1;
 $tmp_ret = 20;
 $2 = $tmp_ret;
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3mem11size_of_val17h8523fe3ab19fd256E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $tmp_ret = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $val = $1;
 $tmp_ret = 24;
 $2 = $tmp_ret;
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3mem12align_of_val17h37af3e5570b87da4E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $tmp_ret = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $val = $1;
 $tmp_ret = 4;
 $2 = $tmp_ret;
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3mem12align_of_val17hccdf51f1d3bcb1bfE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $tmp_ret = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $val = $1;
 $tmp_ret = 4;
 $2 = $tmp_ret;
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3mem6forget17h9dff91a509cf3a14E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $t = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$t>>2] = $3;
 $6 = ((($t)) + 4|0);
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN4core3mem7size_of17h01334bab523b4211E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem7size_of17h6b2a5e5b6654bff6E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 8;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem7size_of17hd154145e87414f75E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 40;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem7size_of17headfa8af309595d8E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 8;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem7size_of17hf25428224e4aa658E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 20;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem7size_of17hf53622acb0d5c06dE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17h27591068d88f93b8E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17h47c7e034cc1677e4E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17ha27b5d1180f16c91E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17he32ca0008511ab29E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17hebc60f0adf02a83fE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h3666bfeb514b5534E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17hb8a95b15c9b7edd4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5<<3)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h107a40b19806ce4dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h691e954f77d68d23E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h2a6bbe28f7c4c9eeE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h9f2658e12a6cea87E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h53c0df43cabeafe8E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h72516150e42e5932E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h23ea4d0b4a30c0deE()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hf503e2c3673e25ffE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h7897726fa2c131ccE()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr4null17h80bcfd92278ac796E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr4null17h80bcfd92278ac796E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN4core3ptr5write17hd6caf7237ae26be3E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $dst = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg1 = sp + 8|0;
 $src = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $dst = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$src>>2] = $5;
 $8 = ((($src)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $dst;
 $10 = HEAP32[$src>>2]|0;
 $11 = ((($src)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$9>>2] = $10;
 $13 = ((($9)) + 4|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN4core3ptr8null_mut17h23ea4d0b4a30c0deE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN4core3ptr8null_mut17h53c0df43cabeafe8E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN4core3ptr8null_mut17h691e954f77d68d23E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN4core3ptr8null_mut17h7897726fa2c131ccE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN4core3ptr8null_mut17h9f2658e12a6cea87E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN4core4cell12BorrowRefMut3new17h9c5555681b9a57e9E($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_0 = 0, $_3 = 0, $_7 = 0, $arg0 = 0, $borrow = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp + 8|0;
 $_7 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $borrow = $1;
 $2 = $borrow;
 $3 = (__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17h291309cf02aab594E($2)|0);
 $_3 = $3;
 $4 = $_3;
 $cond = ($4|0)==(0);
 if ($cond) {
  $5 = $borrow;
  __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17h5e039cab79421a09E($5,-1);
  $6 = $borrow;
  HEAP32[$_7>>2] = $6;
  $$field = HEAP32[$_7>>2]|0;
  HEAP32[$_0>>2] = $$field;
  $7 = HEAP32[$_0>>2]|0;
  STACKTOP = sp;return ($7|0);
 } else {
  HEAP32[$_0>>2] = 0;
  $7 = HEAP32[$_0>>2]|0;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN4core5slice14from_raw_parts17h0f2b4aaac10b99d1E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_5>>2] = $4;
 $6 = ((($_5)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_5)) + 4|0);
 $8 = HEAP32[$_5>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core5slice18from_raw_parts_mut17h03b09f3afc0dd1deE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core5slice18from_raw_parts_mut17h101fab0c1c9324ddE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core5slice18from_raw_parts_mut17hcd2ecb3f4ee72723E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core5slice18from_raw_parts_mut17hfbb1ade5a821b90eE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core5slice18from_raw_parts_mut17hfcfd7bde64e0033fE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core6result13unwrap_failed17h77140d60754f5e94E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_5 = 0, $__arg0 = 0, $__arg1 = 0, $arg0 = 0;
 var $error = 0, $msg = 0, $personalityslot = 0, $personalityslot$index1 = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $arg0 = sp + 80|0;
 $msg = sp + 72|0;
 $error = sp + 72|0;
 $_5 = sp + 48|0;
 $_10 = sp + 32|0;
 $_11 = sp + 24|0;
 $tmp_ret = sp + 16|0;
 $personalityslot = sp + 8|0;
 $tmp_ret1 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$msg>>2] = $3;
 $6 = ((($msg)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[830]|0;
 $8 = HEAP32[(3324)>>2]|0;
 HEAP32[$_11>>2] = $msg;
 $9 = ((($_11)) + 4|0);
 HEAP32[$9>>2] = $error;
 $10 = HEAP32[$_11>>2]|0;
 $__arg0 = $10;
 $11 = ((($_11)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $__arg1 = $12;
 $13 = $__arg0;
 __THREW__ = 0;
 invoke_viii(95,($tmp_ret|0),($13|0),(96|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $16 = ((($tmp_ret)) + 4|0);
  $17 = HEAP32[$tmp_ret>>2]|0;
  $18 = HEAP32[$16>>2]|0;
  $19 = $__arg1;
  __THREW__ = 0;
  invoke_viii(97,($tmp_ret1|0),($19|0),(98|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = ((($tmp_ret1)) + 4|0);
   $23 = HEAP32[$tmp_ret1>>2]|0;
   $24 = HEAP32[$22>>2]|0;
   HEAP32[$_10>>2] = $17;
   $25 = ((($_10)) + 4|0);
   HEAP32[$25>>2] = $18;
   $26 = ((($_10)) + 8|0);
   HEAP32[$26>>2] = $23;
   $27 = ((($26)) + 4|0);
   HEAP32[$27>>2] = $24;
   __THREW__ = 0;
   invoke_viiiii(99,($_5|0),($7|0),($8|0),($_10|0),2);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    __THREW__ = 0;
    invoke_vii(100,($_5|0),(3308|0));
    $30 = __THREW__; __THREW__ = 0;
   }
  }
 }
 $31 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 HEAP32[$personalityslot>>2] = $31;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $32;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17h0d843978a8ab0695E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*40)|0)|0);
 $6 = $1;
 while(1) {
  $5 = ($6|0)!=($4|0);
  if (!($5)) {
   break;
  }
  __ZN4drop17ha205707b039862c0E($6);
  $7 = ((($6)) + 40|0);
  $6 = $7;
 }
 return;
}
function __ZN4drop17h0defdbdca0c80acfE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(101,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h0defdbdca0c80acfE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h0defdbdca0c80acfE($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17h101f632fab02b382E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(102,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h101f632fab02b382E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h101f632fab02b382E($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17h1167aefc16d58224E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZN4drop17hf9f4908c9ccb38c3E($1);
 return;
}
function __ZN4drop17h166dc44ee0c91c20E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __ZN4drop17h0d843978a8ab0695E($0);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*40)|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  return;
 }
 __ZN5alloc4heap13exchange_free17h5720505cfcfb7278E($1,$4,4);
 return;
}
function __ZN4drop17h19ad216dcb0858f3E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(103,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h19ad216dcb0858f3E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h19ad216dcb0858f3E($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17h1ca46873bf54f038E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*20)|0)|0);
 $6 = $1;
 while(1) {
  $5 = ($6|0)!=($4|0);
  if (!($5)) {
   break;
  }
  __ZN4drop17h5b0992d5c6f24addE($6);
  $7 = ((($6)) + 20|0);
  $6 = $7;
 }
 return;
}
function __ZN4drop17h2ba875ae322bbecfE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(104,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h2ba875ae322bbecfE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h2ba875ae322bbecfE($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17h381dcdd9fdbdc868E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4drop17h4044a9109b846868E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_vi[$3 & 511]($4);
 return;
}
function __ZN4drop17h42884dd0cc00f805E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __ZN4drop17h4044a9109b846868E($0);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $8 = ($6|0)!=(0);
 if (!($8)) {
  return;
 }
 __ZN5alloc4heap13exchange_free17h5720505cfcfb7278E($1,$6,$7);
 return;
}
function __ZN4drop17h534ba5ae66184666E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hd149da3cb874e5c3E($0);
 return;
}
function __ZN4drop17h5b0992d5c6f24addE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 0:  {
  return;
  break;
 }
 case 1:  {
  $2 = ((($0)) + 12|0);
  __ZN4drop17hb393097f2511c3bdE($2);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __ZN4drop17h5db21c691d1a16dfE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __ZN5alloc4heap13exchange_free17h5720505cfcfb7278E($1,4,4);
 return;
}
function __ZN4drop17h604dc3172dcac63fE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $1 = 0, $2 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 $$expand_i1_val = $2&1;
 $$expand_i1_val2 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val2&255);
 if ($switch) {
  return;
 }
 __ZN4drop17hccfc6765fb5309cfE($0);
 return;
}
function __ZN4drop17h693b14c1ce6de27fE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZN4drop17hbf537a0cbc2fe8a5E($1);
 return;
}
function __ZN4drop17h6fe1215d7d39866fE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(105,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h6fe1215d7d39866fE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h6fe1215d7d39866fE($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17h7681d5741b632c42E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h87dfd1e8f8a4cb6dE($0);
 return;
}
function __ZN4drop17h780c91cf5ee5c5e9E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3<<3)|0);
 $6 = $1;
 while(1) {
  $5 = ($6|0)!=($4|0);
  if (!($5)) {
   break;
  }
  __ZN4drop17h98420d1c175822bcE($6);
  $7 = ((($6)) + 8|0);
  $6 = $7;
 }
 return;
}
function __ZN4drop17h8091b7b01ea60ac0E($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $1 = 0, $2 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 $$expand_i1_val = $2&1;
 $$expand_i1_val2 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val2&255);
 if ($switch) {
  return;
 }
 __ZN4drop17h19ad216dcb0858f3E($0);
 return;
}
function __ZN4drop17h8621290ecb337928E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  return;
 }
 __ZN5alloc4heap13exchange_free17h5720505cfcfb7278E($1,$4,1);
 return;
}
function __ZN4drop17h86791f505b238803E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(106,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h86791f505b238803E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h86791f505b238803E($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17h87dfd1e8f8a4cb6dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $cond = ($1|0)==(1);
 if (!($cond)) {
  return;
 }
 $2 = ((($0)) + 4|0);
 __ZN4drop17h0defdbdca0c80acfE($2);
 return;
}
function __ZN4drop17h921e5ca9ee3c1fefE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17he504cf7c5a4efd98E($0);
 return;
}
function __ZN4drop17h97a5bb65de232a90E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_vi[$3 & 511]($4);
 return;
}
function __ZN4drop17h98420d1c175822bcE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __ZN4drop17h97a5bb65de232a90E($0);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $8 = ($6|0)!=(0);
 if (!($8)) {
  return;
 }
 __ZN5alloc4heap13exchange_free17h5720505cfcfb7278E($1,$6,$7);
 return;
}
function __ZN4drop17h9988fea94e44325dE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZN4drop17hccfc6765fb5309cfE($1);
 return;
}
function __ZN4drop17ha205707b039862c0E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZN4drop17h8091b7b01ea60ac0E($1);
 $2 = ((($0)) + 20|0);
 __ZN4drop17hb7ba846428ca9570E($2);
 return;
}
function __ZN4drop17hb393097f2511c3bdE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(107,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17hb393097f2511c3bdE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hb393097f2511c3bdE($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17hb7ba846428ca9570E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $cond = ($1|0)==(1);
 if (!($cond)) {
  return;
 }
 $2 = ((($0)) + 4|0);
 __ZN4drop17hf636773143103807E($2);
 return;
}
function __ZN4drop17hbf537a0cbc2fe8a5E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17he054896e36c770a0E($0);
 return;
}
function __ZN4drop17hc2512a9167c6ec2fE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(108,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17hc2512a9167c6ec2fE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hc2512a9167c6ec2fE($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17hccfc6765fb5309cfE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(109,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17hccfc6765fb5309cfE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hccfc6765fb5309cfE($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17hd149da3cb874e5c3E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(110,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17hd149da3cb874e5c3E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hd149da3cb874e5c3E($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17he03e6c24809778eaE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3<<3)|0);
 $6 = $1;
 while(1) {
  $5 = ($6|0)!=($4|0);
  if (!($5)) {
   break;
  }
  __ZN4drop17h101f632fab02b382E($6);
  $7 = ((($6)) + 8|0);
  $6 = $7;
 }
 return;
}
function __ZN4drop17he054896e36c770a0E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(111,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17he054896e36c770a0E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17he054896e36c770a0E($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17he504cf7c5a4efd98E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(112,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17he504cf7c5a4efd98E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17he504cf7c5a4efd98E($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17hf03441be7b92ee0aE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(113,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17hf03441be7b92ee0aE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hf03441be7b92ee0aE($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17hf636773143103807E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 0:  {
  $2 = ((($0)) + 4|0);
  __ZN4drop17h534ba5ae66184666E($2);
  return;
  break;
 }
 case 1:  {
  return;
  break;
 }
 case 2:  {
  $3 = ((($0)) + 4|0);
  __ZN4drop17hf03441be7b92ee0aE($3);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __ZN4drop17hf9f4908c9ccb38c3E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h42884dd0cc00f805E($0);
 return;
}
function __ZN4drop17hfb06615c140affc4E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(114,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17hfb06615c140affc4E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hfb06615c140affc4E($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17hfdd033c410114ff4E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(115,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17hfdd033c410114ff4E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hfdd033c410114ff4E($0);
  STACKTOP = sp;return;
 }
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h40f049985213b358E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h5da33358dd5c34e7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17hc325a020e20b087aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = $index;
 $10 = HEAP32[$self>>2]|0;
 $11 = ((($self)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_iiii(116,($9|0),($10|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h2480914c11445481E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $lvalue_temp = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$lvalue_temp>>2] = $7;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($lvalue_temp)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZN53__LT_str_u20_as_u20_collections__string__ToString_GT_9to_string17h092944ddf5d7800fE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN93__LT_collections__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17he1798c51f55475c1E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17ha3b8a98364490850E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $f = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $f;
 $9 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hded13da3919e24b6E($5,$7,$8)|0);
 HEAP8[$abi_cast>>0] = $9;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $10 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($10|0);
}
function __ZN58__LT_alloc__rc__Rc_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h2d3c297eb02d11a4E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0;
 var $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE($2)|0);
 $4 = HEAP32[$3>>2]|0;
 $ptr = $4;
 $5 = $self;
 __ZN5alloc2rc8RcBoxPtr10dec_strong17hfe12e4f1e27e6aafE($5);
 $6 = $self;
 $7 = (__ZN5alloc2rc8RcBoxPtr6strong17hb0fc32cc2c2eeee7E($6)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $ptr;
 $10 = ((($9)) + 8|0);
 __ZN4drop17h1167aefc16d58224E($10);
 $11 = $self;
 __ZN5alloc2rc8RcBoxPtr8dec_weak17h1364e1391b8e6eeeE($11);
 $12 = $self;
 $13 = (__ZN5alloc2rc8RcBoxPtr4weak17h09b87e21d46b95efE($12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $ptr;
 $16 = $ptr;
 $17 = (__ZN4core3mem11size_of_val17h529f813afa514346E($16)|0);
 $18 = $ptr;
 $19 = (__ZN4core3mem12align_of_val17hccdf51f1d3bcb1bfE($18)|0);
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E($15,$17,$19);
 STACKTOP = sp;return;
}
function __ZN58__LT_alloc__rc__Rc_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h7572d9a6c7fc2293E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0;
 var $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h26bd916e4f84eb12E($2)|0);
 $4 = HEAP32[$3>>2]|0;
 $ptr = $4;
 $5 = $self;
 __ZN5alloc2rc8RcBoxPtr10dec_strong17hfb79bd5166a8e85cE($5);
 $6 = $self;
 $7 = (__ZN5alloc2rc8RcBoxPtr6strong17h27cada370461cbb2E($6)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $ptr;
 $10 = ((($9)) + 8|0);
 __ZN4drop17h693b14c1ce6de27fE($10);
 $11 = $self;
 __ZN5alloc2rc8RcBoxPtr8dec_weak17h9e18935d47d42564E($11);
 $12 = $self;
 $13 = (__ZN5alloc2rc8RcBoxPtr4weak17hd4dbb0c9789616bcE($12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $ptr;
 $16 = $ptr;
 $17 = (__ZN4core3mem11size_of_val17h8523fe3ab19fd256E($16)|0);
 $18 = $ptr;
 $19 = (__ZN4core3mem12align_of_val17h37af3e5570b87da4E($18)|0);
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E($15,$17,$19);
 STACKTOP = sp;return;
}
function __ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17hf7aa56bc41f16c53E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg1 = sp + 8|0;
 $slice = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$slice>>2]|0;
 $10 = ((($slice)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h40f049985213b358E($9,$11)|0);
 $13 = $self;
 $14 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h3666bfeb514b5534E($12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN5alloc2rc8RcBoxPtr10dec_strong17hfb79bd5166a8e85cE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h26bd916e4f84eb12E($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $self;
 $10 = (__ZN5alloc2rc8RcBoxPtr6strong17h27cada370461cbb2E($9)|0);
 $11 = (($10) - 1)|0;
 __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17h5e039cab79421a09E($8,$11);
 STACKTOP = sp;return;
}
function __ZN5alloc2rc8RcBoxPtr10dec_strong17hfe12e4f1e27e6aafE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $self;
 $10 = (__ZN5alloc2rc8RcBoxPtr6strong17hb0fc32cc2c2eeee7E($9)|0);
 $11 = (($10) - 1)|0;
 __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17h5e039cab79421a09E($8,$11);
 STACKTOP = sp;return;
}
function __ZN5alloc2rc8RcBoxPtr4weak17h09b87e21d46b95efE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = (__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17h291309cf02aab594E($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN5alloc2rc8RcBoxPtr4weak17hd4dbb0c9789616bcE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h26bd916e4f84eb12E($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = (__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17h291309cf02aab594E($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN5alloc2rc8RcBoxPtr6strong17h27cada370461cbb2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h26bd916e4f84eb12E($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17h291309cf02aab594E($8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN5alloc2rc8RcBoxPtr6strong17hb0fc32cc2c2eeee7E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17h291309cf02aab594E($8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN5alloc2rc8RcBoxPtr8dec_weak17h1364e1391b8e6eeeE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = $self;
 $11 = (__ZN5alloc2rc8RcBoxPtr4weak17h09b87e21d46b95efE($10)|0);
 $12 = (($11) - 1)|0;
 __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17h5e039cab79421a09E($9,$12);
 STACKTOP = sp;return;
}
function __ZN5alloc2rc8RcBoxPtr8dec_weak17h9e18935d47d42564E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h26bd916e4f84eb12E($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = $self;
 $11 = (__ZN5alloc2rc8RcBoxPtr4weak17hd4dbb0c9789616bcE($10)|0);
 $12 = (($11) - 1)|0;
 __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17h5e039cab79421a09E($9,$12);
 STACKTOP = sp;return;
}
function __ZN5alloc4heap10deallocate17h2ed96d866771a555E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $align = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $old_size = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $old_size = $4;
 $5 = $arg2;
 $align = $5;
 $6 = $ptr;
 $7 = $old_size;
 $8 = $align;
 ___rust_deallocate($6,$7,$8);
 STACKTOP = sp;return;
}
function __ZN5alloc4heap10reallocate17he28f7928a028933bE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $align$i = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg1$i = 0, $arg2 = 0;
 var $arg3 = 0, $old_size = 0, $ptr = 0, $size = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $arg3 = $3;
 $4 = $arg0;
 $ptr = $4;
 $5 = $arg1;
 $old_size = $5;
 $6 = $arg2;
 $size = $6;
 $7 = $arg3;
 $align = $7;
 $8 = $size;
 $9 = $align;
 $arg0$i = $8;
 $arg1$i = $9;
 $10 = $arg0$i;
 $size$i = $10;
 $11 = $arg1$i;
 $align$i = $11;
 $12 = $ptr;
 $13 = $old_size;
 $14 = $size;
 $15 = $align;
 $16 = (___rust_reallocate($12,$13,$14,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function __ZN5alloc4heap13exchange_free17h5720505cfcfb7278E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $align = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $old_size = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $old_size = $4;
 $5 = $arg2;
 $align = $5;
 $6 = $ptr;
 $7 = $old_size;
 $8 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E($6,$7,$8);
 STACKTOP = sp;return;
}
function __ZN5alloc4heap15exchange_malloc17h8890b6b3bb39aab2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $align = 0, $arg0 = 0, $arg1 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $size = $2;
 $3 = $arg1;
 $align = $3;
 $4 = $size;
 $5 = ($4|0)==(0);
 if ($5) {
  $_0 = (1);
  $12 = $_0;
  STACKTOP = sp;return ($12|0);
 }
 $6 = $size;
 $7 = $align;
 $8 = (__ZN5alloc4heap8allocate17h358fb0ac596fce84E($6,$7)|0);
 $ptr = $8;
 $9 = $ptr;
 $10 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE($9)|0);
 if ($10) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 $11 = $ptr;
 $_0 = $11;
 $12 = $_0;
 STACKTOP = sp;return ($12|0);
}
function __ZN5alloc4heap8allocate17h358fb0ac596fce84E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $align$i = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg1$i = 0, $size = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $size = $2;
 $3 = $arg1;
 $align = $3;
 $4 = $size;
 $5 = $align;
 $arg0$i = $4;
 $arg1$i = $5;
 $6 = $arg0$i;
 $size$i = $6;
 $7 = $arg1$i;
 $align$i = $7;
 $8 = $size;
 $9 = $align;
 $10 = (___rust_allocate($8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN5alloc4heap8box_free17h4090f1c233e137c0E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $align = 0, $arg0 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $size = 40;
 $align = 4;
 $2 = $size;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $ptr;
 $5 = $size;
 $6 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E($4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN5alloc7raw_vec11alloc_guard17h6eacc493ea6b88dbE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $alloc_size = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $alloc_size = $1;
 $2 = (__ZN4core3mem7size_of17hf53622acb0d5c06dE()|0);
 $3 = ($2>>>0)<(8);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $alloc_size;
 $5 = ($4>>>0)<=(2147483647);
 $6 = $5 ^ 1;
 if ($6) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN60__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Drop_GT_4drop17h2bba541bafbc67a6E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h84d763b59a1692f0E($3,$5,0)|0);
 HEAP8[$6>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h26bd916e4f84eb12E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd965194dc81eb876E($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h5c27451fcfdce673E($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h27a654e33c937434E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hf993be83807f3270E($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h381c4460d502091dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h4d449cf481180e02E($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h9851ebce34f52a0cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2644aa664caa626bE($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hbd38f9fc458f30d0E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc27d5060612007fdE($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd09980720cd59956E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc2c1b29b8009c8a6E($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN64__LT_collections__string__String_u20_as_u20_core__fmt__Debug_GT_3fmt17h88b1e273864938bbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $_0 = sp + 8|0;
 $abi_cast = sp + 28|0;
 $arg0 = $0;
 $arg1 = $1;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $self;
 __ZN64__LT_collections__string__String_u20_as_u20_core__ops__Deref_GT_5deref17hfe37c7570418f8e6E($2,$5);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $6 = $f;
 $7 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h51cb268862c67feeE($$sreg$field,$$sreg$field2,$6)|0);
 HEAP8[$abi_cast>>0] = $7;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $8 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZN64__LT_collections__string__String_u20_as_u20_core__ops__Deref_GT_5deref17hfe37c7570418f8e6E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0;
 var $lvalue_temp$i = 0, $retVal$index4 = 0, $self = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp;
 $arg0$i = sp + 24|0;
 $v$i = sp + 16|0;
 $lvalue_temp$i = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hb14ecd9176fdd81aE($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$arg0$i>>2] = $$sreg$field;
 $4 = ((($arg0$i)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 $5 = HEAP32[$arg0$i>>2]|0;
 $6 = ((($arg0$i)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$v$i>>2] = $5;
 $8 = ((($v$i)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$v$i>>2]|0;
 $10 = ((($v$i)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$lvalue_temp$i>>2] = $9;
 $12 = ((($lvalue_temp$i)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$lvalue_temp$i>>2]|0;
 $14 = ((($lvalue_temp$i)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$retVal>>2] = $13;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h02e82e970be211cdE($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $drop = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $drop = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h0c3befd6c0903ed0E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$drop>>2] = $$sreg$field;
 $4 = ((($drop)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h2e4caa7870aa83f2E($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $drop = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $drop = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h130b5405457e69f3E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$drop>>2] = $$sreg$field;
 $4 = ((($drop)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 __ZN4drop17he03e6c24809778eaE($drop);
 STACKTOP = sp;return;
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h402c6ed143bb9518E($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $drop = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $drop = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h49da44de11c191c5E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$drop>>2] = $$sreg$field;
 $4 = ((($drop)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 __ZN4drop17h1ca46873bf54f038E($drop);
 STACKTOP = sp;return;
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17hc38d5b175e1c5bfaE($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $drop = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $drop = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17hcae9dfe056bea613E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$drop>>2] = $$sreg$field;
 $4 = ((($drop)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 __ZN4drop17h0d843978a8ab0695E($drop);
 STACKTOP = sp;return;
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17he9c3cb9d06350164E($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $drop = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $drop = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h92f38ca2ed6bbc6bE($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$drop>>2] = $$sreg$field;
 $4 = ((($drop)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 __ZN4drop17h780c91cf5ee5c5e9E($drop);
 STACKTOP = sp;return;
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h0e26fdf6fdd614d7E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h6b2a5e5b6654bff6E()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17h47c7e034cc1677e4E()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h27a654e33c937434E($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h1fecc8b91300da9eE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17headfa8af309595d8E()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17h27591068d88f93b8E()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h381c4460d502091dE($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h32cd9b80ae08eae3E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h01334bab523b4211E()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17ha27b5d1180f16c91E()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hbd38f9fc458f30d0E($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h427bc0b366c3f968E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17hd154145e87414f75E()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17he32ca0008511ab29E()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd09980720cd59956E($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h8d254c1a1463c9c8E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17hf25428224e4aa658E()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17hebc60f0adf02a83fE()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h9851ebce34f52a0cE($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hb14ecd9176fdd81aE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $p = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h80ac1ad82cccc24eE($3)|0);
 $p = $4;
 $5 = $p;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE($5)|0);
 $6 = $p;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice14from_raw_parts17h0f2b4aaac10b99d1E($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2644aa664caa626bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h4d449cf481180e02E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h5c27451fcfdce673E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc27d5060612007fdE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc2c1b29b8009c8a6E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd965194dc81eb876E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hf993be83807f3270E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h46d68558d235d73bE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hf85ec2338e76a049E($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h107a40b19806ce4dE($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17hcd2ecb3f4ee72723E($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h87e2ccedc14ca01bE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h80ac1ad82cccc24eE($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17h101fab0c1c9324ddE($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h8c8f16780fd7853fE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h0e1aeebaaf4243cdE($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h72516150e42e5932E($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17hfbb1ade5a821b90eE($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hbb28d721bf2c09f8E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h9e50d461979fcd78E($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h2a6bbe28f7c4c9eeE($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17h03b09f3afc0dd1deE($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hf3883631d51e57dfE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h08da60f1da26d7caE($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hf503e2c3673e25ffE($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17hfcfd7bde64e0033fE($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN74__LT_core__cell__BorrowRefMut_LT__u27_b_GT__u20_as_u20_core__ops__Drop_GT_4drop17h4bf4109576084891E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $borrow = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17h291309cf02aab594E($3)|0);
 $borrow = $4;
 $5 = $self;
 $6 = HEAP32[$5>>2]|0;
 __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17h5e039cab79421a09E($6,0);
 STACKTOP = sp;return;
}
function __ZN81__LT_core__cell__RefMut_LT__u27_b_C__u20_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h9b5c2735abbbf9baE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h0c3befd6c0903ed0E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h87e2ccedc14ca01bE($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h130b5405457e69f3E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hbb28d721bf2c09f8E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h49da44de11c191c5E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h46d68558d235d73bE($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h92f38ca2ed6bbc6bE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hf3883631d51e57dfE($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17hcae9dfe056bea613E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h8c8f16780fd7853fE($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN5hello4main17hc543b082b7dd43fcE() {
 var $$field = 0, $$field11 = 0, $$field15$field = 0, $$field2 = 0, $$field8 = 0, $$index1 = 0, $$sreg$field = 0, $$sreg$field5 = 0, $$sreg$index4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_104 = 0, $_105 = 0, $_106 = 0;
 var $_107 = 0, $_108 = 0, $_109 = 0, $_11 = 0, $_16 = 0, $_2 = 0, $_29 = 0, $_32 = 0, $_33 = 0, $_34 = 0, $_35 = 0, $_36 = 0, $_39 = 0, $_40 = 0, $_41 = 0, $_51 = 0, $_63 = 0, $_64 = 0, $_66 = 0, $_71 = 0;
 var $_72 = 0, $_74 = 0, $_85 = 0, $_90 = 0, $_91 = 0, $_93 = 0, $__arg0 = 0, $__arg01 = 0, $abi_cast = 0, $abi_cast11 = 0, $abi_cast12 = 0, $arg = 0, $body = 0, $bodyref = 0, $bodyref2 = 0, $button = 0, $document = 0, $hr = 0, $html_button = 0, $personalityslot = 0;
 var $personalityslot$index17 = 0, $personalityslot$index19 = 0, $personalityslot$index21 = 0, $personalityslot$index23 = 0, $personalityslot$index25 = 0, $personalityslot$index27 = 0, $personalityslot$index29 = 0, $personalityslot$index31 = 0, $personalityslot$index33 = 0, $personalityslot$index35 = 0, $personalityslot$index37 = 0, $personalityslot$index39 = 0, $tmp_ret = 0, $tmp_ret14 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $0 = sp;
 $_2 = sp + 424|0;
 $document = sp + 416|0;
 $body = sp + 408|0;
 $_11 = sp + 392|0;
 $hr = sp + 384|0;
 $_16 = sp + 368|0;
 $html_button = sp + 352|0;
 $_29 = sp + 336|0;
 $_33 = sp + 296|0;
 $_34 = sp + 280|0;
 $_35 = sp + 264|0;
 $_36 = sp + 248|0;
 $_40 = sp + 208|0;
 $_41 = sp + 192|0;
 $button = sp + 184|0;
 $_51 = sp + 168|0;
 $bodyref = sp + 160|0;
 $bodyref2 = sp + 152|0;
 $_63 = sp + 144|0;
 $_64 = sp + 136|0;
 $_66 = sp + 112|0;
 $_71 = sp + 104|0;
 $_72 = sp + 96|0;
 $_74 = sp + 80|0;
 $_85 = sp + 56|0;
 $_90 = sp + 48|0;
 $_91 = sp + 40|0;
 $_93 = sp + 464|0;
 $personalityslot = sp + 32|0;
 $abi_cast = sp + 456|0;
 $abi_cast11 = sp + 452|0;
 $abi_cast12 = sp + 448|0;
 $arg = sp + 24|0;
 $tmp_ret = sp + 16|0;
 $tmp_ret14 = sp + 8|0;
 $_109 = 0;
 $_106 = 0;
 $_104 = 0;
 $_108 = 0;
 $_107 = 0;
 $_105 = 0;
 $1 = HEAP32[556]|0;
 $2 = HEAP32[(2228)>>2]|0;
 __ZN4core3fmt9Arguments6new_v117h22aa263f6d4613b4E($_2,$1,$2,16064,0);
 __ZN3std2io5stdio6_print17hd5142059f0ff0076E($_2);
 __THREW__ = 0;
 $3 = (invoke_i(117)|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   label = 52;
  } else {
   HEAP32[$abi_cast>>2] = $3;
   ;HEAP32[$document>>2]=HEAP32[$abi_cast>>2]|0;
   $_104 = 1;
   __THREW__ = 0;
   invoke_viiii(118,($_11|0),($document|0),(6312|0),4);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     label = 53;
    } else {
     __THREW__ = 0;
     invoke_vii(119,($body|0),($_11|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if ($9) {
      label = 53;
     } else {
      $_105 = 1;
      __THREW__ = 0;
      invoke_viiii(120,($_16|0),($document|0),(6316|0),2);
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      L6: do {
       if ($11) {
        label = 54;
       } else {
        __THREW__ = 0;
        invoke_vii(119,($hr|0),($_16|0));
        $14 = __THREW__; __THREW__ = 0;
        $15 = $14&1;
        if ($15) {
         label = 54;
        } else {
         $_106 = 1;
         __THREW__ = 0;
         invoke_vii(121,($body|0),($hr|0));
         $16 = __THREW__; __THREW__ = 0;
         $17 = $16&1;
         if ($17) {
          label = 54;
         } else {
          __THREW__ = 0;
          invoke_viii(122,($body|0),(6318|0),24);
          $18 = __THREW__; __THREW__ = 0;
          $19 = $18&1;
          if ($19) {
           label = 54;
          } else {
           $20 = (__ZN5alloc4heap15exchange_malloc17h8890b6b3bb39aab2E(40,4)|0);
           $_32 = $20;
           $_108 = 1;
           HEAP32[$_34>>2] = 0;
           $21 = (__ZN5alloc4heap15exchange_malloc17h8890b6b3bb39aab2E(40,4)|0);
           $_39 = $21;
           __THREW__ = 0;
           invoke_viii(123,($_41|0),(6342|0),11);
           $22 = __THREW__; __THREW__ = 0;
           $23 = $22&1;
           L11: do {
            if ($23) {
             $124 = ___cxa_find_matching_catch_2()|0;
             $125 = tempRet0;
             HEAP32[$personalityslot>>2] = $124;
             $personalityslot$index23 = ((($personalityslot)) + 4|0);
             HEAP32[$personalityslot$index23>>2] = $125;
             $126 = $_39;
             __ZN5alloc4heap8box_free17h4090f1c233e137c0E($126);
             $127 = $_32;
             __ZN5alloc4heap8box_free17h4090f1c233e137c0E($127);
             label = 12;
            } else {
             __THREW__ = 0;
             invoke_vii(124,($_40|0),($_41|0));
             $28 = __THREW__; __THREW__ = 0;
             $29 = $28&1;
             if ($29) {
              $128 = ___cxa_find_matching_catch_2()|0;
              $129 = tempRet0;
              HEAP32[$personalityslot>>2] = $128;
              $personalityslot$index25 = ((($personalityslot)) + 4|0);
              HEAP32[$personalityslot$index25>>2] = $129;
              $130 = $_39;
              __ZN5alloc4heap8box_free17h4090f1c233e137c0E($130);
              $131 = $_32;
              __ZN5alloc4heap8box_free17h4090f1c233e137c0E($131);
              label = 12;
              break;
             }
             $30 = $_39;
             dest=$30; src=$_40; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
             $31 = $_39;
             __THREW__ = 0;
             invoke_viii(125,($_36|0),($31|0),1);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if ($33) {
              $132 = ___cxa_find_matching_catch_2()|0;
              $133 = tempRet0;
              HEAP32[$personalityslot>>2] = $132;
              $personalityslot$index27 = ((($personalityslot)) + 4|0);
              HEAP32[$personalityslot$index27>>2] = $133;
              $134 = $_32;
              __ZN5alloc4heap8box_free17h4090f1c233e137c0E($134);
              label = 12;
              break;
             }
             ;HEAP32[$_35>>2]=HEAP32[$_36>>2]|0;HEAP32[$_35+4>>2]=HEAP32[$_36+4>>2]|0;HEAP32[$_35+8>>2]=HEAP32[$_36+8>>2]|0;
             $_108 = 0;
             __THREW__ = 0;
             invoke_viiiii(126,($_33|0),(6353|0),6,($_34|0),($_35|0));
             $34 = __THREW__; __THREW__ = 0;
             $35 = $34&1;
             if ($35) {
              $135 = ___cxa_find_matching_catch_2()|0;
              $136 = tempRet0;
              HEAP32[$personalityslot>>2] = $135;
              $personalityslot$index29 = ((($personalityslot)) + 4|0);
              HEAP32[$personalityslot$index29>>2] = $136;
              $137 = $_32;
              __ZN5alloc4heap8box_free17h4090f1c233e137c0E($137);
              label = 12;
              break;
             }
             $36 = $_32;
             dest=$36; src=$_33; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
             $37 = $_32;
             __THREW__ = 0;
             invoke_viii(125,($_29|0),($37|0),1);
             $38 = __THREW__; __THREW__ = 0;
             $39 = $38&1;
             if (!($39)) {
              __THREW__ = 0;
              invoke_vii(127,($html_button|0),($_29|0));
              $40 = __THREW__; __THREW__ = 0;
              $41 = $40&1;
              if (!($41)) {
               $_107 = 1;
               __THREW__ = 0;
               invoke_vii(128,($0|0),($html_button|0));
               $$sreg$field = HEAP32[$0>>2]|0;
               $$sreg$index4 = ((($0)) + 4|0);
               $$sreg$field5 = HEAP32[$$sreg$index4>>2]|0;
               $42 = __THREW__; __THREW__ = 0;
               $43 = $42&1;
               L26: do {
                if (!($43)) {
                 __THREW__ = 0;
                 invoke_viii(129,($body|0),($$sreg$field|0),($$sreg$field5|0));
                 $44 = __THREW__; __THREW__ = 0;
                 $45 = $44&1;
                 if ($45) {
                  break;
                 }
                 __THREW__ = 0;
                 invoke_viiii(118,($_51|0),($document|0),(6353|0),6);
                 $46 = __THREW__; __THREW__ = 0;
                 $47 = $46&1;
                 L29: do {
                  if ($47) {
                   label = 61;
                  } else {
                   __THREW__ = 0;
                   invoke_vii(119,($button|0),($_51|0));
                   $48 = __THREW__; __THREW__ = 0;
                   $49 = $48&1;
                   if ($49) {
                    label = 61;
                    break;
                   }
                   $_109 = 1;
                   __THREW__ = 0;
                   $50 = (invoke_ii(130,($body|0))|0);
                   $51 = __THREW__; __THREW__ = 0;
                   $52 = $51&1;
                   if ($52) {
                    label = 61;
                    break;
                   }
                   HEAP32[$abi_cast11>>2] = $50;
                   ;HEAP32[$bodyref>>2]=HEAP32[$abi_cast11>>2]|0;
                   __THREW__ = 0;
                   $53 = (invoke_ii(130,($body|0))|0);
                   $54 = __THREW__; __THREW__ = 0;
                   $55 = $54&1;
                   if ($55) {
                    label = 61;
                    break;
                   }
                   HEAP32[$abi_cast12>>2] = $53;
                   ;HEAP32[$bodyref2>>2]=HEAP32[$abi_cast12>>2]|0;
                   $$field8 = HEAP32[$bodyref2>>2]|0;
                   HEAP32[$_64>>2] = $$field8;
                   $$field11 = HEAP32[$_64>>2]|0;
                   HEAP32[$_63>>2] = $$field11;
                   $$field15$field = HEAP32[$_63>>2]|0;
                   HEAP32[$arg>>2] = $$field15$field;
                   $56 = HEAP32[$arg>>2]|0;
                   __THREW__ = 0;
                   invoke_viiii(131,($button|0),(6359|0),5,($56|0));
                   $57 = __THREW__; __THREW__ = 0;
                   $58 = $57&1;
                   if ($58) {
                    label = 61;
                    break;
                   }
                   $59 = HEAP32[560]|0;
                   $60 = HEAP32[(2244)>>2]|0;
                   __THREW__ = 0;
                   $61 = (invoke_ii(132,($bodyref|0))|0);
                   $62 = __THREW__; __THREW__ = 0;
                   $63 = $62&1;
                   if ($63) {
                    label = 61;
                    break;
                   }
                   __THREW__ = 0;
                   invoke_viiii(133,($_74|0),($61|0),(6364|0),7);
                   $64 = __THREW__; __THREW__ = 0;
                   $65 = $64&1;
                   if ($65) {
                    label = 61;
                    break;
                   }
                   HEAP32[$_72>>2] = $_74;
                   $66 = HEAP32[$_72>>2]|0;
                   $__arg0 = $66;
                   $67 = $__arg0;
                   __THREW__ = 0;
                   invoke_viii(134,($tmp_ret|0),($67|0),(135|0));
                   $68 = __THREW__; __THREW__ = 0;
                   $69 = $68&1;
                   do {
                    if (!($69)) {
                     $70 = ((($tmp_ret)) + 4|0);
                     $71 = HEAP32[$tmp_ret>>2]|0;
                     $72 = HEAP32[$70>>2]|0;
                     HEAP32[$_71>>2] = $71;
                     $73 = ((($_71)) + 4|0);
                     HEAP32[$73>>2] = $72;
                     __THREW__ = 0;
                     invoke_viiiii(99,($_66|0),($59|0),($60|0),($_71|0),1);
                     $74 = __THREW__; __THREW__ = 0;
                     $75 = $74&1;
                     if ($75) {
                      break;
                     }
                     __THREW__ = 0;
                     invoke_vi(136,($_66|0));
                     $76 = __THREW__; __THREW__ = 0;
                     $77 = $76&1;
                     if ($77) {
                      break;
                     }
                     __THREW__ = 0;
                     invoke_vi(137,($_74|0));
                     $78 = __THREW__; __THREW__ = 0;
                     $79 = $78&1;
                     if ($79) {
                      label = 61;
                      break L29;
                     }
                     $80 = HEAP32[562]|0;
                     $81 = HEAP32[(2252)>>2]|0;
                     __THREW__ = 0;
                     $82 = (invoke_ii(132,($bodyref|0))|0);
                     $83 = __THREW__; __THREW__ = 0;
                     $84 = $83&1;
                     if ($84) {
                      label = 61;
                      break L29;
                     }
                     __THREW__ = 0;
                     $85 = (invoke_iiii(138,($82|0),(6371|0),11)|0);
                     $86 = __THREW__; __THREW__ = 0;
                     $87 = $86&1;
                     if ($87) {
                      label = 61;
                      break L29;
                     }
                     HEAP32[$_93>>2] = $85;
                     HEAP32[$_91>>2] = $_93;
                     $88 = HEAP32[$_91>>2]|0;
                     $__arg01 = $88;
                     $89 = $__arg01;
                     __THREW__ = 0;
                     invoke_viii(139,($tmp_ret14|0),($89|0),(140|0));
                     $90 = __THREW__; __THREW__ = 0;
                     $91 = $90&1;
                     if ($91) {
                      label = 61;
                      break L29;
                     }
                     $92 = ((($tmp_ret14)) + 4|0);
                     $93 = HEAP32[$tmp_ret14>>2]|0;
                     $94 = HEAP32[$92>>2]|0;
                     HEAP32[$_90>>2] = $93;
                     $95 = ((($_90)) + 4|0);
                     HEAP32[$95>>2] = $94;
                     __THREW__ = 0;
                     invoke_viiiii(99,($_85|0),($80|0),($81|0),($_90|0),1);
                     $96 = __THREW__; __THREW__ = 0;
                     $97 = $96&1;
                     if ($97) {
                      label = 61;
                      break L29;
                     }
                     __THREW__ = 0;
                     invoke_vi(136,($_85|0));
                     $98 = __THREW__; __THREW__ = 0;
                     $99 = $98&1;
                     if ($99) {
                      label = 61;
                      break L29;
                     }
                     __THREW__ = 0;
                     invoke_v(141);
                     $100 = __THREW__; __THREW__ = 0;
                     $101 = $100&1;
                     if ($101) {
                      label = 61;
                      break L29;
                     }
                     $_109 = 0;
                     __THREW__ = 0;
                     invoke_vi(142,($button|0));
                     $102 = __THREW__; __THREW__ = 0;
                     $103 = $102&1;
                     if ($103) {
                      break L26;
                     }
                     $_107 = 0;
                     __THREW__ = 0;
                     invoke_vi(137,($html_button|0));
                     $104 = __THREW__; __THREW__ = 0;
                     $105 = $104&1;
                     if ($105) {
                      label = 54;
                      break L6;
                     }
                     $_106 = 0;
                     __THREW__ = 0;
                     invoke_vi(142,($hr|0));
                     $106 = __THREW__; __THREW__ = 0;
                     $107 = $106&1;
                     if ($107) {
                      label = 53;
                      break L3;
                     }
                     $_105 = 0;
                     __THREW__ = 0;
                     invoke_vi(142,($body|0));
                     $108 = __THREW__; __THREW__ = 0;
                     $109 = $108&1;
                     if ($109) {
                      label = 52;
                      break L1;
                     }
                     $_104 = 0;
                     __THREW__ = 0;
                     invoke_vi(143,($document|0));
                     $110 = __THREW__; __THREW__ = 0;
                     $111 = $110&1;
                     if (!($111)) {
                      STACKTOP = sp;return;
                     }
                     $146 = ___cxa_find_matching_catch_2()|0;
                     $147 = tempRet0;
                     HEAP32[$personalityslot>>2] = $146;
                     $personalityslot$index39 = ((($personalityslot)) + 4|0);
                     HEAP32[$personalityslot$index39>>2] = $147;
                     $$field = HEAP32[$personalityslot>>2]|0;
                     $$index1 = ((($personalityslot)) + 4|0);
                     $$field2 = HEAP32[$$index1>>2]|0;
                     ___resumeException($$field|0);
                     // unreachable;
                    }
                   } while(0);
                   $144 = ___cxa_find_matching_catch_2()|0;
                   $145 = tempRet0;
                   HEAP32[$personalityslot>>2] = $144;
                   $personalityslot$index37 = ((($personalityslot)) + 4|0);
                   HEAP32[$personalityslot$index37>>2] = $145;
                   __ZN4drop17h534ba5ae66184666E($_74);
                  }
                 } while(0);
                 if ((label|0) == 61) {
                  $142 = ___cxa_find_matching_catch_2()|0;
                  $143 = tempRet0;
                  HEAP32[$personalityslot>>2] = $142;
                  $personalityslot$index35 = ((($personalityslot)) + 4|0);
                  HEAP32[$personalityslot$index35>>2] = $143;
                 }
                 $116 = $_109;
                 $117 = $116&1;
                 if (!($117)) {
                  break L11;
                 }
                 $_109 = 0;
                 __ZN4drop17h0defdbdca0c80acfE($button);
                 break L11;
                }
               } while(0);
               $140 = ___cxa_find_matching_catch_2()|0;
               $141 = tempRet0;
               HEAP32[$personalityslot>>2] = $140;
               $personalityslot$index33 = ((($personalityslot)) + 4|0);
               HEAP32[$personalityslot$index33>>2] = $141;
               break;
              }
             }
             $138 = ___cxa_find_matching_catch_2()|0;
             $139 = tempRet0;
             HEAP32[$personalityslot>>2] = $138;
             $personalityslot$index31 = ((($personalityslot)) + 4|0);
             HEAP32[$personalityslot$index31>>2] = $139;
             label = 12;
            }
           } while(0);
           if ((label|0) == 12) {
            $26 = $_108;
            $27 = $26&1;
            if ($27) {
             $_108 = 0;
             __ZN4drop17h8091b7b01ea60ac0E($_34);
            }
           }
           $24 = $_107;
           $25 = $24&1;
           if ($25) {
            $_107 = 0;
            __ZN4drop17h534ba5ae66184666E($html_button);
           }
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 54) {
       $122 = ___cxa_find_matching_catch_2()|0;
       $123 = tempRet0;
       HEAP32[$personalityslot>>2] = $122;
       $personalityslot$index21 = ((($personalityslot)) + 4|0);
       HEAP32[$personalityslot$index21>>2] = $123;
      }
      $12 = $_106;
      $13 = $12&1;
      if ($13) {
       $_106 = 0;
       __ZN4drop17h0defdbdca0c80acfE($hr);
      }
     }
    }
   } while(0);
   if ((label|0) == 53) {
    $120 = ___cxa_find_matching_catch_2()|0;
    $121 = tempRet0;
    HEAP32[$personalityslot>>2] = $120;
    $personalityslot$index19 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index19>>2] = $121;
   }
   $114 = $_105;
   $115 = $114&1;
   if ($115) {
    $_105 = 0;
    __ZN4drop17h0defdbdca0c80acfE($body);
   }
  }
 } while(0);
 if ((label|0) == 52) {
  $118 = ___cxa_find_matching_catch_2()|0;
  $119 = tempRet0;
  HEAP32[$personalityslot>>2] = $118;
  $personalityslot$index17 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index17>>2] = $119;
 }
 $112 = $_104;
 $113 = $112&1;
 if (!($113)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_104 = 0;
 __ZN4drop17h921e5ca9ee3c1fefE($document);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN5hello4main28__u7b__u7b_closure_u7d__u7d_17hbad6f84482c78212E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0;
 var $_17 = 0, $_18 = 0, $_20 = 0, $__arg0 = 0, $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $personalityslot$index8 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $arg1 = sp + 72|0;
 $_12 = sp + 48|0;
 $_17 = sp + 40|0;
 $_18 = sp + 32|0;
 $_20 = sp + 16|0;
 $personalityslot = sp + 8|0;
 $tmp_ret = sp;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;
 $2 = $arg0;
 __THREW__ = 0;
 $3 = (invoke_ii(132,($2|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   label = 13;
  } else {
   __THREW__ = 0;
   invoke_viiiii(144,($3|0),(6364|0),7,(6382|0),4);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    label = 13;
   } else {
    $8 = HEAP32[558]|0;
    $9 = HEAP32[(2236)>>2]|0;
    $10 = $arg0;
    __THREW__ = 0;
    $11 = (invoke_ii(132,($10|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 13;
    } else {
     __THREW__ = 0;
     invoke_viiii(133,($_20|0),($11|0),(6364|0),7);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if ($15) {
      label = 13;
     } else {
      HEAP32[$_18>>2] = $_20;
      $16 = HEAP32[$_18>>2]|0;
      $__arg0 = $16;
      $17 = $__arg0;
      __THREW__ = 0;
      invoke_viii(134,($tmp_ret|0),($17|0),(135|0));
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       $20 = ((($tmp_ret)) + 4|0);
       $21 = HEAP32[$tmp_ret>>2]|0;
       $22 = HEAP32[$20>>2]|0;
       HEAP32[$_17>>2] = $21;
       $23 = ((($_17)) + 4|0);
       HEAP32[$23>>2] = $22;
       __THREW__ = 0;
       invoke_viiiii(99,($_12|0),($8|0),($9|0),($_17|0),1);
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if (!($25)) {
        __THREW__ = 0;
        invoke_vi(136,($_12|0));
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if (!($27)) {
         __THREW__ = 0;
         invoke_vi(137,($_20|0));
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          label = 13;
          break;
         }
         __THREW__ = 0;
         invoke_vi(145,($arg1|0));
         $30 = __THREW__; __THREW__ = 0;
         $31 = $30&1;
         if (!($31)) {
          STACKTOP = sp;return;
         }
         $36 = ___cxa_find_matching_catch_2()|0;
         $37 = tempRet0;
         HEAP32[$personalityslot>>2] = $36;
         $personalityslot$index8 = ((($personalityslot)) + 4|0);
         HEAP32[$personalityslot$index8>>2] = $37;
         $$field = HEAP32[$personalityslot>>2]|0;
         $$index1 = ((($personalityslot)) + 4|0);
         $$field2 = HEAP32[$$index1>>2]|0;
         ___resumeException($$field|0);
         // unreachable;
        }
       }
      }
      $34 = ___cxa_find_matching_catch_2()|0;
      $35 = tempRet0;
      HEAP32[$personalityslot>>2] = $34;
      $personalityslot$index6 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index6>>2] = $35;
      __ZN4drop17h534ba5ae66184666E($_20);
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  HEAP32[$personalityslot>>2] = $32;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $33;
 }
 __ZN4drop17h7681d5741b632c42E($arg1);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core3ops6FnOnce9call_once17hfa8c211b90e17b32E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $abi_cast = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 $abi_cast = sp + 4|0;
 HEAP32[$abi_cast>>2] = $0;
 ;HEAP32[$self>>2]=HEAP32[$abi_cast>>2]|0;
 __ZN5hello4main28__u7b__u7b_closure_u7d__u7d_17hbad6f84482c78212E($self,$1);
 STACKTOP = sp;return;
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[6468]|0;
 $3 = (__ZN3std2rt10lang_start17ha32211a867006146E(146,$0,$1)|0);
 return ($3|0);
}
function __ZN9simpledom9simpledom7Element3new17h14ac9f3f9565561bE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_7 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $attrs = 0, $content = 0, $name = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $arg0 = sp + 136|0;
 $arg1 = sp + 120|0;
 $arg2 = sp + 96|0;
 $name = sp + 88|0;
 $attrs = sp + 72|0;
 $content = sp + 48|0;
 $_7 = sp + 40|0;
 $_9 = sp + 24|0;
 $_10 = sp;
 HEAP32[$arg0>>2] = $1;
 $5 = ((($arg0)) + 4|0);
 HEAP32[$5>>2] = $2;
 ;HEAP32[$arg1>>2]=HEAP32[$3>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$3+8>>2]|0;
 ;HEAP32[$arg2>>2]=HEAP32[$4>>2]|0;HEAP32[$arg2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$arg2+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$arg2+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$arg2+16>>2]=HEAP32[$4+16>>2]|0;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$name>>2] = $6;
 $9 = ((($name)) + 4|0);
 HEAP32[$9>>2] = $8;
 ;HEAP32[$attrs>>2]=HEAP32[$arg1>>2]|0;HEAP32[$attrs+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$attrs+8>>2]=HEAP32[$arg1+8>>2]|0;
 ;HEAP32[$content>>2]=HEAP32[$arg2>>2]|0;HEAP32[$content+4>>2]=HEAP32[$arg2+4>>2]|0;HEAP32[$content+8>>2]=HEAP32[$arg2+8>>2]|0;HEAP32[$content+12>>2]=HEAP32[$arg2+12>>2]|0;HEAP32[$content+16>>2]=HEAP32[$arg2+16>>2]|0;
 $10 = HEAP32[$name>>2]|0;
 $11 = ((($name)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$_7>>2] = $10;
 $13 = ((($_7)) + 4|0);
 HEAP32[$13>>2] = $12;
 ;HEAP32[$_9>>2]=HEAP32[$attrs>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$attrs+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$attrs+8>>2]|0;
 ;HEAP32[$_10>>2]=HEAP32[$content>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$content+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$content+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$content+12>>2]|0;HEAP32[$_10+16>>2]=HEAP32[$content+16>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_7+4>>2]|0;
 $14 = ((($0)) + 8|0);
 ;HEAP32[$14>>2]=HEAP32[$_9>>2]|0;HEAP32[$14+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$_9+8>>2]|0;
 $15 = ((($0)) + 20|0);
 ;HEAP32[$15>>2]=HEAP32[$_10>>2]|0;HEAP32[$15+4>>2]=HEAP32[$_10+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$_10+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[$_10+12>>2]|0;HEAP32[$15+16>>2]=HEAP32[$_10+16>>2]|0;
 STACKTOP = sp;return;
}
function __ZN9simpledom9simpledom7Element4text17ha6dcaee61ad92d11E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_3 = 0, $_4 = 0, $_5 = 0, $_6 = 0, $_7 = 0, $arg0 = 0, $content = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $arg0 = sp + 96|0;
 $content = sp + 80|0;
 $_3 = sp + 72|0;
 $_4 = sp + 56|0;
 $_5 = sp + 32|0;
 $_6 = sp + 16|0;
 $_7 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$content>>2]=HEAP32[$arg0>>2]|0;HEAP32[$content+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$content+8>>2]=HEAP32[$arg0+8>>2]|0;
 HEAP32[$_3>>2] = 0;
 HEAP32[$_4>>2] = 0;
 ;HEAP32[$_7>>2]=HEAP32[$content>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$content+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$content+8>>2]|0;
 HEAP32[$_6>>2] = 0;
 $2 = ((($_6)) + 4|0);
 ;HEAP32[$2>>2]=HEAP32[$_7>>2]|0;HEAP32[$2+4>>2]=HEAP32[$_7+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$_7+8>>2]|0;
 HEAP32[$_5>>2] = 1;
 $3 = ((($_5)) + 4|0);
 ;HEAP32[$3>>2]=HEAP32[$_6>>2]|0;HEAP32[$3+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$_6+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$_6+12>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;
 $4 = ((($0)) + 8|0);
 ;HEAP32[$4>>2]=HEAP32[$_4>>2]|0;HEAP32[$4+4>>2]=HEAP32[$_4+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$_4+8>>2]|0;
 $5 = ((($0)) + 20|0);
 ;HEAP32[$5>>2]=HEAP32[$_5>>2]|0;HEAP32[$5+4>>2]=HEAP32[$_5+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$_5+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$_5+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$_5+16>>2]|0;
 STACKTOP = sp;return;
}
function __ZN9simpledom9simpledom16render_to_string17hbcc700c02b455c17E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val44 = 0, $$field = 0, $$field19 = 0, $$field5 = 0, $$field8 = 0, $$index4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_10 = 0, $_17 = 0, $_20 = 0, $_25 = 0, $_26 = 0, $_29 = 0, $_30 = 0, $_33 = 0, $_34 = 0, $_53 = 0, $_56 = 0, $_61 = 0, $_62 = 0, $_64 = 0, $_65 = 0, $_7 = 0;
 var $_72 = 0, $_73 = 0, $_74 = 0, $_75 = 0, $_8 = 0, $__arg0 = 0, $__arg01 = 0, $__arg1 = 0, $__arg2 = 0, $__arg3 = 0, $abi_cast = 0, $abi_cast11 = 0, $arg = 0, $arg0 = 0, $arg12 = 0, $element = 0, $elements = 0, $iter = 0, $name = 0, $personalityslot = 0;
 var $personalityslot$index29 = 0, $personalityslot$index31 = 0, $personalityslot$index33 = 0, $personalityslot$index35 = 0, $personalityslot$index37 = 0, $personalityslot$index39 = 0, $personalityslot$index41 = 0, $personalityslot$index43 = 0, $result = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $switch3 = 0, $tmp_ret = 0, $tmp_ret6 = 0, $tmp_ret7 = 0, $tmp_ret8 = 0, $tmp_ret9 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(544|0);
 $arg0 = sp + 496|0;
 $elements = sp + 480|0;
 $result = sp + 464|0;
 $_7 = sp + 448|0;
 $_8 = sp + 432|0;
 $iter = sp + 416|0;
 $_10 = sp + 368|0;
 $element = sp + 328|0;
 $name = sp + 320|0;
 $_17 = sp + 312|0;
 $_20 = sp + 288|0;
 $_25 = sp + 256|0;
 $_26 = sp + 240|0;
 $_29 = sp + 224|0;
 $_30 = sp + 208|0;
 $_33 = sp + 192|0;
 $_34 = sp + 168|0;
 $_53 = sp + 160|0;
 $_56 = sp + 136|0;
 $_61 = sp + 128|0;
 $_62 = sp + 120|0;
 $_64 = sp + 104|0;
 $_65 = sp + 80|0;
 $_72 = sp + 64|0;
 $personalityslot = sp + 56|0;
 $tmp_ret = sp + 48|0;
 $tmp_ret6 = sp + 40|0;
 $tmp_ret7 = sp + 32|0;
 $tmp_ret8 = sp + 24|0;
 $abi_cast = sp + 529|0;
 $arg = sp + 16|0;
 $tmp_ret9 = sp + 8|0;
 $abi_cast11 = sp + 528|0;
 $arg12 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 $_75 = 0;
 $_74 = 0;
 $_73 = 0;
 $_73 = 1;
 ;HEAP32[$elements>>2]=HEAP32[$arg0>>2]|0;HEAP32[$elements+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$elements+8>>2]=HEAP32[$arg0+8>>2]|0;
 __THREW__ = 0;
 invoke_vi(147,($result|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 45;
  } else {
   $_74 = 1;
   $_73 = 0;
   ;HEAP32[$_8>>2]=HEAP32[$elements>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$elements+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$elements+8>>2]|0;
   __THREW__ = 0;
   invoke_vii(148,($_7|0),($_8|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    label = 45;
   } else {
    ;HEAP32[$iter>>2]=HEAP32[$_7>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$_7+4>>2]|0;HEAP32[$iter+8>>2]=HEAP32[$_7+8>>2]|0;HEAP32[$iter+12>>2]=HEAP32[$_7+12>>2]|0;
    while(1) {
     __THREW__ = 0;
     invoke_vii(149,($_10|0),($iter|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if ($9) {
      label = 46;
      break;
     }
     $_75 = 1;
     $10 = HEAP32[$_10>>2]|0;
     $switch = ($10>>>0)<(1);
     $_75 = 0;
     if ($switch) {
      label = 10;
      break;
     }
     $14 = ((($_10)) + 4|0);
     dest=$element; src=$14; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     $15 = HEAP32[$element>>2]|0;
     $16 = ($15|0)!=(0|0);
     $$expand_i1_val = $16&1;
     $$expand_i1_val44 = 1;
     $switch2 = ($$expand_i1_val&255)<($$expand_i1_val44&255);
     if ($switch2) {
      $17 = HEAP32[586]|0;
      $18 = HEAP32[(2348)>>2]|0;
      $19 = ((($element)) + 20|0);
      __THREW__ = 0;
      invoke_vii(151,($_65|0),($19|0));
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       label = 47;
       break;
      }
      __THREW__ = 0;
      invoke_vii(155,($_64|0),($_65|0));
      $93 = __THREW__; __THREW__ = 0;
      $94 = $93&1;
      if ($94) {
       label = 47;
       break;
      }
      HEAP32[$_62>>2] = $_64;
      $95 = HEAP32[$_62>>2]|0;
      $__arg01 = $95;
      $96 = $__arg01;
      __THREW__ = 0;
      invoke_viii(158,($tmp_ret9|0),($96|0),(159|0));
      $97 = __THREW__; __THREW__ = 0;
      $98 = $97&1;
      if ($98) {
       label = 50;
       break;
      }
      $99 = ((($tmp_ret9)) + 4|0);
      $100 = HEAP32[$tmp_ret9>>2]|0;
      $101 = HEAP32[$99>>2]|0;
      HEAP32[$_61>>2] = $100;
      $102 = ((($_61)) + 4|0);
      HEAP32[$102>>2] = $101;
      __THREW__ = 0;
      invoke_viiiii(160,($_56|0),($17|0),($18|0),($_61|0),1);
      $103 = __THREW__; __THREW__ = 0;
      $104 = $103&1;
      if ($104) {
       label = 50;
       break;
      }
      __THREW__ = 0;
      $105 = (invoke_iii(161,($result|0),($_56|0))|0);
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       label = 50;
       break;
      }
      HEAP8[$abi_cast11>>0] = $105;
      ;HEAP8[$_53>>0]=HEAP8[$abi_cast11>>0]|0;
      $$field19 = HEAP8[$_53>>0]|0;
      HEAP8[$arg12>>0] = $$field19;
      $108 = HEAP8[$arg12>>0]|0;
      __THREW__ = 0;
      invoke_vi(162,($108|0));
      $109 = __THREW__; __THREW__ = 0;
      $110 = $109&1;
      if ($110) {
       label = 50;
       break;
      }
      __THREW__ = 0;
      invoke_vi(163,($_64|0));
      $111 = __THREW__; __THREW__ = 0;
      $112 = $111&1;
      if ($112) {
       label = 47;
       break;
      }
     } else {
      $22 = HEAP32[$element>>2]|0;
      $23 = ((($element)) + 4|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP32[$name>>2] = $22;
      $25 = ((($name)) + 4|0);
      HEAP32[$25>>2] = $24;
      $26 = HEAP32[588]|0;
      $27 = HEAP32[(2356)>>2]|0;
      $28 = ((($element)) + 8|0);
      __THREW__ = 0;
      invoke_vii(152,($_30|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       label = 47;
       break;
      }
      __THREW__ = 0;
      invoke_vii(154,($_29|0),($_30|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       label = 47;
       break;
      }
      $35 = ((($element)) + 20|0);
      __THREW__ = 0;
      invoke_vii(151,($_34|0),($35|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       label = 48;
       break;
      }
      __THREW__ = 0;
      invoke_vii(155,($_33|0),($_34|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 48;
       break;
      }
      HEAP32[$_26>>2] = $name;
      $40 = ((($_26)) + 4|0);
      HEAP32[$40>>2] = $_29;
      $41 = ((($_26)) + 8|0);
      HEAP32[$41>>2] = $_33;
      $42 = ((($_26)) + 12|0);
      HEAP32[$42>>2] = $name;
      $43 = HEAP32[$_26>>2]|0;
      $__arg0 = $43;
      $44 = ((($_26)) + 4|0);
      $45 = HEAP32[$44>>2]|0;
      $__arg1 = $45;
      $46 = ((($_26)) + 8|0);
      $47 = HEAP32[$46>>2]|0;
      $__arg2 = $47;
      $48 = ((($_26)) + 12|0);
      $49 = HEAP32[$48>>2]|0;
      $__arg3 = $49;
      $50 = $__arg0;
      __THREW__ = 0;
      invoke_viii(156,($tmp_ret|0),($50|0),(157|0));
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if ($52) {
       label = 49;
       break;
      }
      $53 = ((($tmp_ret)) + 4|0);
      $54 = HEAP32[$tmp_ret>>2]|0;
      $55 = HEAP32[$53>>2]|0;
      $56 = $__arg1;
      __THREW__ = 0;
      invoke_viii(158,($tmp_ret6|0),($56|0),(159|0));
      $57 = __THREW__; __THREW__ = 0;
      $58 = $57&1;
      if ($58) {
       label = 49;
       break;
      }
      $59 = ((($tmp_ret6)) + 4|0);
      $60 = HEAP32[$tmp_ret6>>2]|0;
      $61 = HEAP32[$59>>2]|0;
      $62 = $__arg2;
      __THREW__ = 0;
      invoke_viii(158,($tmp_ret7|0),($62|0),(159|0));
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       label = 49;
       break;
      }
      $65 = ((($tmp_ret7)) + 4|0);
      $66 = HEAP32[$tmp_ret7>>2]|0;
      $67 = HEAP32[$65>>2]|0;
      $68 = $__arg3;
      __THREW__ = 0;
      invoke_viii(156,($tmp_ret8|0),($68|0),(157|0));
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       label = 49;
       break;
      }
      $71 = ((($tmp_ret8)) + 4|0);
      $72 = HEAP32[$tmp_ret8>>2]|0;
      $73 = HEAP32[$71>>2]|0;
      HEAP32[$_25>>2] = $54;
      $74 = ((($_25)) + 4|0);
      HEAP32[$74>>2] = $55;
      $75 = ((($_25)) + 8|0);
      HEAP32[$75>>2] = $60;
      $76 = ((($75)) + 4|0);
      HEAP32[$76>>2] = $61;
      $77 = ((($_25)) + 16|0);
      HEAP32[$77>>2] = $66;
      $78 = ((($77)) + 4|0);
      HEAP32[$78>>2] = $67;
      $79 = ((($_25)) + 24|0);
      HEAP32[$79>>2] = $72;
      $80 = ((($79)) + 4|0);
      HEAP32[$80>>2] = $73;
      __THREW__ = 0;
      invoke_viiiii(160,($_20|0),($26|0),($27|0),($_25|0),4);
      $81 = __THREW__; __THREW__ = 0;
      $82 = $81&1;
      if ($82) {
       label = 49;
       break;
      }
      __THREW__ = 0;
      $83 = (invoke_iii(161,($result|0),($_20|0))|0);
      $84 = __THREW__; __THREW__ = 0;
      $85 = $84&1;
      if ($85) {
       label = 49;
       break;
      }
      HEAP8[$abi_cast>>0] = $83;
      ;HEAP8[$_17>>0]=HEAP8[$abi_cast>>0]|0;
      $$field8 = HEAP8[$_17>>0]|0;
      HEAP8[$arg>>0] = $$field8;
      $86 = HEAP8[$arg>>0]|0;
      __THREW__ = 0;
      invoke_vi(162,($86|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       label = 49;
       break;
      }
      __THREW__ = 0;
      invoke_vi(163,($_33|0));
      $89 = __THREW__; __THREW__ = 0;
      $90 = $89&1;
      if ($90) {
       label = 48;
       break;
      }
      __THREW__ = 0;
      invoke_vi(163,($_29|0));
      $91 = __THREW__; __THREW__ = 0;
      $92 = $91&1;
      if ($92) {
       label = 47;
       break;
      }
     }
     __THREW__ = 0;
     invoke_vi(153,($element|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      label = 51;
      break;
     }
     $115 = HEAP32[$_10>>2]|0;
     $switch3 = ($115>>>0)<(1);
     if (!($switch3)) {
      continue;
     }
     __THREW__ = 0;
     invoke_vi(150,($_10|0));
     $121 = __THREW__; __THREW__ = 0;
     $122 = $121&1;
     if ($122) {
      label = 46;
      break;
     }
    }
    if ((label|0) == 10) {
     __THREW__ = 0;
     invoke_vi(150,($_10|0));
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      $137 = ___cxa_find_matching_catch_2()|0;
      $138 = tempRet0;
      HEAP32[$personalityslot>>2] = $137;
      $personalityslot$index43 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index43>>2] = $138;
      $$field = HEAP32[$personalityslot>>2]|0;
      $$index4 = ((($personalityslot)) + 4|0);
      $$field5 = HEAP32[$$index4>>2]|0;
      ___resumeException($$field|0);
      // unreachable;
     } else {
      __THREW__ = 0;
      invoke_vi(164,($iter|0));
      $113 = __THREW__; __THREW__ = 0;
      $114 = $113&1;
      if ($114) {
       label = 45;
       break;
      }
      $_74 = 0;
      ;HEAP32[$_72>>2]=HEAP32[$result>>2]|0;HEAP32[$_72+4>>2]=HEAP32[$result+4>>2]|0;HEAP32[$_72+8>>2]=HEAP32[$result+8>>2]|0;
      ;HEAP32[$0>>2]=HEAP32[$_72>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_72+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_72+8>>2]|0;
      STACKTOP = sp;return;
     }
    }
    else if ((label|0) == 46) {
     $125 = ___cxa_find_matching_catch_2()|0;
     $126 = tempRet0;
     HEAP32[$personalityslot>>2] = $125;
     $personalityslot$index31 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index31>>2] = $126;
    }
    else if ((label|0) == 47) {
     $127 = ___cxa_find_matching_catch_2()|0;
     $128 = tempRet0;
     HEAP32[$personalityslot>>2] = $127;
     $personalityslot$index33 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index33>>2] = $128;
     label = 12;
    }
    else if ((label|0) == 48) {
     $129 = ___cxa_find_matching_catch_2()|0;
     $130 = tempRet0;
     HEAP32[$personalityslot>>2] = $129;
     $personalityslot$index35 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index35>>2] = $130;
     label = 18;
    }
    else if ((label|0) == 49) {
     $131 = ___cxa_find_matching_catch_2()|0;
     $132 = tempRet0;
     HEAP32[$personalityslot>>2] = $131;
     $personalityslot$index37 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index37>>2] = $132;
     __ZN4drop17hf176c6534ecd4046E($_33);
     label = 18;
    }
    else if ((label|0) == 50) {
     $133 = ___cxa_find_matching_catch_2()|0;
     $134 = tempRet0;
     HEAP32[$personalityslot>>2] = $133;
     $personalityslot$index39 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index39>>2] = $134;
     __ZN4drop17hf176c6534ecd4046E($_64);
     label = 12;
    }
    else if ((label|0) == 51) {
     $135 = ___cxa_find_matching_catch_2()|0;
     $136 = tempRet0;
     HEAP32[$personalityslot>>2] = $135;
     $personalityslot$index41 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index41>>2] = $136;
     label = 9;
    }
    if ((label|0) == 18) {
     __ZN4drop17hf176c6534ecd4046E($_29);
     label = 12;
    }
    if ((label|0) == 12) {
     __ZN4drop17ha3594332bb7982ceE($element);
     label = 9;
    }
    do {
     if ((label|0) == 9) {
      $11 = HEAP32[$_10>>2]|0;
      $switch1 = ($11>>>0)<(1);
      if ($switch1) {
       __ZN4drop17h348e10b97a61d454E($_10);
       break;
      }
      $118 = $_75;
      $119 = $118&1;
      if ($119) {
       $_75 = 0;
       $120 = ((($_10)) + 4|0);
       __ZN4drop17ha3594332bb7982ceE($120);
      }
     }
    } while(0);
    __ZN4drop17h49fe11cdc496b758E($iter);
   }
  }
 } while(0);
 if ((label|0) == 45) {
  $123 = ___cxa_find_matching_catch_2()|0;
  $124 = tempRet0;
  HEAP32[$personalityslot>>2] = $123;
  $personalityslot$index29 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index29>>2] = $124;
 }
 $116 = $_74;
 $117 = $116&1;
 if ($117) {
  $_74 = 0;
  __ZN4drop17hf176c6534ecd4046E($result);
 }
 $4 = $_73;
 $5 = $4&1;
 if (!($5)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index4 = ((($personalityslot)) + 4|0);
  $$field5 = HEAP32[$$index4>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_73 = 0;
 __ZN4drop17h168a6168c579fd89E($elements);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11collections6string6String3new17ha2893a9e26b91767E($0) {
 $0 = $0|0;
 var $_1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_1 = sp;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17h4f455634a33ffa24E($_1);
 ;HEAP32[$0>>2]=HEAP32[$_1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_1+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN83__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h8b046957206682aeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field5 = 0, $$field8 = 0, $$index4 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_29 = 0, $_36 = 0;
 var $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $begin = 0, $cap = 0, $end = 0, $personalityslot = 0, $personalityslot$index11 = 0, $self = 0, $self$i = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp;
 $arg0 = sp + 56|0;
 $self = sp + 40|0;
 $_29 = sp + 24|0;
 $personalityslot = sp + 16|0;
 $tmp_ret1 = sp + 8|0;
 $abi_cast = sp + 68|0;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 $_36 = 0;
 $_36 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(165,($2|0),($self|0));
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   __THREW__ = 0;
   $5 = (invoke_iii(166,($$sreg$field|0),($$sreg$field2|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    $begin = $5;
    $8 = $begin;
    __THREW__ = 0;
    (invoke_ii(167,($8|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     __THREW__ = 0;
     $11 = (invoke_i(168)|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if (!($13)) {
      $14 = ($11|0)==(0);
      $15 = $begin;
      if ($14) {
       __THREW__ = 0;
       $16 = (invoke_ii(169,($self|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        break;
       }
       $22 = (($15) + ($16)|0);
       $tmp_ret = $22;
       $23 = $tmp_ret;
       $end = $23;
      } else {
       __THREW__ = 0;
       $19 = (invoke_ii(169,($self|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        break;
       }
       __THREW__ = 0;
       $24 = (invoke_iii(170,($15|0),($19|0))|0);
       $25 = __THREW__; __THREW__ = 0;
       $26 = $25&1;
       if ($26) {
        break;
       }
       $end = $24;
      }
      $arg0$i = $self;
      $27 = $arg0$i;
      $self$i = $27;
      __THREW__ = 0;
      $28 = (invoke_i(168)|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       $31 = ($28|0)==(0);
       if ($31) {
        $_0$i = -1;
       } else {
        $32 = $self$i;
        $33 = ((($32)) + 4|0);
        $34 = HEAP32[$33>>2]|0;
        $_0$i = $34;
       }
       $35 = $_0$i;
       $cap = $35;
       $_36 = 0;
       ;HEAP32[$_29>>2]=HEAP32[$self>>2]|0;HEAP32[$_29+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_29+8>>2]=HEAP32[$self+8>>2]|0;
       __THREW__ = 0;
       invoke_vi(171,($_29|0));
       $36 = __THREW__; __THREW__ = 0;
       $37 = $36&1;
       if (!($37)) {
        $38 = $begin;
        __THREW__ = 0;
        $39 = (invoke_ii(172,($38|0))|0);
        $40 = __THREW__; __THREW__ = 0;
        $41 = $40&1;
        if (!($41)) {
         HEAP32[$abi_cast>>2] = $39;
         ;HEAP32[$tmp_ret1>>2]=HEAP32[$abi_cast>>2]|0;
         $$field8 = HEAP32[$tmp_ret1>>2]|0;
         $42 = $cap;
         $43 = $begin;
         $44 = $end;
         HEAP32[$0>>2] = $$field8;
         $45 = ((($0)) + 4|0);
         HEAP32[$45>>2] = $42;
         $46 = ((($0)) + 8|0);
         HEAP32[$46>>2] = $43;
         $47 = ((($0)) + 12|0);
         HEAP32[$47>>2] = $44;
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $48 = ___cxa_find_matching_catch_2()|0;
 $49 = tempRet0;
 HEAP32[$personalityslot>>2] = $48;
 $personalityslot$index11 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index11>>2] = $49;
 $50 = $_36;
 $51 = $50&1;
 if (!($51)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index4 = ((($personalityslot)) + 4|0);
  $$field5 = HEAP32[$$index4>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_36 = 0;
 __ZN4drop17h168a6168c579fd89E($self);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17heed2247bd7a1b8ceE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$field6 = 0, $$field9 = 0, $$index1 = 0, $$index8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$i = 0, $_10$i5 = 0, $_13 = 0, $_20 = 0, $_9$i = 0, $_9$i4 = 0, $arg0 = 0, $arg0$i = 0, $arg0$i1 = 0, $old = 0, $personalityslot$i = 0, $personalityslot$i$index4 = 0;
 var $personalityslot$i6 = 0, $personalityslot$i6$index11 = 0, $self = 0, $src$i = 0, $src$i2 = 0, $tmp$i = 0, $tmp$i3 = 0, $tmp_ret = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $tmp$i3 = sp + 216|0;
 $_9$i4 = sp + 176|0;
 $personalityslot$i6 = sp + 168|0;
 $tmp$i = sp + 128|0;
 $_9$i = sp + 88|0;
 $personalityslot$i = sp + 80|0;
 $_13 = sp + 40|0;
 $_20 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $self;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($8|0);
 if ($9) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 }
 $10 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $11 = ($10|0)==(0);
 $12 = $self;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 if ($11) {
  $15 = ((($14)) + 1|0);
  $tmp_ret = $15;
  $16 = $tmp_ret;
  $17 = $self;
  $18 = ((($17)) + 8|0);
  HEAP32[$18>>2] = $16;
  $arg0$i = (1);
  $_10$i = 0;
  $19 = $arg0$i;
  $src$i = $19;
  __THREW__ = 0;
  invoke_vi(173,($tmp$i|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $_10$i = 1;
   $36 = $src$i;
   dest=$tmp$i; src=$36; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $_10$i = 0;
   dest=$_9$i; src=$tmp$i; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   dest=$_13; src=$_9$i; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$0>>2] = 1;
   $37 = ((($0)) + 4|0);
   dest=$37; src=$_13; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   STACKTOP = sp;return;
  }
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  HEAP32[$personalityslot$i>>2] = $32;
  $personalityslot$i$index4 = ((($personalityslot$i)) + 4|0);
  HEAP32[$personalityslot$i$index4>>2] = $33;
  $34 = $_10$i;
  $35 = $34&1;
  if (!($35)) {
   $$field = HEAP32[$personalityslot$i>>2]|0;
   $$index1 = ((($personalityslot$i)) + 4|0);
   $$field2 = HEAP32[$$index1>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $_10$i = 0;
  __ZN4drop17ha3594332bb7982ceE($tmp$i);
  $$field = HEAP32[$personalityslot$i>>2]|0;
  $$index1 = ((($personalityslot$i)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  $old = $14;
  $22 = $self;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h977f91fda7edfa1aE($24,1)|0);
  $26 = $self;
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = $25;
  $28 = $old;
  $arg0$i1 = $28;
  $_10$i5 = 0;
  $29 = $arg0$i1;
  $src$i2 = $29;
  __THREW__ = 0;
  invoke_vi(173,($tmp$i3|0));
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if (!($31)) {
   $_10$i5 = 1;
   $42 = $src$i2;
   dest=$tmp$i3; src=$42; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $_10$i5 = 0;
   dest=$_9$i4; src=$tmp$i3; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   dest=$_20; src=$_9$i4; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$0>>2] = 1;
   $43 = ((($0)) + 4|0);
   dest=$43; src=$_20; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   STACKTOP = sp;return;
  }
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  HEAP32[$personalityslot$i6>>2] = $38;
  $personalityslot$i6$index11 = ((($personalityslot$i6)) + 4|0);
  HEAP32[$personalityslot$i6$index11>>2] = $39;
  $40 = $_10$i5;
  $41 = $40&1;
  if (!($41)) {
   $$field6 = HEAP32[$personalityslot$i6>>2]|0;
   $$index8 = ((($personalityslot$i6)) + 4|0);
   $$field9 = HEAP32[$$index8>>2]|0;
   ___resumeException($$field6|0);
   // unreachable;
  }
  $_10$i5 = 0;
  __ZN4drop17ha3594332bb7982ceE($tmp$i3);
  $$field6 = HEAP32[$personalityslot$i6>>2]|0;
  $$index8 = ((($personalityslot$i6)) + 4|0);
  $$field9 = HEAP32[$$index8>>2]|0;
  ___resumeException($$field6|0);
  // unreachable;
 }
}
function __ZN4drop17h49fe11cdc496b758E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(174,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h49fe11cdc496b758E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h49fe11cdc496b758E($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17h348e10b97a61d454E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $cond = ($1|0)==(1);
 if (!($cond)) {
  return;
 }
 $2 = ((($0)) + 4|0);
 __ZN4drop17ha3594332bb7982ceE($2);
 return;
}
function __ZN4drop17ha3594332bb7982ceE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZN4drop17h170fadfae1d8e329E($1);
 $2 = ((($0)) + 20|0);
 __ZN4drop17hbc72189bfe33c49bE($2);
 return;
}
function __ZN68__LT_core__option__Option_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h55f5f3d3c24c66ddE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $_6 = 0, $__self_0 = 0, $arg0 = 0, $self = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_3 = sp + 16|0;
 $_6 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 HEAP32[$_3>>2] = $3;
 $4 = HEAP32[$_3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $switch = ($5>>>0)<(1);
 if ($switch) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $6 = HEAP32[$_3>>2]|0;
  $7 = ((($6)) + 4|0);
  $__self_0 = $7;
  $8 = $__self_0;
  __ZN75__LT_simpledom__simpledom__ElementContent_u20_as_u20_core__clone__Clone_GT_5clone17hefbbc765d695317eE($_6,$8);
  HEAP32[$0>>2] = 1;
  $9 = ((($0)) + 4|0);
  ;HEAP32[$9>>2]=HEAP32[$_6>>2]|0;HEAP32[$9+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$_6+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$_6+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZN68__LT_core__option__Option_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h4da121c8c745ff49E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_3 = 0, $_6 = 0, $__self_0 = 0, $arg0 = 0, $self = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_3 = sp + 16|0;
 $_6 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 HEAP32[$_3>>2] = $3;
 $4 = HEAP32[$_3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $$expand_i1_val = $6&1;
 $$expand_i1_val1 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val1&255);
 if ($switch) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $7 = HEAP32[$_3>>2]|0;
  $__self_0 = $7;
  $8 = $__self_0;
  __ZN69__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h79bca17c19f558bdE($_6,$8);
  ;HEAP32[$0>>2]=HEAP32[$_6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_6+8>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZN9simpledom9simpledom10write_attr17hd3fd120187f6612dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val39 = 0, $$expand_i1_val40 = 0, $$expand_i1_val41 = 0, $$expand_i1_val42 = 0, $$expand_i1_val43 = 0, $$field = 0, $$field10 = 0, $$field13$field$field = 0, $$field16 = 0, $$index9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_11 = 0, $_20 = 0;
 var $_23 = 0, $_28 = 0, $_29 = 0, $_41 = 0, $_42 = 0, $_43 = 0, $_44 = 0, $_45 = 0, $_46 = 0, $_8 = 0, $_9 = 0, $__arg0 = 0, $__arg1 = 0, $abi_cast = 0, $arg = 0, $arg0 = 0, $attr = 0, $attrs = 0, $attrs1 = 0, $event_name = 0;
 var $fn_block = 0, $iter = 0, $name = 0, $personalityslot = 0, $personalityslot$index26 = 0, $personalityslot$index28 = 0, $personalityslot$index30 = 0, $personalityslot$index32 = 0, $personalityslot$index34 = 0, $result = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $switch3 = 0, $switch4 = 0, $switch5 = 0, $switch6 = 0, $switch7 = 0, $switch8 = 0, $tmp_ret = 0;
 var $tmp_ret4 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $arg0 = sp + 280|0;
 $attrs = sp + 264|0;
 $result = sp + 248|0;
 $attrs1 = sp + 232|0;
 $_8 = sp + 216|0;
 $_9 = sp + 200|0;
 $iter = sp + 184|0;
 $_11 = sp + 160|0;
 $attr = sp + 136|0;
 $name = sp + 128|0;
 $value = sp + 120|0;
 $event_name = sp + 112|0;
 $fn_block = sp + 104|0;
 $_20 = sp + 96|0;
 $_23 = sp + 72|0;
 $_28 = sp + 56|0;
 $_29 = sp + 48|0;
 $_41 = sp + 32|0;
 $personalityslot = sp + 24|0;
 $tmp_ret = sp + 16|0;
 $tmp_ret4 = sp + 8|0;
 $abi_cast = sp + 300|0;
 $arg = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 $_46 = 0;
 $_45 = 0;
 $_42 = 0;
 $_43 = 0;
 $_44 = 0;
 $_42 = 1;
 ;HEAP32[$attrs>>2]=HEAP32[$arg0>>2]|0;HEAP32[$attrs+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$attrs+8>>2]=HEAP32[$arg0+8>>2]|0;
 __THREW__ = 0;
 invoke_vi(147,($result|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   label = 44;
  } else {
   $_43 = 1;
   $6 = HEAP32[$attrs>>2]|0;
   $7 = ($6|0)!=(0|0);
   $$expand_i1_val40 = $7&1;
   $$expand_i1_val41 = 1;
   $switch1 = ($$expand_i1_val40&255)<($$expand_i1_val41&255);
   L3: do {
    if ($switch1) {
     label = 22;
    } else {
     $_42 = 0;
     ;HEAP32[$attrs1>>2]=HEAP32[$attrs>>2]|0;HEAP32[$attrs1+4>>2]=HEAP32[$attrs+4>>2]|0;HEAP32[$attrs1+8>>2]=HEAP32[$attrs+8>>2]|0;
     ;HEAP32[$_9>>2]=HEAP32[$attrs1>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$attrs1+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$attrs1+8>>2]|0;
     __THREW__ = 0;
     invoke_vii(175,($_8|0),($_9|0));
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if ($9) {
      label = 44;
      break L1;
     }
     ;HEAP32[$iter>>2]=HEAP32[$_8>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$_8+4>>2]|0;HEAP32[$iter+8>>2]=HEAP32[$_8+8>>2]|0;HEAP32[$iter+12>>2]=HEAP32[$_8+12>>2]|0;
     while(1) {
      __THREW__ = 0;
      invoke_vii(176,($_11|0),($iter|0));
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      if ($11) {
       label = 45;
       break;
      }
      $_44 = 1;
      $12 = HEAP32[$_11>>2]|0;
      $switch2 = ($12>>>0)<(1);
      $_44 = 0;
      if ($switch2) {
       label = 11;
       break;
      }
      $_45 = 1;
      $16 = ((($_11)) + 4|0);
      ;HEAP32[$attr>>2]=HEAP32[$16>>2]|0;HEAP32[$attr+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$attr+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$attr+12>>2]=HEAP32[$16+12>>2]|0;HEAP32[$attr+16>>2]=HEAP32[$16+16>>2]|0;
      $17 = HEAP32[$attr>>2]|0;
      $switch4 = ($17>>>0)<(1);
      if ($switch4) {
       $18 = ((($attr)) + 4|0);
       $19 = HEAP32[$18>>2]|0;
       $20 = ((($18)) + 4|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP32[$name>>2] = $19;
       $22 = ((($name)) + 4|0);
       HEAP32[$22>>2] = $21;
       $23 = ((($attr)) + 12|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = ((($23)) + 4|0);
       $26 = HEAP32[$25>>2]|0;
       HEAP32[$value>>2] = $24;
       $27 = ((($value)) + 4|0);
       HEAP32[$27>>2] = $26;
       $28 = HEAP32[578]|0;
       $29 = HEAP32[(2316)>>2]|0;
       HEAP32[$_29>>2] = $name;
       $30 = ((($_29)) + 4|0);
       HEAP32[$30>>2] = $value;
       $31 = HEAP32[$_29>>2]|0;
       $__arg0 = $31;
       $32 = ((($_29)) + 4|0);
       $33 = HEAP32[$32>>2]|0;
       $__arg1 = $33;
       $34 = $__arg0;
       __THREW__ = 0;
       invoke_viii(156,($tmp_ret|0),($34|0),(157|0));
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        label = 46;
        break;
       }
       $43 = ((($tmp_ret)) + 4|0);
       $44 = HEAP32[$tmp_ret>>2]|0;
       $45 = HEAP32[$43>>2]|0;
       $46 = $__arg1;
       __THREW__ = 0;
       invoke_viii(156,($tmp_ret4|0),($46|0),(157|0));
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 46;
        break;
       }
       $49 = ((($tmp_ret4)) + 4|0);
       $50 = HEAP32[$tmp_ret4>>2]|0;
       $51 = HEAP32[$49>>2]|0;
       HEAP32[$_28>>2] = $44;
       $52 = ((($_28)) + 4|0);
       HEAP32[$52>>2] = $45;
       $53 = ((($_28)) + 8|0);
       HEAP32[$53>>2] = $50;
       $54 = ((($53)) + 4|0);
       HEAP32[$54>>2] = $51;
       __THREW__ = 0;
       invoke_viiiii(160,($_23|0),($28|0),($29|0),($_28|0),2);
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if ($56) {
        label = 46;
        break;
       }
       __THREW__ = 0;
       $57 = (invoke_iii(161,($result|0),($_23|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        label = 46;
        break;
       }
       HEAP8[$abi_cast>>0] = $57;
       ;HEAP8[$_20>>0]=HEAP8[$abi_cast>>0]|0;
       $$field16 = HEAP8[$_20>>0]|0;
       HEAP8[$arg>>0] = $$field16;
       $60 = HEAP8[$arg>>0]|0;
       __THREW__ = 0;
       invoke_vi(162,($60|0));
       $61 = __THREW__; __THREW__ = 0;
       $62 = $61&1;
       if ($62) {
        label = 46;
        break;
       }
      } else {
       $37 = ((($attr)) + 4|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ((($37)) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       HEAP32[$event_name>>2] = $38;
       $41 = ((($event_name)) + 4|0);
       HEAP32[$41>>2] = $40;
       $_45 = 0;
       $_46 = 1;
       $42 = ((($attr)) + 12|0);
       $$field13$field$field = HEAP32[$42>>2]|0;
       HEAP32[$fn_block>>2] = $$field13$field$field;
      }
      $81 = $_46;
      $82 = $81&1;
      if ($82) {
       $_46 = 0;
       __THREW__ = 0;
       invoke_vi(179,($fn_block|0));
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 46;
        break;
       }
      }
      $63 = HEAP32[$attr>>2]|0;
      $switch5 = ($63>>>0)<(1);
      if ($switch5) {
       __THREW__ = 0;
       invoke_vi(180,($attr|0));
       $83 = __THREW__; __THREW__ = 0;
       $84 = $83&1;
       if ($84) {
        label = 47;
        break;
       }
      } else {
       $85 = $_45;
       $86 = $85&1;
       if ($86) {
        $_45 = 0;
        $87 = ((($attr)) + 12|0);
        __THREW__ = 0;
        invoke_vi(179,($87|0));
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if ($89) {
         label = 47;
         break;
        }
       }
      }
      $66 = HEAP32[$_11>>2]|0;
      $switch6 = ($66>>>0)<(1);
      if (!($switch6)) {
       continue;
      }
      __THREW__ = 0;
      invoke_vi(177,($_11|0));
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       label = 45;
       break;
      }
     }
     do {
      if ((label|0) == 11) {
       __THREW__ = 0;
       invoke_vi(177,($_11|0));
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if ($15) {
        break L3;
       }
       __THREW__ = 0;
       invoke_vi(178,($iter|0));
       $64 = __THREW__; __THREW__ = 0;
       $65 = $64&1;
       if ($65) {
        label = 44;
        break L1;
       } else {
        label = 22;
        break L3;
       }
      }
      else if ((label|0) == 45) {
       $100 = ___cxa_find_matching_catch_2()|0;
       $101 = tempRet0;
       HEAP32[$personalityslot>>2] = $100;
       $personalityslot$index28 = ((($personalityslot)) + 4|0);
       HEAP32[$personalityslot$index28>>2] = $101;
      }
      else if ((label|0) == 46) {
       $102 = ___cxa_find_matching_catch_2()|0;
       $103 = tempRet0;
       HEAP32[$personalityslot>>2] = $102;
       $personalityslot$index30 = ((($personalityslot)) + 4|0);
       HEAP32[$personalityslot$index30>>2] = $103;
       $104 = HEAP32[$attr>>2]|0;
       $switch8 = ($104>>>0)<(1);
       if ($switch8) {
        __ZN4drop17h5655a31cee677dd4E($attr);
        label = 10;
        break;
       }
       $76 = $_45;
       $77 = $76&1;
       if ($77) {
        $_45 = 0;
        $78 = ((($attr)) + 12|0);
        __ZN4drop17h614c7861e005ad67E($78);
        label = 10;
       } else {
        label = 10;
       }
      }
      else if ((label|0) == 47) {
       $105 = ___cxa_find_matching_catch_2()|0;
       $106 = tempRet0;
       HEAP32[$personalityslot>>2] = $105;
       $personalityslot$index32 = ((($personalityslot)) + 4|0);
       HEAP32[$personalityslot$index32>>2] = $106;
       label = 10;
      }
     } while(0);
     do {
      if ((label|0) == 10) {
       $13 = HEAP32[$_11>>2]|0;
       $switch3 = ($13>>>0)<(1);
       if ($switch3) {
        __ZN4drop17h8d9dbcdc390e199dE($_11);
        break;
       }
       $73 = $_44;
       $74 = $73&1;
       if ($74) {
        $_44 = 0;
        $75 = ((($_11)) + 4|0);
        __ZN4drop17h5655a31cee677dd4E($75);
       }
      }
     } while(0);
     __ZN4drop17h76015c8f4ddeadd4E($iter);
     break L1;
    }
   } while(0);
   do {
    if ((label|0) == 22) {
     $_43 = 0;
     ;HEAP32[$_41>>2]=HEAP32[$result>>2]|0;HEAP32[$_41+4>>2]=HEAP32[$result+4>>2]|0;HEAP32[$_41+8>>2]=HEAP32[$result+8>>2]|0;
     ;HEAP32[$0>>2]=HEAP32[$_41>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_41+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_41+8>>2]|0;
     $67 = HEAP32[$attrs>>2]|0;
     $68 = ($67|0)!=(0|0);
     $$expand_i1_val42 = $68&1;
     $$expand_i1_val43 = 1;
     $switch7 = ($$expand_i1_val42&255)<($$expand_i1_val43&255);
     if ($switch7) {
      __THREW__ = 0;
      invoke_vi(181,($attrs|0));
      $92 = __THREW__; __THREW__ = 0;
      $93 = $92&1;
      if ($93) {
       break;
      }
      STACKTOP = sp;return;
     }
     $94 = $_42;
     $95 = $94&1;
     if (!($95)) {
      STACKTOP = sp;return;
     }
     $_42 = 0;
     __THREW__ = 0;
     invoke_vi(182,($attrs|0));
     $96 = __THREW__; __THREW__ = 0;
     $97 = $96&1;
     if (!($97)) {
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $107 = ___cxa_find_matching_catch_2()|0;
   $108 = tempRet0;
   HEAP32[$personalityslot>>2] = $107;
   $personalityslot$index34 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index34>>2] = $108;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index9 = ((($personalityslot)) + 4|0);
   $$field10 = HEAP32[$$index9>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 if ((label|0) == 44) {
  $98 = ___cxa_find_matching_catch_2()|0;
  $99 = tempRet0;
  HEAP32[$personalityslot>>2] = $98;
  $personalityslot$index26 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index26>>2] = $99;
 }
 $71 = $_43;
 $72 = $71&1;
 if ($72) {
  $_43 = 0;
  __ZN4drop17hf176c6534ecd4046E($result);
 }
 $4 = HEAP32[$attrs>>2]|0;
 $5 = ($4|0)!=(0|0);
 $$expand_i1_val = $5&1;
 $$expand_i1_val39 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val39&255);
 if ($switch) {
  __ZN4drop17h170fadfae1d8e329E($attrs);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index9 = ((($personalityslot)) + 4|0);
  $$field10 = HEAP32[$$index9>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $69 = $_42;
 $70 = $69&1;
 if (!($70)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index9 = ((($personalityslot)) + 4|0);
  $$field10 = HEAP32[$$index9>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_42 = 0;
 __ZN4drop17hcce073e3bd646d8cE($attrs);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index9 = ((($personalityslot)) + 4|0);
 $$field10 = HEAP32[$$index9>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17hf176c6534ecd4046E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h4f741961d931a54eE($0);
 return;
}
function __ZN9simpledom9simpledom18write_elem_content17h4a1a3d35b93a3a30E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field18 = 0, $$field29 = 0, $$field4 = 0, $$field7 = 0, $$index3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_10 = 0, $_13 = 0, $_18 = 0, $_19 = 0, $_25 = 0, $_28 = 0, $_33 = 0, $_34 = 0, $_40 = 0, $_43 = 0;
 var $_48 = 0, $_49 = 0, $_51 = 0, $_52 = 0, $_57 = 0, $_58 = 0, $_59 = 0, $_60 = 0, $_61 = 0, $_62 = 0, $_63 = 0, $_64 = 0, $_65 = 0, $__arg0 = 0, $__arg01 = 0, $__arg02 = 0, $abi_cast = 0, $abi_cast6 = 0, $abi_cast9 = 0, $arg = 0;
 var $arg0 = 0, $arg10 = 0, $arg7 = 0, $content = 0, $element_content = 0, $elts = 0, $html = 0, $personalityslot = 0, $personalityslot$index39 = 0, $personalityslot$index41 = 0, $personalityslot$index43 = 0, $personalityslot$index45 = 0, $personalityslot$index47 = 0, $result = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $text = 0, $tmp_ret = 0, $tmp_ret5 = 0;
 var $tmp_ret8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $arg0 = sp + 344|0;
 $element_content = sp + 320|0;
 $result = sp + 304|0;
 $content = sp + 288|0;
 $text = sp + 272|0;
 $html = sp + 264|0;
 $elts = sp + 248|0;
 $_10 = sp + 240|0;
 $_13 = sp + 216|0;
 $_18 = sp + 208|0;
 $_19 = sp + 200|0;
 $_25 = sp + 192|0;
 $_28 = sp + 168|0;
 $_33 = sp + 160|0;
 $_34 = sp + 152|0;
 $_40 = sp + 144|0;
 $_43 = sp + 120|0;
 $_48 = sp + 112|0;
 $_49 = sp + 104|0;
 $_51 = sp + 88|0;
 $_52 = sp + 72|0;
 $_57 = sp + 56|0;
 $personalityslot = sp + 48|0;
 $tmp_ret = sp + 40|0;
 $abi_cast = sp + 378|0;
 $arg = sp + 32|0;
 $tmp_ret5 = sp + 24|0;
 $abi_cast6 = sp + 377|0;
 $arg7 = sp + 16|0;
 $tmp_ret8 = sp + 8|0;
 $abi_cast9 = sp + 376|0;
 $arg10 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$arg0+16>>2]=HEAP32[$1+16>>2]|0;
 $_61 = 0;
 $_58 = 0;
 $_64 = 0;
 $_60 = 0;
 $_59 = 0;
 $_62 = 0;
 $_63 = 0;
 $_65 = 0;
 $_58 = 1;
 ;HEAP32[$element_content>>2]=HEAP32[$arg0>>2]|0;HEAP32[$element_content+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$element_content+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$element_content+12>>2]=HEAP32[$arg0+12>>2]|0;HEAP32[$element_content+16>>2]=HEAP32[$arg0+16>>2]|0;
 __THREW__ = 0;
 invoke_vi(147,($result|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if ($3) {
   label = 48;
  } else {
   $_59 = 1;
   $5 = HEAP32[$element_content>>2]|0;
   $switch1 = ($5>>>0)<(1);
   do {
    if (!($switch1)) {
     $_58 = 0;
     $_60 = 1;
     $_61 = 1;
     $_62 = 1;
     $_63 = 1;
     $_64 = 1;
     $6 = ((($element_content)) + 4|0);
     ;HEAP32[$content>>2]=HEAP32[$6>>2]|0;HEAP32[$content+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$content+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$content+12>>2]=HEAP32[$6+12>>2]|0;
     $7 = HEAP32[$content>>2]|0;
     L5: do {
      switch ($7|0) {
      case 0:  {
       $_64 = 0;
       $_65 = 1;
       $9 = ((($content)) + 4|0);
       ;HEAP32[$text>>2]=HEAP32[$9>>2]|0;HEAP32[$text+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$text+8>>2]=HEAP32[$9+8>>2]|0;
       $10 = HEAP32[584]|0;
       $11 = HEAP32[(2340)>>2]|0;
       HEAP32[$_19>>2] = $text;
       $12 = HEAP32[$_19>>2]|0;
       $__arg0 = $12;
       $13 = $__arg0;
       __THREW__ = 0;
       invoke_viii(158,($tmp_ret8|0),($13|0),(159|0));
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if ($15) {
        label = 50;
       } else {
        $34 = ((($tmp_ret8)) + 4|0);
        $35 = HEAP32[$tmp_ret8>>2]|0;
        $36 = HEAP32[$34>>2]|0;
        HEAP32[$_18>>2] = $35;
        $37 = ((($_18)) + 4|0);
        HEAP32[$37>>2] = $36;
        __THREW__ = 0;
        invoke_viiiii(160,($_13|0),($10|0),($11|0),($_18|0),1);
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         label = 50;
        } else {
         __THREW__ = 0;
         $40 = (invoke_iii(161,($result|0),($_13|0))|0);
         $41 = __THREW__; __THREW__ = 0;
         $42 = $41&1;
         if ($42) {
          label = 50;
         } else {
          HEAP8[$abi_cast9>>0] = $40;
          ;HEAP8[$_10>>0]=HEAP8[$abi_cast9>>0]|0;
          $$field7 = HEAP8[$_10>>0]|0;
          HEAP8[$arg10>>0] = $$field7;
          $43 = HEAP8[$arg10>>0]|0;
          __THREW__ = 0;
          invoke_vi(162,($43|0));
          $44 = __THREW__; __THREW__ = 0;
          $45 = $44&1;
          if ($45) {
           label = 50;
          } else {
           label = 10;
          }
         }
        }
       }
       break;
      }
      case 1:  {
       $16 = ((($content)) + 4|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = ((($16)) + 4|0);
       $19 = HEAP32[$18>>2]|0;
       HEAP32[$html>>2] = $17;
       $20 = ((($html)) + 4|0);
       HEAP32[$20>>2] = $19;
       $21 = HEAP32[582]|0;
       $22 = HEAP32[(2332)>>2]|0;
       HEAP32[$_34>>2] = $html;
       $23 = HEAP32[$_34>>2]|0;
       $__arg01 = $23;
       $24 = $__arg01;
       __THREW__ = 0;
       invoke_viii(156,($tmp_ret5|0),($24|0),(157|0));
       $25 = __THREW__; __THREW__ = 0;
       $26 = $25&1;
       if ($26) {
        label = 50;
       } else {
        $46 = ((($tmp_ret5)) + 4|0);
        $47 = HEAP32[$tmp_ret5>>2]|0;
        $48 = HEAP32[$46>>2]|0;
        HEAP32[$_33>>2] = $47;
        $49 = ((($_33)) + 4|0);
        HEAP32[$49>>2] = $48;
        __THREW__ = 0;
        invoke_viiiii(160,($_28|0),($21|0),($22|0),($_33|0),1);
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         label = 50;
        } else {
         __THREW__ = 0;
         $52 = (invoke_iii(161,($result|0),($_28|0))|0);
         $53 = __THREW__; __THREW__ = 0;
         $54 = $53&1;
         if ($54) {
          label = 50;
         } else {
          HEAP8[$abi_cast6>>0] = $52;
          ;HEAP8[$_25>>0]=HEAP8[$abi_cast6>>0]|0;
          $$field18 = HEAP8[$_25>>0]|0;
          HEAP8[$arg7>>0] = $$field18;
          $55 = HEAP8[$arg7>>0]|0;
          __THREW__ = 0;
          invoke_vi(162,($55|0));
          $56 = __THREW__; __THREW__ = 0;
          $57 = $56&1;
          if ($57) {
           label = 50;
          } else {
           label = 10;
          }
         }
        }
       }
       break;
      }
      case 2:  {
       $_62 = 0;
       $27 = ((($content)) + 4|0);
       ;HEAP32[$elts>>2]=HEAP32[$27>>2]|0;HEAP32[$elts+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$elts+8>>2]=HEAP32[$27+8>>2]|0;
       $28 = HEAP32[580]|0;
       $29 = HEAP32[(2324)>>2]|0;
       ;HEAP32[$_52>>2]=HEAP32[$elts>>2]|0;HEAP32[$_52+4>>2]=HEAP32[$elts+4>>2]|0;HEAP32[$_52+8>>2]=HEAP32[$elts+8>>2]|0;
       __THREW__ = 0;
       invoke_vii(127,($_51|0),($_52|0));
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        label = 50;
       } else {
        HEAP32[$_49>>2] = $_51;
        $58 = HEAP32[$_49>>2]|0;
        $__arg02 = $58;
        $59 = $__arg02;
        __THREW__ = 0;
        invoke_viii(158,($tmp_ret|0),($59|0),(159|0));
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if (!($61)) {
         $62 = ((($tmp_ret)) + 4|0);
         $63 = HEAP32[$tmp_ret>>2]|0;
         $64 = HEAP32[$62>>2]|0;
         HEAP32[$_48>>2] = $63;
         $65 = ((($_48)) + 4|0);
         HEAP32[$65>>2] = $64;
         __THREW__ = 0;
         invoke_viiiii(160,($_43|0),($28|0),($29|0),($_48|0),1);
         $66 = __THREW__; __THREW__ = 0;
         $67 = $66&1;
         if (!($67)) {
          __THREW__ = 0;
          $68 = (invoke_iii(161,($result|0),($_43|0))|0);
          $69 = __THREW__; __THREW__ = 0;
          $70 = $69&1;
          if (!($70)) {
           HEAP8[$abi_cast>>0] = $68;
           ;HEAP8[$_40>>0]=HEAP8[$abi_cast>>0]|0;
           $$field29 = HEAP8[$_40>>0]|0;
           HEAP8[$arg>>0] = $$field29;
           $71 = HEAP8[$arg>>0]|0;
           __THREW__ = 0;
           invoke_vi(162,($71|0));
           $72 = __THREW__; __THREW__ = 0;
           $73 = $72&1;
           if (!($73)) {
            __THREW__ = 0;
            invoke_vi(163,($_51|0));
            $74 = __THREW__; __THREW__ = 0;
            $75 = $74&1;
            if ($75) {
             label = 50;
             break L5;
            } else {
             label = 10;
             break L5;
            }
           }
          }
         }
        }
        $120 = ___cxa_find_matching_catch_2()|0;
        $121 = tempRet0;
        HEAP32[$personalityslot>>2] = $120;
        $personalityslot$index43 = ((($personalityslot)) + 4|0);
        HEAP32[$personalityslot$index43>>2] = $121;
        __ZN4drop17hf176c6534ecd4046E($_51);
        label = 43;
       }
       break;
      }
      default: {
       // unreachable;
      }
      }
     } while(0);
     if ((label|0) == 10) {
      $32 = $_65;
      $33 = $32&1;
      if (!($33)) {
       break;
      }
      $_65 = 0;
      __THREW__ = 0;
      invoke_vi(163,($text|0));
      $107 = __THREW__; __THREW__ = 0;
      $108 = $107&1;
      if (!($108)) {
       break;
      }
      $122 = ___cxa_find_matching_catch_2()|0;
      $123 = tempRet0;
      HEAP32[$personalityslot>>2] = $122;
      $personalityslot$index45 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index45>>2] = $123;
     }
     else if ((label|0) == 50) {
      $118 = ___cxa_find_matching_catch_2()|0;
      $119 = tempRet0;
      HEAP32[$personalityslot>>2] = $118;
      $personalityslot$index41 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index41>>2] = $119;
      label = 43;
     }
     if ((label|0) == 43) {
      $105 = $_65;
      $106 = $105&1;
      if ($106) {
       $_65 = 0;
       __ZN4drop17hf176c6534ecd4046E($text);
      }
     }
     $8 = HEAP32[$content>>2]|0;
     switch ($8|0) {
     case 0:  {
      $99 = $_64;
      $100 = $99&1;
      if (!($100)) {
       break L1;
      }
      $_64 = 0;
      $101 = ((($content)) + 4|0);
      __ZN4drop17hf176c6534ecd4046E($101);
      break L1;
      break;
     }
     case 1:  {
      $_60 = 0;
      __ZN4drop17hf6535ba4b994640bE($content);
      break L1;
      break;
     }
     case 2:  {
      $102 = $_62;
      $103 = $102&1;
      if (!($103)) {
       break L1;
      }
      $_62 = 0;
      $104 = ((($content)) + 4|0);
      __ZN4drop17h168a6168c579fd89E($104);
      break L1;
      break;
     }
     default: {
      // unreachable;
     }
     }
    }
   } while(0);
   $97 = $_60;
   $98 = $97&1;
   L40: do {
    if ($98) {
     $96 = HEAP32[$content>>2]|0;
     switch ($96|0) {
     case 0:  {
      $82 = $_64;
      $83 = $82&1;
      if (!($83)) {
       break L40;
      }
      $_64 = 0;
      $84 = ((($content)) + 4|0);
      __THREW__ = 0;
      invoke_vi(163,($84|0));
      $85 = __THREW__; __THREW__ = 0;
      $86 = $85&1;
      if ($86) {
       label = 48;
       break L1;
      } else {
       break L40;
      }
      break;
     }
     case 1:  {
      $89 = $_60;
      $90 = $89&1;
      if (!($90)) {
       break L40;
      }
      $_60 = 0;
      __THREW__ = 0;
      invoke_vi(183,($content|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       label = 48;
       break L1;
      } else {
       break L40;
      }
      break;
     }
     case 2:  {
      $91 = $_62;
      $92 = $91&1;
      if (!($92)) {
       break L40;
      }
      $_62 = 0;
      $93 = ((($content)) + 4|0);
      __THREW__ = 0;
      invoke_vi(184,($93|0));
      $94 = __THREW__; __THREW__ = 0;
      $95 = $94&1;
      if ($95) {
       label = 48;
       break L1;
      } else {
       break L40;
      }
      break;
     }
     default: {
      // unreachable;
     }
     }
    }
   } while(0);
   $_59 = 0;
   ;HEAP32[$_57>>2]=HEAP32[$result>>2]|0;HEAP32[$_57+4>>2]=HEAP32[$result+4>>2]|0;HEAP32[$_57+8>>2]=HEAP32[$result+8>>2]|0;
   ;HEAP32[$0>>2]=HEAP32[$_57>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_57+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_57+8>>2]|0;
   $76 = HEAP32[$element_content>>2]|0;
   $switch2 = ($76>>>0)<(1);
   if ($switch2) {
    __THREW__ = 0;
    invoke_vi(185,($element_content|0));
    $109 = __THREW__; __THREW__ = 0;
    $110 = $109&1;
    if (!($110)) {
     STACKTOP = sp;return;
    }
   } else {
    $111 = $_58;
    $112 = $111&1;
    if (!($112)) {
     STACKTOP = sp;return;
    }
    $_58 = 0;
    $113 = ((($element_content)) + 4|0);
    __THREW__ = 0;
    invoke_vi(183,($113|0));
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if (!($115)) {
     STACKTOP = sp;return;
    }
   }
   $124 = ___cxa_find_matching_catch_2()|0;
   $125 = tempRet0;
   HEAP32[$personalityslot>>2] = $124;
   $personalityslot$index47 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index47>>2] = $125;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 if ((label|0) == 48) {
  $116 = ___cxa_find_matching_catch_2()|0;
  $117 = tempRet0;
  HEAP32[$personalityslot>>2] = $116;
  $personalityslot$index39 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index39>>2] = $117;
 }
 $80 = $_59;
 $81 = $80&1;
 if ($81) {
  $_59 = 0;
  __ZN4drop17hf176c6534ecd4046E($result);
 }
 $4 = HEAP32[$element_content>>2]|0;
 $switch = ($4>>>0)<(1);
 if ($switch) {
  __ZN4drop17hbc72189bfe33c49bE($element_content);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $77 = $_58;
 $78 = $77&1;
 if (!($78)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_58 = 0;
 $79 = ((($element_content)) + 4|0);
 __ZN4drop17hf6535ba4b994640bE($79);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17ha3b8a98364490850E_11($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $f = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $f;
 $9 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hded13da3919e24b6E($5,$7,$8)|0);
 HEAP8[$abi_cast>>0] = $9;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $10 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3fmt10ArgumentV13new17h4fc99b8d04e93a27E_12($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN66__LT_collections__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17h7aa04dea3e23c901E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $_0 = sp + 8|0;
 $abi_cast = sp + 28|0;
 $arg0 = $0;
 $arg1 = $1;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $self;
 __ZN64__LT_collections__string__String_u20_as_u20_core__ops__Deref_GT_5deref17hfe37c7570418f8e6E_47($2,$5);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $6 = $f;
 $7 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hded13da3919e24b6E($$sreg$field,$$sreg$field2,$6)|0);
 HEAP8[$abi_cast>>0] = $7;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $8 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZN4core3fmt10ArgumentV13new17h018a2d28ebe4c1caE_13($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt9Arguments6new_v117h22aa263f6d4613b4E_14($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_6 = 0, $arg0 = 0, $arg1 = 0, $args = 0, $pieces = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 32|0;
 $arg1 = sp + 24|0;
 $pieces = sp + 16|0;
 $args = sp + 8|0;
 $_6 = sp;
 HEAP32[$arg0>>2] = $1;
 $5 = ((($arg0)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$arg1>>2] = $3;
 $6 = ((($arg1)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[$arg0>>2]|0;
 $8 = ((($arg0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$pieces>>2] = $7;
 $10 = ((($pieces)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$arg1>>2]|0;
 $12 = ((($arg1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$args>>2] = $11;
 $14 = ((($args)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$pieces>>2]|0;
 $16 = ((($pieces)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$_6>>2] = 0;
 $18 = HEAP32[$args>>2]|0;
 $19 = ((($args)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$0>>2] = $15;
 $21 = ((($0)) + 4|0);
 HEAP32[$21>>2] = $17;
 $22 = ((($0)) + 8|0);
 ;HEAP32[$22>>2]=HEAP32[$_6>>2]|0;HEAP32[$22+4>>2]=HEAP32[$_6+4>>2]|0;
 $23 = ((($0)) + 16|0);
 HEAP32[$23>>2] = $18;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $20;
 STACKTOP = sp;return;
}
function __ZN4core3fmt5Write9write_fmt17h695ca218c314a294E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0 = 0, $_10 = 0, $_8 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $args = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $arg1 = sp + 64|0;
 $_0 = sp + 56|0;
 $args = sp + 32|0;
 $_8 = sp + 24|0;
 $_10 = sp;
 $abi_cast = sp + 96|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$arg1+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$arg1+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = $arg0;
 $self = $2;
 ;HEAP32[$args>>2]=HEAP32[$arg1>>2]|0;HEAP32[$args+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$arg1+8>>2]|0;HEAP32[$args+12>>2]=HEAP32[$arg1+12>>2]|0;HEAP32[$args+16>>2]=HEAP32[$arg1+16>>2]|0;HEAP32[$args+20>>2]=HEAP32[$arg1+20>>2]|0;
 $3 = $self;
 HEAP32[$_8>>2] = $3;
 ;HEAP32[$_10>>2]=HEAP32[$args>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_10+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_10+20>>2]=HEAP32[$args+20>>2]|0;
 $4 = (__ZN4core3fmt5write17he0deec3411c715a1E($_8,32,$_10)|0);
 HEAP8[$abi_cast>>0] = $4;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $5 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($5|0);
}
function __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6unwrap17h6ec69ea39d63fca3E($0) {
 $0 = $0|0;
 var $$field = 0, $$field12 = 0, $$field15 = 0, $$index14 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_9 = 0, $abi_cast = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index17 = 0;
 var $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $abi_cast = sp + 19|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP8[$abi_cast>>0] = $0;
 ;HEAP8[$arg0>>0]=HEAP8[$abi_cast>>0]|0;
 $_10 = 0;
 $_9 = 0;
 $_9 = 1;
 $_10 = 1;
 $$field = HEAP8[$arg0>>0]|0;
 HEAP8[$self>>0] = $$field;
 $1 = HEAP8[$self>>0]|0;
 $switch1 = ($1&255)<(1);
 if ($switch1) {
  $_10 = 0;
  $2 = HEAP8[$self>>0]|0;
  $switch = ($2&255)<(1);
  if ($switch) {
   STACKTOP = sp;return;
  }
  $_9 = 0;
  STACKTOP = sp;return;
 }
 $_9 = 0;
 __THREW__ = 0;
 invoke_vii(186,(6508|0),43);
 $3 = __THREW__; __THREW__ = 0;
 $4 = ___cxa_find_matching_catch_2()|0;
 $5 = tempRet0;
 HEAP32[$personalityslot>>2] = $4;
 $personalityslot$index17 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index17>>2] = $5;
 $6 = HEAP8[$self>>0]|0;
 $switch2 = ($6&255)<(1);
 if ($switch2) {
  $7 = $_10;
  $8 = $7&1;
  if ($8) {
   $_10 = 0;
  }
 } else {
  $9 = $_9;
  $10 = $9&1;
  if ($10) {
   $_9 = 0;
  }
 }
 $$field12 = HEAP32[$personalityslot>>2]|0;
 $$index14 = ((($personalityslot)) + 4|0);
 $$field15 = HEAP32[$$index14>>2]|0;
 ___resumeException($$field12|0);
 // unreachable;
}
function __ZN4drop17h168a6168c579fd89E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(187,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h168a6168c579fd89E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h168a6168c579fd89E($0);
  STACKTOP = sp;return;
 }
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17hc38d5b175e1c5bfaE_15($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $drop = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $drop = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17hcae9dfe056bea613E_22($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$drop>>2] = $$sreg$field;
 $4 = ((($drop)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 __ZN4drop17hf99111a21a84ff6aE($drop);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h168a6168c579fd89E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h9538293552a4ed9bE($0);
 return;
}
function __ZN4drop17h9538293552a4ed9bE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(188,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h9538293552a4ed9bE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h9538293552a4ed9bE($0);
  STACKTOP = sp;return;
 }
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h427bc0b366c3f968E_16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17he32ca0008511ab29E_18()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd09980720cd59956E_19($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E_20($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h9538293552a4ed9bE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3mem7size_of17hd154145e87414f75E_17() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 40;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17he32ca0008511ab29E_18() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd09980720cd59956E_19($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc2c1b29b8009c8a6E_21($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN5alloc4heap10deallocate17h2ed96d866771a555E_20($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $align = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $old_size = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $old_size = $4;
 $5 = $arg2;
 $align = $5;
 $6 = $ptr;
 $7 = $old_size;
 $8 = $align;
 ___rust_deallocate($6,$7,$8);
 STACKTOP = sp;return;
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc2c1b29b8009c8a6E_21($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17hcae9dfe056bea613E_22($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h8c8f16780fd7853fE_23($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN4drop17hf99111a21a84ff6aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*40)|0)|0);
 $6 = $1;
 while(1) {
  $5 = ($6|0)!=($4|0);
  if (!($5)) {
   break;
  }
  __ZN4drop17ha3594332bb7982ceE($6);
  $7 = ((($6)) + 40|0);
  $6 = $7;
 }
 return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h8c8f16780fd7853fE_23($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h0e1aeebaaf4243cdE_24($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h72516150e42e5932E_25($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17hfbb1ade5a821b90eE_26($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h0e1aeebaaf4243cdE_24($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd09980720cd59956E_19($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h72516150e42e5932E_25($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h23ea4d0b4a30c0deE_27()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core5slice18from_raw_parts_mut17hfbb1ade5a821b90eE_26($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core3ptr8null_mut17h23ea4d0b4a30c0deE_27() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN4core6result13unwrap_failed17h46d9d3a39ac48388E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_5 = 0, $__arg0 = 0, $__arg1 = 0, $arg0 = 0;
 var $error = 0, $msg = 0, $personalityslot = 0, $personalityslot$index1 = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $arg0 = sp + 80|0;
 $msg = sp + 72|0;
 $error = sp + 72|0;
 $_5 = sp + 48|0;
 $_10 = sp + 32|0;
 $_11 = sp + 24|0;
 $tmp_ret = sp + 16|0;
 $personalityslot = sp + 8|0;
 $tmp_ret1 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$msg>>2] = $3;
 $6 = ((($msg)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[830]|0;
 $8 = HEAP32[(3324)>>2]|0;
 HEAP32[$_11>>2] = $msg;
 $9 = ((($_11)) + 4|0);
 HEAP32[$9>>2] = $error;
 $10 = HEAP32[$_11>>2]|0;
 $__arg0 = $10;
 $11 = ((($_11)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $__arg1 = $12;
 $13 = $__arg0;
 __THREW__ = 0;
 invoke_viii(156,($tmp_ret|0),($13|0),(157|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $16 = ((($tmp_ret)) + 4|0);
  $17 = HEAP32[$tmp_ret>>2]|0;
  $18 = HEAP32[$16>>2]|0;
  $19 = $__arg1;
  __THREW__ = 0;
  invoke_viii(189,($tmp_ret1|0),($19|0),(190|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = ((($tmp_ret1)) + 4|0);
   $23 = HEAP32[$tmp_ret1>>2]|0;
   $24 = HEAP32[$22>>2]|0;
   HEAP32[$_10>>2] = $17;
   $25 = ((($_10)) + 4|0);
   HEAP32[$25>>2] = $18;
   $26 = ((($_10)) + 8|0);
   HEAP32[$26>>2] = $23;
   $27 = ((($26)) + 4|0);
   HEAP32[$27>>2] = $24;
   __THREW__ = 0;
   invoke_viiiii(160,($_5|0),($7|0),($8|0),($_10|0),2);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    __THREW__ = 0;
    invoke_vii(100,($_5|0),(3308|0));
    $30 = __THREW__; __THREW__ = 0;
   }
  }
 }
 $31 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 HEAP32[$personalityslot>>2] = $31;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $32;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core3fmt10ArgumentV13new17h0f241fed73e88944E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4drop17h6ebc62578d224f8eE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0f176071ce95e943E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $s = 0, $self = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg1 = sp + 16|0;
 $_0 = sp + 8|0;
 $s = sp;
 $abi_cast = sp + 32|0;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$s>>2] = $5;
 $8 = ((($s)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $self;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$s>>2]|0;
 $12 = ((($s)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN64__LT_collections__string__String_u20_as_u20_core__fmt__Write_GT_9write_str17h6c7202e020f74d3aE($10,$11,$13)|0);
 HEAP8[$abi_cast>>0] = $14;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $15 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($15|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h306a512c97fa840aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $c = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $c = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = $c;
 $7 = (__ZN64__LT_collections__string__String_u20_as_u20_core__fmt__Write_GT_10write_char17h0199562f847735bfE($5,$6)|0);
 HEAP8[$abi_cast>>0] = $7;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $8 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h9148321c12e0e9b4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_6 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $args = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $arg1 = sp + 56|0;
 $_0 = sp + 48|0;
 $args = sp + 24|0;
 $_6 = sp;
 $abi_cast = sp + 88|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$arg1+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$arg1+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = $arg0;
 $self = $2;
 ;HEAP32[$args>>2]=HEAP32[$arg1>>2]|0;HEAP32[$args+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$arg1+8>>2]|0;HEAP32[$args+12>>2]=HEAP32[$arg1+12>>2]|0;HEAP32[$args+16>>2]=HEAP32[$arg1+16>>2]|0;HEAP32[$args+20>>2]=HEAP32[$arg1+20>>2]|0;
 $3 = $self;
 $4 = HEAP32[$3>>2]|0;
 ;HEAP32[$_6>>2]=HEAP32[$args>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_6+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_6+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_6+20>>2]=HEAP32[$args+20>>2]|0;
 $5 = (__ZN4core3fmt5Write9write_fmt17h695ca218c314a294E($4,$_6)|0);
 HEAP8[$abi_cast>>0] = $5;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $6 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN64__LT_collections__string__String_u20_as_u20_core__fmt__Write_GT_10write_char17h0199562f847735bfE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $arg0 = 0, $arg1 = 0, $c = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $c = $3;
 $4 = $self;
 $5 = $c;
 __ZN11collections6string6String4push17hdfe1f0efb479a0e6E($4,$5);
 HEAP8[$_0>>0] = 0;
 $6 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN11collections6string6String4push17hdfe1f0efb479a0e6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_19 = 0, $_5 = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $ch = 0, $cond = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp + 16|0;
 $3 = sp;
 $arg0$i = sp + 32|0;
 $self$i = sp + 24|0;
 $_19 = sp + 60|0;
 $arg0 = $0;
 $arg1 = $1;
 $4 = $arg0;
 $self = $4;
 $5 = $arg1;
 $ch = $5;
 $6 = $ch;
 $7 = (__ZN11std_unicode4char22__LT_impl_u20_char_GT_8len_utf817h7f6856c4eab2d968E($6)|0);
 $_5 = $7;
 $8 = $_5;
 $cond = ($8|0)==(1);
 $9 = $self;
 $10 = $ch;
 if ($cond) {
  $11 = $10&255;
  __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_4push17h3ad52f6819bd4247E($9,$11);
  STACKTOP = sp;return;
 }
 $12 = ((($_19)) + 4|0);
 $14 = $_19;
 while(1) {
  $13 = ($14|0)!=($12|0);
  if (!($13)) {
   break;
  }
  HEAP8[$14>>0] = 0;
  $15 = ((($14)) + 1|0);
  $14 = $15;
 }
 __ZN11std_unicode4char22__LT_impl_u20_char_GT_11encode_utf817hb1ec2c9bb8efdec3E($3,$10,$_19,4);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index2 = ((($3)) + 4|0);
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0;
 HEAP32[$arg0$i>>2] = $$sreg$field;
 $16 = ((($arg0$i)) + 4|0);
 HEAP32[$16>>2] = $$sreg$field3;
 $17 = HEAP32[$arg0$i>>2]|0;
 $18 = ((($arg0$i)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$self$i>>2] = $17;
 $20 = ((($self$i)) + 4|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$self$i>>2]|0;
 $22 = ((($self$i)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h9c4453839a3f7ce0E($2,$21,$23);
 $$sreg1$field = HEAP32[$2>>2]|0;
 $$sreg1$index5 = ((($2)) + 4|0);
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h9ea2fdabdecee2a2E($9,$$sreg1$field,$$sreg1$field6);
 STACKTOP = sp;return;
}
function __ZN11std_unicode4char22__LT_impl_u20_char_GT_8len_utf817h7f6856c4eab2d968E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_8len_utf817h10d88de42f21383dE($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_4push17h3ad52f6819bd4247E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$sreg$field = 0, $$sreg$field5 = 0, $$sreg$index4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_22 = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $end = 0, $personalityslot = 0, $personalityslot$index7 = 0;
 var $self = 0, $self$i = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 $arg1 = $1;
 $_22 = 0;
 $3 = $arg0;
 $self = $3;
 $_22 = 1;
 $4 = $arg1;
 $value = $4;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $self;
 $arg0$i = $8;
 $9 = $arg0$i;
 $self$i = $9;
 __THREW__ = 0;
 $10 = (invoke_i(191)|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if (!($12)) {
   $13 = ($10|0)==(0);
   if ($13) {
    $_0$i = -1;
   } else {
    $14 = $self$i;
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $_0$i = $16;
   }
   $17 = $_0$i;
   $18 = ($7|0)==($17|0);
   if ($18) {
    $19 = $self;
    __THREW__ = 0;
    invoke_vi(192,($19|0));
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     break;
    }
   }
   $22 = $self;
   __THREW__ = 0;
   invoke_vii(193,($2|0),($22|0));
   $$sreg$field = HEAP32[$2>>2]|0;
   $$sreg$index4 = ((($2)) + 4|0);
   $$sreg$field5 = HEAP32[$$sreg$index4>>2]|0;
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    __THREW__ = 0;
    $25 = (invoke_iii(194,($$sreg$field|0),($$sreg$field5|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if (!($27)) {
     $28 = $self;
     $29 = ((($28)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     $31 = (invoke_iii(195,($25|0),($30|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $end = $31;
      $34 = $end;
      $_22 = 0;
      $35 = $value;
      __THREW__ = 0;
      invoke_vii(196,($34|0),($35|0));
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if (!($37)) {
       $38 = $self;
       $39 = ((($38)) + 8|0);
       $40 = $self;
       $41 = ((($40)) + 8|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (($42) + 1)|0;
       HEAP32[$39>>2] = $43;
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 } while(0);
 $44 = ___cxa_find_matching_catch_2()|0;
 $45 = tempRet0;
 HEAP32[$personalityslot>>2] = $44;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $45;
 $46 = $_22;
 $47 = $46&1;
 if (!($47)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_22 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h9c4453839a3f7ce0E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $lvalue_temp = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $lvalue_temp = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$lvalue_temp>>2] = $7;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h9ea2fdabdecee2a2E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg1 = sp + 16|0;
 $other = sp + 8|0;
 $_6 = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$other>>2] = $5;
 $8 = ((($other)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $self;
 $10 = HEAP32[$other>>2]|0;
 $11 = ((($other)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17hde7b3de198d6224cE($_6,$10,$12);
 __ZN151__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT__RF__u27_a_u20_T_C__u20_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT__GT_11spec_extend17hafefe5b0f854212cE($9,$_6);
 STACKTOP = sp;return;
}
function __ZN11std_unicode4char22__LT_impl_u20_char_GT_11encode_utf817hb1ec2c9bb8efdec3E($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $dst = 0, $retVal$index4 = 0, $self = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $arg1 = sp + 16|0;
 $dst = sp + 8|0;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = $arg0;
 $self = $5;
 $6 = HEAP32[$arg1>>2]|0;
 $7 = ((($arg1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$dst>>2] = $6;
 $9 = ((($dst)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $self;
 $11 = HEAP32[$dst>>2]|0;
 $12 = ((($dst)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817h6e66fdcf584d84f0E($3,$10,$11,$13);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817h6e66fdcf584d84f0E($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_10 = 0, $_19 = 0, $_36 = 0, $_85 = 0, $_90 = 0, $_91 = 0, $_93 = 0, $_98 = 0, $__arg0 = 0, $__arg1 = 0, $__arg2 = 0, $arg0 = 0, $arg1 = 0;
 var $code = 0, $dst = 0, $len = 0, $lvalue_temp = 0, $retVal$index4 = 0, $self = 0, $tmp_ret = 0, $tmp_ret1 = 0, $tmp_ret2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $3 = sp;
 $arg1 = sp + 112|0;
 $dst = sp + 104|0;
 $code = sp + 144|0;
 $_85 = sp + 80|0;
 $_90 = sp + 56|0;
 $_91 = sp + 40|0;
 $_93 = sp + 136|0;
 $_98 = sp + 132|0;
 $tmp_ret = sp + 32|0;
 $tmp_ret1 = sp + 24|0;
 $tmp_ret2 = sp + 16|0;
 $lvalue_temp = sp + 8|0;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = $arg0;
 $self = $5;
 $6 = HEAP32[$arg1>>2]|0;
 $7 = ((($arg1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$dst>>2] = $6;
 $9 = ((($dst)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $self;
 HEAP32[$code>>2] = $10;
 $11 = HEAP32[$code>>2]|0;
 $12 = ($11>>>0)<(128);
 if ($12) {
  $13 = HEAP32[$dst>>2]|0;
  $14 = ((($dst)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (__ZN4core5slice8SliceExt8is_empty17h11de256ff872940bE($13,$15)|0);
  $17 = $16 ^ 1;
  if ($17) {
   $_10 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_10 = 0;
 }
 $18 = $_10;
 $19 = $18&1;
 $20 = HEAP32[$code>>2]|0;
 do {
  if ($19) {
   $21 = HEAP32[$dst>>2]|0;
   $22 = ((($dst)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_28($21,$23,0)|0);
   $25 = $20&255;
   HEAP8[$24>>0] = $25;
   $len = 1;
  } else {
   $26 = ($20>>>0)<(2048);
   if ($26) {
    $27 = HEAP32[$dst>>2]|0;
    $28 = ((($dst)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($27,$29)|0);
    $31 = ($30>>>0)>=(2);
    if ($31) {
     $_19 = 1;
    } else {
     label = 9;
    }
   } else {
    label = 9;
   }
   if ((label|0) == 9) {
    $_19 = 0;
   }
   $32 = $_19;
   $33 = $32&1;
   $34 = HEAP32[$code>>2]|0;
   if ($33) {
    $35 = $34 >>> 6;
    $36 = $35 & 31;
    $37 = $36&255;
    $38 = HEAP32[$dst>>2]|0;
    $39 = ((($dst)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_28($38,$40,0)|0);
    $42 = $37 | -64;
    HEAP8[$41>>0] = $42;
    $43 = HEAP32[$code>>2]|0;
    $44 = $43 & 63;
    $45 = $44&255;
    $46 = HEAP32[$dst>>2]|0;
    $47 = ((($dst)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_28($46,$48,1)|0);
    $50 = $45 | -128;
    HEAP8[$49>>0] = $50;
    $len = 2;
    break;
   }
   $51 = ($34>>>0)<(65536);
   if ($51) {
    $52 = HEAP32[$dst>>2]|0;
    $53 = ((($dst)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($52,$54)|0);
    $56 = ($55>>>0)>=(3);
    if ($56) {
     $_36 = 1;
    } else {
     label = 15;
    }
   } else {
    label = 15;
   }
   if ((label|0) == 15) {
    $_36 = 0;
   }
   $57 = $_36;
   $58 = $57&1;
   if ($58) {
    $59 = HEAP32[$code>>2]|0;
    $60 = $59 >>> 12;
    $61 = $60 & 15;
    $62 = $61&255;
    $63 = HEAP32[$dst>>2]|0;
    $64 = ((($dst)) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_28($63,$65,0)|0);
    $67 = $62 | -32;
    HEAP8[$66>>0] = $67;
    $68 = HEAP32[$code>>2]|0;
    $69 = $68 >>> 6;
    $70 = $69 & 63;
    $71 = $70&255;
    $72 = HEAP32[$dst>>2]|0;
    $73 = ((($dst)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_28($72,$74,1)|0);
    $76 = $71 | -128;
    HEAP8[$75>>0] = $76;
    $77 = HEAP32[$code>>2]|0;
    $78 = $77 & 63;
    $79 = $78&255;
    $80 = HEAP32[$dst>>2]|0;
    $81 = ((($dst)) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_28($80,$82,2)|0);
    $84 = $79 | -128;
    HEAP8[$83>>0] = $84;
    $len = 3;
    break;
   }
   $85 = HEAP32[$dst>>2]|0;
   $86 = ((($dst)) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($85,$87)|0);
   $89 = ($88>>>0)>=(4);
   if ($89) {
    $90 = HEAP32[$code>>2]|0;
    $91 = $90 >>> 18;
    $92 = $91 & 7;
    $93 = $92&255;
    $94 = HEAP32[$dst>>2]|0;
    $95 = ((($dst)) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_28($94,$96,0)|0);
    $98 = $93 | -16;
    HEAP8[$97>>0] = $98;
    $99 = HEAP32[$code>>2]|0;
    $100 = $99 >>> 12;
    $101 = $100 & 63;
    $102 = $101&255;
    $103 = HEAP32[$dst>>2]|0;
    $104 = ((($dst)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_28($103,$105,1)|0);
    $107 = $102 | -128;
    HEAP8[$106>>0] = $107;
    $108 = HEAP32[$code>>2]|0;
    $109 = $108 >>> 6;
    $110 = $109 & 63;
    $111 = $110&255;
    $112 = HEAP32[$dst>>2]|0;
    $113 = ((($dst)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_28($112,$114,2)|0);
    $116 = $111 | -128;
    HEAP8[$115>>0] = $116;
    $117 = HEAP32[$code>>2]|0;
    $118 = $117 & 63;
    $119 = $118&255;
    $120 = HEAP32[$dst>>2]|0;
    $121 = ((($dst)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_28($120,$122,3)|0);
    $124 = $119 | -128;
    HEAP8[$123>>0] = $124;
    $len = 4;
    break;
   } else {
    $125 = HEAP32[814]|0;
    $126 = HEAP32[(3260)>>2]|0;
    $127 = HEAP32[$code>>2]|0;
    $128 = (__ZN4core4char18from_u32_unchecked17h7d118be5841e3315E($127)|0);
    $129 = (__ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_8len_utf817h10d88de42f21383dE($128)|0);
    HEAP32[$_93>>2] = $129;
    $130 = HEAP32[$dst>>2]|0;
    $131 = ((($dst)) + 4|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($130,$132)|0);
    HEAP32[$_98>>2] = $133;
    HEAP32[$_91>>2] = $_93;
    $134 = ((($_91)) + 4|0);
    HEAP32[$134>>2] = $code;
    $135 = ((($_91)) + 8|0);
    HEAP32[$135>>2] = $_98;
    $136 = HEAP32[$_91>>2]|0;
    $__arg0 = $136;
    $137 = ((($_91)) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $__arg1 = $138;
    $139 = ((($_91)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $__arg2 = $140;
    $141 = $__arg0;
    __ZN4core3fmt10ArgumentV13new17hd460f7313f83f1f0E($tmp_ret,$141,197);
    $142 = ((($tmp_ret)) + 4|0);
    $143 = HEAP32[$tmp_ret>>2]|0;
    $144 = HEAP32[$142>>2]|0;
    $145 = $__arg1;
    __ZN4core3fmt10ArgumentV13new17h64e78fdc96e6b1bcE($tmp_ret1,$145,198);
    $146 = ((($tmp_ret1)) + 4|0);
    $147 = HEAP32[$tmp_ret1>>2]|0;
    $148 = HEAP32[$146>>2]|0;
    $149 = $__arg2;
    __ZN4core3fmt10ArgumentV13new17hd460f7313f83f1f0E($tmp_ret2,$149,197);
    $150 = ((($tmp_ret2)) + 4|0);
    $151 = HEAP32[$tmp_ret2>>2]|0;
    $152 = HEAP32[$150>>2]|0;
    HEAP32[$_90>>2] = $143;
    $153 = ((($_90)) + 4|0);
    HEAP32[$153>>2] = $144;
    $154 = ((($_90)) + 8|0);
    HEAP32[$154>>2] = $147;
    $155 = ((($154)) + 4|0);
    HEAP32[$155>>2] = $148;
    $156 = ((($_90)) + 16|0);
    HEAP32[$156>>2] = $151;
    $157 = ((($156)) + 4|0);
    HEAP32[$157>>2] = $152;
    __ZN4core3fmt9Arguments6new_v117h22aa263f6d4613b4E_14($_85,$125,$126,$_90,3);
    __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_85,3244);
    // unreachable;
   }
  }
 } while(0);
 $158 = HEAP32[$dst>>2]|0;
 $159 = ((($dst)) + 4|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h40f049985213b358E_29($158,$160)|0);
 $162 = $len;
 __ZN4core5slice18from_raw_parts_mut17h101fab0c1c9324ddE_30($3,$161,$162);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$lvalue_temp>>2] = $$sreg$field;
 $163 = ((($lvalue_temp)) + 4|0);
 HEAP32[$163>>2] = $$sreg$field2;
 $164 = HEAP32[$lvalue_temp>>2]|0;
 $165 = ((($lvalue_temp)) + 4|0);
 $166 = HEAP32[$165>>2]|0;
 HEAP32[$retVal>>2] = $164;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $166;
 STACKTOP = sp;return;
}
function __ZN4core5slice8SliceExt8is_empty17h11de256ff872940bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($7,$9)|0);
 $11 = ($10|0)==(0);
 STACKTOP = sp;return ($11|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_28($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = $index;
 $10 = HEAP32[$self>>2]|0;
 $11 = ((($self)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_iiii(199,($9|0),($10|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $lvalue_temp = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$lvalue_temp>>2] = $7;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($lvalue_temp)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZN4core4char18from_u32_unchecked17h7d118be5841e3315E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $i = 0, $lvalue_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $i = $1;
 $2 = $i;
 $lvalue_temp = $2;
 $3 = $lvalue_temp;
 STACKTOP = sp;return ($3|0);
}
function __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_8len_utf817h10d88de42f21383dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $arg0 = 0, $code = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $code = $2;
 $3 = $code;
 $4 = ($3>>>0)<(128);
 do {
  if ($4) {
   $_0 = 1;
  } else {
   $5 = $code;
   $6 = ($5>>>0)<(2048);
   if ($6) {
    $_0 = 2;
    break;
   }
   $7 = $code;
   $8 = ($7>>>0)<(65536);
   if ($8) {
    $_0 = 3;
    break;
   } else {
    $_0 = 4;
    break;
   }
  }
 } while(0);
 $9 = $_0;
 STACKTOP = sp;return ($9|0);
}
function __ZN4core3fmt10ArgumentV13new17hd460f7313f83f1f0E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt10ArgumentV13new17h64e78fdc96e6b1bcE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h40f049985213b358E_29($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core5slice18from_raw_parts_mut17h101fab0c1c9324ddE_30($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17hf7aa56bc41f16c53E_31($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg1 = sp + 8|0;
 $slice = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$slice>>2]|0;
 $10 = ((($slice)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h40f049985213b358E_29($9,$11)|0);
 $13 = $self;
 $14 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h3666bfeb514b5534E_32($12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h3666bfeb514b5534E_32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17hde7b3de198d6224cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h6001c059f1509875E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN151__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT__RF__u27_a_u20_T_C__u20_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT__GT_11spec_extend17hafefe5b0f854212cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$sreg$field = 0, $$sreg$field4 = 0, $$sreg$index3 = 0, $$sreg1$field = 0, $$sreg1$field8 = 0, $$sreg1$index7 = 0, $$sreg2$field = 0, $$sreg2$field11 = 0, $$sreg2$index10 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_25 = 0, $arg = 0, $arg0 = 0, $arg1 = 0, $iterator = 0, $len = 0;
 var $self = 0, $slice = 0, $slice$index6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 $arg1 = sp + 72|0;
 $iterator = sp + 64|0;
 $slice = sp + 56|0;
 $_25 = sp + 48|0;
 $arg = sp + 40|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $5 = $arg0;
 $self = $5;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;
 __ZN49__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT_8as_slice17h858c754e3bbb9915E($4,$iterator);
 $$sreg$field = HEAP32[$4>>2]|0;
 $$sreg$index3 = ((($4)) + 4|0);
 $$sreg$field4 = HEAP32[$$sreg$index3>>2]|0;
 HEAP32[$slice>>2] = $$sreg$field;
 $slice$index6 = ((($slice)) + 4|0);
 HEAP32[$slice$index6>>2] = $$sreg$field4;
 $6 = $self;
 $7 = HEAP32[$slice>>2]|0;
 $8 = ((($slice)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h191fd4757972b5a0E($7,$9)|0);
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h994e49272e95c367E($6,$10);
 $11 = $self;
 $12 = (__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17h98b7b2fa337c56f6E($11)|0);
 $len = $12;
 $13 = $self;
 $14 = $len;
 $15 = HEAP32[$slice>>2]|0;
 $16 = ((($slice)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h191fd4757972b5a0E($15,$17)|0);
 $19 = (($14) + ($18))|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17hc2d58640a791a952E($13,$19);
 $20 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h87e2ccedc14ca01bE_33($3,$20);
 $$sreg1$field = HEAP32[$3>>2]|0;
 $$sreg1$index7 = ((($3)) + 4|0);
 $$sreg1$field8 = HEAP32[$$sreg1$index7>>2]|0;
 $21 = $len;
 HEAP32[$_25>>2] = $21;
 $$field = HEAP32[$_25>>2]|0;
 HEAP32[$arg>>2] = $$field;
 $22 = HEAP32[$arg>>2]|0;
 __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h4e58fa97937cf739E($2,$$sreg1$field,$$sreg1$field8,$22);
 $$sreg2$field = HEAP32[$2>>2]|0;
 $$sreg2$index10 = ((($2)) + 4|0);
 $$sreg2$field11 = HEAP32[$$sreg2$index10>>2]|0;
 $23 = HEAP32[$slice>>2]|0;
 $24 = ((($slice)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_15copy_from_slice17h6c8adea83c562dc0E($$sreg2$field,$$sreg2$field11,$23,$25);
 STACKTOP = sp;return;
}
function __ZN49__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT_8as_slice17h858c754e3bbb9915E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $arg0 = 0, $arg0$i = 0, $arg0$i2 = 0, $diff = 0, $len = 0;
 var $retVal$index8 = 0, $self = 0, $start1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp + 16|0;
 $2 = sp;
 $_0 = sp + 24|0;
 $arg0 = $0;
 $3 = $arg0;
 $self = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $start1 = $5;
 $6 = $self;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = $start1;
 $11 = $10;
 $12 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h927b60995810bc3aE($9,$11)|0);
 $diff = $12;
 $13 = $start1;
 $arg0$i = $13;
 $14 = (__ZN4core3mem7size_of17h01334bab523b4211E_39()|0);
 $15 = ($14|0)==(0);
 $16 = $diff;
 if ($15) {
  __ZN4core5slice14from_raw_parts17h0f2b4aaac10b99d1E_45($2,(1),$16);
  $$sreg$field = HEAP32[$2>>2]|0;
  $$sreg$index2 = ((($2)) + 4|0);
  $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0;
  HEAP32[$_0>>2] = $$sreg$field;
  $17 = ((($_0)) + 4|0);
  HEAP32[$17>>2] = $$sreg$field3;
  $26 = HEAP32[$_0>>2]|0;
  $27 = ((($_0)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$retVal>>2] = $26;
  $retVal$index8 = ((($retVal)) + 4|0);
  HEAP32[$retVal$index8>>2] = $28;
  STACKTOP = sp;return;
 }
 $18 = $start1;
 $arg0$i2 = $18;
 $19 = (__ZN4core3mem7size_of17h01334bab523b4211E_39()|0);
 $20 = ($19|0)==(0);
 $21 = $20;
 if ($21) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(2432);
  // unreachable;
 }
 $22 = (($16>>>0) / ($19>>>0))&-1;
 $len = $22;
 $23 = $start1;
 $24 = $len;
 __ZN4core5slice14from_raw_parts17h0f2b4aaac10b99d1E_45($1,$23,$24);
 $$sreg1$field = HEAP32[$1>>2]|0;
 $$sreg1$index5 = ((($1)) + 4|0);
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0;
 HEAP32[$_0>>2] = $$sreg1$field;
 $25 = ((($_0)) + 4|0);
 HEAP32[$25>>2] = $$sreg1$field6;
 $26 = HEAP32[$_0>>2]|0;
 $27 = ((($_0)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$retVal>>2] = $26;
 $retVal$index8 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index8>>2] = $28;
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h191fd4757972b5a0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h994e49272e95c367E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $additional = 0, $arg0 = 0, $arg1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $additional = $3;
 $4 = $self;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $additional;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17he9facb2042878f6bE($4,$7,$8);
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17h98b7b2fa337c56f6E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17hc2d58640a791a952E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $len;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h87e2ccedc14ca01bE_33($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h80ac1ad82cccc24eE_34($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_35($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17h101fab0c1c9324ddE_30($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h4e58fa97937cf739E($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field13 = 0, $$field16 = 0, $$field2 = 0, $$field5 = 0, $$index15 = 0, $$sreg$field = 0, $$sreg$field8 = 0, $$sreg$index7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_8 = 0, $abi_cast = 0, $arg = 0, $arg0 = 0, $arg1 = 0, $index = 0, $personalityslot = 0, $personalityslot$index11 = 0, $retVal$index10 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp;
 $arg0 = sp + 56|0;
 $arg1 = sp + 48|0;
 $abi_cast = sp + 64|0;
 $self = sp + 40|0;
 $index = sp + 32|0;
 $_8 = sp + 24|0;
 $arg = sp + 16|0;
 $personalityslot = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$abi_cast>>2] = $2;
 ;HEAP32[$arg1>>2]=HEAP32[$abi_cast>>2]|0;
 $5 = HEAP32[$arg0>>2]|0;
 $6 = ((($arg0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$self>>2] = $5;
 $8 = ((($self)) + 4|0);
 HEAP32[$8>>2] = $7;
 $$field = HEAP32[$arg1>>2]|0;
 HEAP32[$index>>2] = $$field;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $$field2 = HEAP32[$index>>2]|0;
 HEAP32[$_8>>2] = $$field2;
 $$field5 = HEAP32[$_8>>2]|0;
 HEAP32[$arg>>2] = $$field5;
 $12 = HEAP32[$arg>>2]|0;
 __THREW__ = 0;
 invoke_viiii(200,($3|0),($9|0),($11|0),($12|0));
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index7 = ((($3)) + 4|0);
 $$sreg$field8 = HEAP32[$$sreg$index7>>2]|0;
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  HEAP32[$personalityslot>>2] = $15;
  $personalityslot$index11 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index11>>2] = $16;
  $$field13 = HEAP32[$personalityslot>>2]|0;
  $$index15 = ((($personalityslot)) + 4|0);
  $$field16 = HEAP32[$$index15>>2]|0;
  ___resumeException($$field13|0);
  // unreachable;
 } else {
  HEAP32[$retVal>>2] = $$sreg$field;
  $retVal$index10 = ((($retVal)) + 4|0);
  HEAP32[$retVal$index10>>2] = $$sreg$field8;
  STACKTOP = sp;return;
 }
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_15copy_from_slice17h6c8adea83c562dc0E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $src = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 24|0;
 $arg1 = sp + 16|0;
 $self = sp + 8|0;
 $src = sp;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$arg1>>2] = $2;
 $5 = ((($arg1)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$self>>2] = $6;
 $9 = ((($self)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$arg1>>2]|0;
 $11 = ((($arg1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$src>>2] = $10;
 $13 = ((($src)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$self>>2]|0;
 $15 = ((($self)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$src>>2]|0;
 $18 = ((($src)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_15copy_from_slice17hb1599516f3359a52E($14,$16,$17,$19);
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_15copy_from_slice17hb1599516f3359a52E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 24|0;
 $arg1 = sp + 16|0;
 $self = sp + 8|0;
 $src = sp;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$arg1>>2] = $2;
 $5 = ((($arg1)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$self>>2] = $6;
 $9 = ((($self)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$arg1>>2]|0;
 $11 = ((($arg1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$src>>2] = $10;
 $13 = ((($src)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$self>>2]|0;
 $15 = ((($self)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($14,$16)|0);
 $18 = HEAP32[$src>>2]|0;
 $19 = ((($src)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($18,$20)|0);
 $22 = ($17|0)==($21|0);
 $23 = $22 ^ 1;
 if ($23) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3344);
  // unreachable;
 } else {
  $24 = HEAP32[$src>>2]|0;
  $25 = ((($src)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h37d639d2a1c07dbcE($24,$26)|0);
  $28 = HEAP32[$self>>2]|0;
  $29 = ((($self)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h40f049985213b358E_29($28,$30)|0);
  $32 = HEAP32[$self>>2]|0;
  $33 = ((($self)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($32,$34)|0);
  $36 = $35;
  _memcpy(($31|0),($27|0),($36|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h37d639d2a1c07dbcE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hb75ce83d455facf1E($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field13 = 0, $$field16 = 0, $$field2 = 0, $$field5 = 0, $$index15 = 0, $$sreg$field = 0, $$sreg$field8 = 0, $$sreg$index7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $abi_cast = 0, $arg = 0, $arg0 = 0, $arg1 = 0, $index = 0, $personalityslot = 0, $personalityslot$index11 = 0, $retVal$index10 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp;
 $arg0 = sp + 56|0;
 $arg1 = sp + 48|0;
 $abi_cast = sp + 64|0;
 $self = sp + 40|0;
 $index = sp + 32|0;
 $_7 = sp + 24|0;
 $arg = sp + 16|0;
 $personalityslot = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$abi_cast>>2] = $2;
 ;HEAP32[$arg1>>2]=HEAP32[$abi_cast>>2]|0;
 $5 = HEAP32[$arg0>>2]|0;
 $6 = ((($arg0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$self>>2] = $5;
 $8 = ((($self)) + 4|0);
 HEAP32[$8>>2] = $7;
 $$field = HEAP32[$arg1>>2]|0;
 HEAP32[$index>>2] = $$field;
 $$field2 = HEAP32[$index>>2]|0;
 HEAP32[$_7>>2] = $$field2;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $$field5 = HEAP32[$_7>>2]|0;
 HEAP32[$arg>>2] = $$field5;
 $12 = HEAP32[$arg>>2]|0;
 __THREW__ = 0;
 invoke_viiii(201,($3|0),($12|0),($9|0),($11|0));
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index7 = ((($3)) + 4|0);
 $$sreg$field8 = HEAP32[$$sreg$index7>>2]|0;
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  HEAP32[$personalityslot>>2] = $15;
  $personalityslot$index11 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index11>>2] = $16;
  $$field13 = HEAP32[$personalityslot>>2]|0;
  $$index15 = ((($personalityslot)) + 4|0);
  $$field16 = HEAP32[$$index15>>2]|0;
  ___resumeException($$field13|0);
  // unreachable;
 } else {
  HEAP32[$retVal>>2] = $$sreg$field;
  $retVal$index10 = ((($retVal)) + 4|0);
  HEAP32[$retVal$index10>>2] = $$sreg$field8;
  STACKTOP = sp;return;
 }
}
function __ZN86__LT_core__ops__RangeFrom_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h67e78f6727331afeE($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $abi_cast = 0, $arg = 0, $arg0 = 0, $arg1 = 0, $retVal$index4 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $arg0 = sp + 48|0;
 $abi_cast = sp + 52|0;
 $arg1 = sp + 40|0;
 $self = sp + 32|0;
 $slice = sp + 24|0;
 $_7 = sp + 16|0;
 $arg = sp + 8|0;
 HEAP32[$abi_cast>>2] = $0;
 ;HEAP32[$arg0>>2]=HEAP32[$abi_cast>>2]|0;
 HEAP32[$arg1>>2] = $1;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $2;
 $$field = HEAP32[$arg0>>2]|0;
 HEAP32[$self>>2] = $$field;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$self>>2]|0;
 $10 = HEAP32[$slice>>2]|0;
 $11 = ((($slice)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($10,$12)|0);
 HEAP32[$_7>>2] = $9;
 $14 = ((($_7)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$slice>>2]|0;
 $16 = ((($slice)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($_7)) + 4|0);
 $19 = HEAP32[$_7>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$arg>>2] = $19;
 $21 = ((($arg)) + 4|0);
 HEAP32[$21>>2] = $20;
 __ZN82__LT_core__ops__Range_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17had6a89d3f7df2e84E($3,$arg,$15,$17);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN82__LT_core__ops__Range_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17had6a89d3f7df2e84E($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $retVal$index4 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $arg0 = sp + 32|0;
 $arg1 = sp + 24|0;
 $self = sp + 16|0;
 $slice = sp + 8|0;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;
 HEAP32[$arg1>>2] = $1;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$arg0>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $6;
 $8 = ((($self)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$arg1>>2]|0;
 $10 = ((($arg1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$slice>>2] = $9;
 $12 = ((($slice)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$slice>>2]|0;
 $14 = ((($slice)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h40f049985213b358E_29($13,$15)|0);
 $17 = HEAP32[$self>>2]|0;
 $18 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h3666bfeb514b5534E_32($16,$17)|0);
 $19 = ((($self)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$self>>2]|0;
 $22 = (($20) - ($21))|0;
 __ZN4core5slice18from_raw_parts_mut17h101fab0c1c9324ddE_30($3,$18,$22);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h80ac1ad82cccc24eE_34($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hbd38f9fc458f30d0E_37($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_35($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h53c0df43cabeafe8E_36()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr8null_mut17h53c0df43cabeafe8E_36() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hbd38f9fc458f30d0E_37($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc27d5060612007fdE_38($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc27d5060612007fdE_38($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17he9facb2042878f6bE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $abi_cast = 0, $align = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg2 = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0;
 var $new_cap = 0, $ptr = 0, $self = 0, $self$i = 0, $tmp_ret = 0, $tmp_ret1 = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $tmp_ret = sp + 8|0;
 $tmp_ret1 = sp;
 $abi_cast = sp + 16|0;
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $used_cap = $4;
 $5 = $arg2;
 $needed_extra_cap = $5;
 $6 = (__ZN4core3mem7size_of17h01334bab523b4211E_39()|0);
 $elem_size = $6;
 $7 = (__ZN4core3mem8align_of17ha27b5d1180f16c91E_40()|0);
 $align = $7;
 $8 = $self;
 $arg0$i = $8;
 $9 = $arg0$i;
 $self$i = $9;
 $10 = (__ZN4core3mem7size_of17h01334bab523b4211E_39()|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $_0$i = -1;
 } else {
  $12 = $self$i;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $_0$i = $14;
 }
 $15 = $_0$i;
 $16 = $used_cap;
 $17 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h927b60995810bc3aE($15,$16)|0);
 $18 = $needed_extra_cap;
 $19 = ($17>>>0)>=($18>>>0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $self;
 $21 = $used_cap;
 $22 = $needed_extra_cap;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17h8c76dfd9f4347b77E($tmp_ret,$20,$21,$22);
 $23 = ((($tmp_ret)) + 4|0);
 $24 = HEAP32[$tmp_ret>>2]|0;
 $25 = HEAP32[$23>>2]|0;
 $new_cap = $24;
 $new_alloc_size = $25;
 $26 = $new_alloc_size;
 __ZN5alloc7raw_vec11alloc_guard17h6eacc493ea6b88dbE_41($26);
 $27 = $self;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $new_alloc_size;
  $32 = $align;
  $33 = (__ZN5alloc4heap8allocate17h358fb0ac596fce84E_42($31,$32)|0);
  $ptr = $33;
 } else {
  $34 = $self;
  $35 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h80ac1ad82cccc24eE_34($34)|0);
  $36 = $self;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $elem_size;
  $40 = Math_imul($38, $39)|0;
  $41 = $new_alloc_size;
  $42 = $align;
  $43 = (__ZN5alloc4heap10reallocate17he28f7928a028933bE_43($35,$40,$41,$42)|0);
  $ptr = $43;
 }
 $44 = $ptr;
 $45 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_35($44)|0);
 if ($45) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 $46 = $ptr;
 $47 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17haa9a9970a64771a8E($46)|0);
 HEAP32[$abi_cast>>2] = $47;
 ;HEAP32[$tmp_ret1>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret1>>2]|0;
 $48 = $self;
 HEAP32[$48>>2] = $$field;
 $49 = $new_cap;
 $50 = $self;
 $51 = ((($50)) + 4|0);
 HEAP32[$51>>2] = $49;
 STACKTOP = sp;return;
}
function __ZN4core3mem7size_of17h01334bab523b4211E_39() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17ha27b5d1180f16c91E_40() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h927b60995810bc3aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $rhs = $3;
 $4 = $self;
 $5 = $rhs;
 $6 = (($4) - ($5))|0;
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17h8c76dfd9f4347b77E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_20 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $double_cap = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0, $new_cap = 0, $required_cap = 0, $self = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_9 = sp + 8|0;
 $_20 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $arg2 = $3;
 $4 = $arg0;
 $self = $4;
 $5 = $arg1;
 $used_cap = $5;
 $6 = $arg2;
 $needed_extra_cap = $6;
 $7 = (__ZN4core3mem7size_of17h01334bab523b4211E_39()|0);
 $elem_size = $7;
 $8 = $used_cap;
 $9 = $needed_extra_cap;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h4ded379d8122b068E($_9,$8,$9);
 $10 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hb17817c931012d25E($_9,6551,17)|0);
 $required_cap = $10;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<1;
 $double_cap = $14;
 $15 = $double_cap;
 $16 = $required_cap;
 $17 = (__ZN4core3cmp3max17h6f7732cf62a64ef1E($15,$16)|0);
 $new_cap = $17;
 $18 = $new_cap;
 $19 = $elem_size;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h150d4095fd2b51b1E($_20,$18,$19);
 $20 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hb17817c931012d25E($_20,6551,17)|0);
 $new_alloc_size = $20;
 $21 = $new_cap;
 $22 = $new_alloc_size;
 HEAP32[$0>>2] = $21;
 $23 = ((($0)) + 4|0);
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN5alloc7raw_vec11alloc_guard17h6eacc493ea6b88dbE_41($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $alloc_size = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $alloc_size = $1;
 $2 = (__ZN4core3mem7size_of17hf53622acb0d5c06dE_44()|0);
 $3 = ($2>>>0)<(8);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $alloc_size;
 $5 = ($4>>>0)<=(2147483647);
 $6 = $5 ^ 1;
 if ($6) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN5alloc4heap8allocate17h358fb0ac596fce84E_42($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $align$i = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg1$i = 0, $size = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $size = $2;
 $3 = $arg1;
 $align = $3;
 $4 = $size;
 $5 = $align;
 $arg0$i = $4;
 $arg1$i = $5;
 $6 = $arg0$i;
 $size$i = $6;
 $7 = $arg1$i;
 $align$i = $7;
 $8 = $size;
 $9 = $align;
 $10 = (___rust_allocate($8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN5alloc4heap10reallocate17he28f7928a028933bE_43($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $align$i = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg1$i = 0, $arg2 = 0;
 var $arg3 = 0, $old_size = 0, $ptr = 0, $size = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $arg3 = $3;
 $4 = $arg0;
 $ptr = $4;
 $5 = $arg1;
 $old_size = $5;
 $6 = $arg2;
 $size = $6;
 $7 = $arg3;
 $align = $7;
 $8 = $size;
 $9 = $align;
 $arg0$i = $8;
 $arg1$i = $9;
 $10 = $arg0$i;
 $size$i = $10;
 $11 = $arg1$i;
 $align$i = $11;
 $12 = $ptr;
 $13 = $old_size;
 $14 = $size;
 $15 = $align;
 $16 = (___rust_reallocate($12,$13,$14,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17haa9a9970a64771a8E($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3mem7size_of17hf53622acb0d5c06dE_44() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h4ded379d8122b068E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $arg0 = 0, $arg1 = 0, $b = 0, $other = 0, $self = 0, $tmp_ret = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $other = $4;
 $5 = $self;
 $6 = $other;
 __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_add17h0a154a3b2483f40dE($tmp_ret,$5,$6);
 $7 = ((($tmp_ret)) + 4|0);
 $8 = HEAP32[$tmp_ret>>2]|0;
 $9 = HEAP8[$7>>0]|0;
 $10 = $9&1;
 $a = $8;
 $11 = $10&1;
 $b = $11;
 $12 = $b;
 $13 = $12&1;
 if ($13) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $14 = $a;
  HEAP32[$0>>2] = 1;
  $15 = ((($0)) + 4|0);
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return;
 }
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hb17817c931012d25E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_8 = 0, $arg0 = 0, $arg1 = 0, $msg = 0, $personalityslot = 0, $personalityslot$index6 = 0, $self = 0, $switch1 = 0, $switch2 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 32|0;
 $arg1 = sp + 24|0;
 $self = sp + 16|0;
 $msg = sp + 8|0;
 $personalityslot = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_8 = 0;
 $_8 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 $4 = HEAP32[$arg1>>2]|0;
 $5 = ((($arg1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$msg>>2] = $4;
 $7 = ((($msg)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $switch1 = ($8>>>0)<(1);
 if (!($switch1)) {
  $_8 = 0;
  $16 = ((($self)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $val = $17;
  $18 = $val;
  STACKTOP = sp;return ($18|0);
 }
 $9 = HEAP32[$msg>>2]|0;
 $10 = ((($msg)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 __THREW__ = 0;
 invoke_vii(202,($9|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = ___cxa_find_matching_catch_2()|0;
 $14 = tempRet0;
 HEAP32[$personalityslot>>2] = $13;
 $personalityslot$index6 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index6>>2] = $14;
 $15 = HEAP32[$self>>2]|0;
 $switch2 = ($15>>>0)<(1);
 if (!($switch2)) {
  $19 = $_8;
  $20 = $19&1;
  if ($20) {
   $_8 = 0;
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN4core3cmp3max17h6f7732cf62a64ef1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $v1 = sp + 12|0;
 $v2 = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $0;
 $arg1 = $1;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 $2 = $arg0;
 HEAP32[$v1>>2] = $2;
 $_11 = 1;
 $3 = $arg1;
 HEAP32[$v2>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(203,($v2|0),($v1|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $17;
  $18 = $_11;
  $19 = $18&1;
  if ($19) {
   $_11 = 0;
  }
  $7 = $_10;
  $8 = $7&1;
  if (!($8)) {
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index1 = ((($personalityslot)) + 4|0);
   $$field2 = HEAP32[$$index1>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $_10 = 0;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 if ($4) {
  $_11 = 0;
  $9 = HEAP32[$v2>>2]|0;
  $_0 = $9;
 } else {
  $_10 = 0;
  $10 = HEAP32[$v1>>2]|0;
  $_0 = $10;
 }
 $11 = $_11;
 $12 = $11&1;
 if ($12) {
  $_11 = 0;
 }
 $13 = $_10;
 $14 = $13&1;
 if (!($14)) {
  $15 = $_0;
  STACKTOP = sp;return ($15|0);
 }
 $_10 = 0;
 $15 = $_0;
 STACKTOP = sp;return ($15|0);
}
function __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h150d4095fd2b51b1E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $arg0 = 0, $arg1 = 0, $b = 0, $other = 0, $self = 0, $tmp_ret = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $other = $4;
 $5 = $self;
 $6 = $other;
 __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_mul17h58eec6f20e75b1f8E($tmp_ret,$5,$6);
 $7 = ((($tmp_ret)) + 4|0);
 $8 = HEAP32[$tmp_ret>>2]|0;
 $9 = HEAP8[$7>>0]|0;
 $10 = $9&1;
 $a = $8;
 $11 = $10&1;
 $b = $11;
 $12 = $b;
 $13 = $12&1;
 if ($13) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $14 = $a;
  HEAP32[$0>>2] = 1;
  $15 = ((($0)) + 4|0);
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return;
 }
}
function __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_mul17h58eec6f20e75b1f8E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$arith = 0, $$denom = 0, $$div = 0, $$iszero = 0, $$overflow = 0, $$same = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $a = 0, $arg0 = 0, $arg1 = 0, $b = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $rhs = $4;
 $5 = $self;
 $6 = $rhs;
 $$arith = Math_imul($5, $6)|0;
 $$iszero = ($6|0)==(0);
 $$denom = $$iszero ? 1 : $6;
 $$div = (($$arith>>>0) / ($$denom>>>0))&-1;
 $$same = ($$div|0)!=($5|0);
 $$overflow = $$iszero ? 0 : $$same;
 $7 = $$overflow&1;
 HEAP32[$tmp_ret>>2] = $$arith;
 $8 = ((($tmp_ret)) + 4|0);
 HEAP8[$8>>0] = $7;
 $9 = ((($tmp_ret)) + 4|0);
 $10 = HEAP32[$tmp_ret>>2]|0;
 $11 = HEAP8[$9>>0]|0;
 $12 = $11&1;
 $a = $10;
 $13 = $12&1;
 $b = $13;
 $14 = $a;
 $15 = $b;
 $16 = $15&1;
 HEAP32[$0>>2] = $14;
 $17 = ((($0)) + 4|0);
 $18 = $16&1;
 HEAP8[$17>>0] = $18;
 STACKTOP = sp;return;
}
function __ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_usize_GT_2ge17h360c8f401c674a8dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $other = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = $other;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>=($7>>>0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_add17h0a154a3b2483f40dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $arg0 = 0;
 var $arg1 = 0, $b = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $rhs = $4;
 $5 = $self;
 $6 = $rhs;
 $$arith = (($5) + ($6))|0;
 $$overflow = ($$arith>>>0)<($5>>>0);
 $7 = $$overflow&1;
 HEAP32[$tmp_ret>>2] = $$arith;
 $8 = ((($tmp_ret)) + 4|0);
 HEAP8[$8>>0] = $7;
 $9 = ((($tmp_ret)) + 4|0);
 $10 = HEAP32[$tmp_ret>>2]|0;
 $11 = HEAP8[$9>>0]|0;
 $12 = $11&1;
 $a = $10;
 $13 = $12&1;
 $b = $13;
 $14 = $a;
 $15 = $b;
 $16 = $15&1;
 HEAP32[$0>>2] = $14;
 $17 = ((($0)) + 4|0);
 $18 = $16&1;
 HEAP8[$17>>0] = $18;
 STACKTOP = sp;return;
}
function __ZN4core5slice14from_raw_parts17h0f2b4aaac10b99d1E_45($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_5>>2] = $4;
 $6 = ((($_5)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_5)) + 4|0);
 $8 = HEAP32[$_5>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h6001c059f1509875E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_14 = 0, $arg0 = 0, $arg0$i = 0, $p = 0, $p1 = 0, $ptr = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (__ZN4core3mem7size_of17h01334bab523b4211E_39()|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $p = (1);
 } else {
  $10 = HEAP32[$self>>2]|0;
  $11 = ((($self)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h37d639d2a1c07dbcE($10,$12)|0);
  $p1 = $13;
  $14 = $p1;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17hdca8ac884bf5602dE($14)|0);
  $15 = $p1;
  $p = $15;
 }
 $16 = $p;
 $17 = $p;
 $ptr = $17;
 $18 = $ptr;
 $arg0$i = $18;
 $19 = (__ZN4core3mem7size_of17h01334bab523b4211E_39()|0);
 $20 = ($19|0)==(0);
 $21 = $ptr;
 $22 = HEAP32[$self>>2]|0;
 $23 = ((($self)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc84831c5e60ddb91E($22,$24)|0);
 if ($20) {
  $26 = (($21) + ($25)|0);
  $tmp_ret = $26;
  $27 = $tmp_ret;
  $_14 = $27;
  HEAP32[$0>>2] = $16;
  $29 = $_14;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = $29;
  STACKTOP = sp;return;
 } else {
  $28 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17hac5b20de9e9d3ddaE($21,$25)|0);
  $_14 = $28;
  HEAP32[$0>>2] = $16;
  $29 = $_14;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = $29;
  STACKTOP = sp;return;
 }
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17hdca8ac884bf5602dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr4null17hff2dbbc12e332a91E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17hac5b20de9e9d3ddaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr4null17hff2dbbc12e332a91E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17ha8e0a9fbd8b773bdE($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $abi_cast = 0, $align = 0, $arg0 = 0, $elem_size = 0, $new_alloc_size = 0, $new_cap = 0;
 var $new_cap1 = 0, $new_cap3 = 0, $ptr = 0, $ptr2 = 0, $ptr4 = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_13 = sp + 8|0;
 $tmp_ret = sp;
 $abi_cast = sp + 16|0;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h01334bab523b4211E_39()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 $5 = $4 ^ 1;
 if ($5) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3160);
  // unreachable;
 }
 $6 = (__ZN4core3mem8align_of17ha27b5d1180f16c91E_40()|0);
 $align = $6;
 $7 = $self;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $elem_size;
  $12 = ($11>>>0)>(536870911);
  if ($12) {
   $new_cap1 = 1;
  } else {
   $new_cap1 = 4;
  }
  $34 = $new_cap1;
  $35 = $elem_size;
  $36 = Math_imul($34, $35)|0;
  $37 = $align;
  $38 = (__ZN5alloc4heap8allocate17h358fb0ac596fce84E_42($36,$37)|0);
  $ptr2 = $38;
  $39 = $new_cap1;
  $40 = $ptr2;
  HEAP32[$_13>>2] = $39;
  $41 = ((($_13)) + 4|0);
  HEAP32[$41>>2] = $40;
 } else {
  $13 = $self;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $new_cap3 = $16;
  $17 = $new_cap3;
  $18 = $elem_size;
  $19 = Math_imul($17, $18)|0;
  $new_alloc_size = $19;
  $20 = $new_alloc_size;
  __ZN5alloc7raw_vec11alloc_guard17h6eacc493ea6b88dbE_41($20);
  $21 = $self;
  $22 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h80ac1ad82cccc24eE_34($21)|0);
  $23 = $self;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $elem_size;
  $27 = Math_imul($25, $26)|0;
  $28 = $new_alloc_size;
  $29 = $align;
  $30 = (__ZN5alloc4heap10reallocate17he28f7928a028933bE_43($22,$27,$28,$29)|0);
  $ptr4 = $30;
  $31 = $new_cap3;
  $32 = $ptr4;
  HEAP32[$_13>>2] = $31;
  $33 = ((($_13)) + 4|0);
  HEAP32[$33>>2] = $32;
 }
 $42 = HEAP32[$_13>>2]|0;
 $new_cap = $42;
 $43 = ((($_13)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $ptr = $44;
 $45 = $ptr;
 $46 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_35($45)|0);
 if ($46) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 } else {
  $47 = $ptr;
  $48 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17haa9a9970a64771a8E($47)|0);
  HEAP32[$abi_cast>>2] = $48;
  ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
  $$field = HEAP32[$tmp_ret>>2]|0;
  $49 = $self;
  HEAP32[$49>>2] = $$field;
  $50 = $new_cap;
  $51 = $self;
  $52 = ((($51)) + 4|0);
  HEAP32[$52>>2] = $50;
  STACKTOP = sp;return;
 }
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h13282f4ceb7b811aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h40f049985213b358E_29($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3ptr5write17h27c1e8f7d85ca9c7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arg0 = 0, $arg1 = 0, $dst = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $dst = $2;
 $3 = $arg1;
 $src = $3;
 $4 = $dst;
 $5 = $src;
 HEAP8[$4>>0] = $5;
 STACKTOP = sp;return;
}
function __ZN64__LT_collections__string__String_u20_as_u20_core__fmt__Write_GT_9write_str17h6c7202e020f74d3aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $arg0 = 0, $arg1 = 0, $s = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg1 = sp + 16|0;
 $_0 = sp + 8|0;
 $s = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$s>>2] = $5;
 $8 = ((($s)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $self;
 $10 = HEAP32[$s>>2]|0;
 $11 = ((($s)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __ZN11collections6string6String8push_str17heef4c574fd226446E($9,$10,$12);
 HEAP8[$_0>>0] = 0;
 $13 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($13|0);
}
function __ZN11collections6string6String8push_str17heef4c574fd226446E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $self = 0, $self$i = 0, $string = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $arg0$i = sp + 32|0;
 $self$i = sp + 24|0;
 $arg1 = sp + 16|0;
 $string = sp + 8|0;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = $arg0;
 $self = $5;
 $6 = HEAP32[$arg1>>2]|0;
 $7 = ((($arg1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$string>>2] = $6;
 $9 = ((($string)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $self;
 $11 = HEAP32[$string>>2]|0;
 $12 = ((($string)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$arg0$i>>2] = $11;
 $14 = ((($arg0$i)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$arg0$i>>2]|0;
 $16 = ((($arg0$i)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$self$i>>2] = $15;
 $18 = ((($self$i)) + 4|0);
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$self$i>>2]|0;
 $20 = ((($self$i)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h9c4453839a3f7ce0E($3,$19,$21);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h9ea2fdabdecee2a2E($10,$$sreg$field,$$sreg$field2);
 STACKTOP = sp;return;
}
function __ZN64__LT_collections__string__String_u20_as_u20_core__ops__Deref_GT_5deref17hfe37c7570418f8e6E_47($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0;
 var $lvalue_temp$i = 0, $retVal$index4 = 0, $self = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp;
 $arg0$i = sp + 24|0;
 $v$i = sp + 16|0;
 $lvalue_temp$i = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hb14ecd9176fdd81aE_48($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$arg0$i>>2] = $$sreg$field;
 $4 = ((($arg0$i)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 $5 = HEAP32[$arg0$i>>2]|0;
 $6 = ((($arg0$i)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$v$i>>2] = $5;
 $8 = ((($v$i)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$v$i>>2]|0;
 $10 = ((($v$i)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$lvalue_temp$i>>2] = $9;
 $12 = ((($lvalue_temp$i)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$lvalue_temp$i>>2]|0;
 $14 = ((($lvalue_temp$i)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$retVal>>2] = $13;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hb14ecd9176fdd81aE_48($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $p = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h80ac1ad82cccc24eE_34($3)|0);
 $p = $4;
 $5 = $p;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_35($5)|0);
 $6 = $p;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice14from_raw_parts17h0f2b4aaac10b99d1E_45($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN4drop17hbc72189bfe33c49bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $cond = ($1|0)==(1);
 if (!($cond)) {
  return;
 }
 $2 = ((($0)) + 4|0);
 __ZN4drop17hf6535ba4b994640bE($2);
 return;
}
function __ZN4drop17hf6535ba4b994640bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 0:  {
  $2 = ((($0)) + 4|0);
  __ZN4drop17hf176c6534ecd4046E($2);
  return;
  break;
 }
 case 1:  {
  return;
  break;
 }
 case 2:  {
  $3 = ((($0)) + 4|0);
  __ZN4drop17h168a6168c579fd89E($3);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __ZN4drop17h4f741961d931a54eE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(204,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h4f741961d931a54eE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h4f741961d931a54eE($0);
  STACKTOP = sp;return;
 }
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h02e82e970be211cdE_49($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $drop = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $drop = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h0c3befd6c0903ed0E_51($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$drop>>2] = $$sreg$field;
 $4 = ((($drop)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h4f741961d931a54eE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h45a5e44a709bd7beE($0);
 return;
}
function __ZN4drop17h45a5e44a709bd7beE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(205,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h45a5e44a709bd7beE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h45a5e44a709bd7beE($0);
  STACKTOP = sp;return;
 }
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h32cd9b80ae08eae3E_50($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h01334bab523b4211E_39()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17ha27b5d1180f16c91E_40()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hbd38f9fc458f30d0E_37($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E_20($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h45a5e44a709bd7beE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h0c3befd6c0903ed0E_51($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h87e2ccedc14ca01bE_33($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN83__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hfdae0c8ab8850b51E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field5 = 0, $$field8 = 0, $$index4 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_29 = 0, $_36 = 0;
 var $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $begin = 0, $cap = 0, $end = 0, $personalityslot = 0, $personalityslot$index11 = 0, $self = 0, $self$i = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp;
 $arg0 = sp + 56|0;
 $self = sp + 40|0;
 $_29 = sp + 24|0;
 $personalityslot = sp + 16|0;
 $tmp_ret1 = sp + 8|0;
 $abi_cast = sp + 68|0;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 $_36 = 0;
 $_36 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(206,($2|0),($self|0));
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   __THREW__ = 0;
   $5 = (invoke_iii(207,($$sreg$field|0),($$sreg$field2|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    $begin = $5;
    $8 = $begin;
    __THREW__ = 0;
    (invoke_ii(208,($8|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     __THREW__ = 0;
     $11 = (invoke_i(209)|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if (!($13)) {
      $14 = ($11|0)==(0);
      $15 = $begin;
      if ($14) {
       __THREW__ = 0;
       $16 = (invoke_ii(210,($self|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        break;
       }
       $22 = (($15) + ($16)|0);
       $tmp_ret = $22;
       $23 = $tmp_ret;
       $end = $23;
      } else {
       __THREW__ = 0;
       $19 = (invoke_ii(210,($self|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        break;
       }
       __THREW__ = 0;
       $24 = (invoke_iii(211,($15|0),($19|0))|0);
       $25 = __THREW__; __THREW__ = 0;
       $26 = $25&1;
       if ($26) {
        break;
       }
       $end = $24;
      }
      $arg0$i = $self;
      $27 = $arg0$i;
      $self$i = $27;
      __THREW__ = 0;
      $28 = (invoke_i(209)|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       $31 = ($28|0)==(0);
       if ($31) {
        $_0$i = -1;
       } else {
        $32 = $self$i;
        $33 = ((($32)) + 4|0);
        $34 = HEAP32[$33>>2]|0;
        $_0$i = $34;
       }
       $35 = $_0$i;
       $cap = $35;
       $_36 = 0;
       ;HEAP32[$_29>>2]=HEAP32[$self>>2]|0;HEAP32[$_29+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_29+8>>2]=HEAP32[$self+8>>2]|0;
       __THREW__ = 0;
       invoke_vi(212,($_29|0));
       $36 = __THREW__; __THREW__ = 0;
       $37 = $36&1;
       if (!($37)) {
        $38 = $begin;
        __THREW__ = 0;
        $39 = (invoke_ii(213,($38|0))|0);
        $40 = __THREW__; __THREW__ = 0;
        $41 = $40&1;
        if (!($41)) {
         HEAP32[$abi_cast>>2] = $39;
         ;HEAP32[$tmp_ret1>>2]=HEAP32[$abi_cast>>2]|0;
         $$field8 = HEAP32[$tmp_ret1>>2]|0;
         $42 = $cap;
         $43 = $begin;
         $44 = $end;
         HEAP32[$0>>2] = $$field8;
         $45 = ((($0)) + 4|0);
         HEAP32[$45>>2] = $42;
         $46 = ((($0)) + 8|0);
         HEAP32[$46>>2] = $43;
         $47 = ((($0)) + 12|0);
         HEAP32[$47>>2] = $44;
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $48 = ___cxa_find_matching_catch_2()|0;
 $49 = tempRet0;
 HEAP32[$personalityslot>>2] = $48;
 $personalityslot$index11 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index11>>2] = $49;
 $50 = $_36;
 $51 = $50&1;
 if (!($51)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index4 = ((($personalityslot)) + 4|0);
  $$field5 = HEAP32[$$index4>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_36 = 0;
 __ZN4drop17hcce073e3bd646d8cE($self);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h6b74da9df5f54aa5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$field6 = 0, $$field9 = 0, $$index1 = 0, $$index8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$i = 0, $_10$i5 = 0, $_13 = 0, $_20 = 0, $_9$i = 0, $_9$i4 = 0, $arg0 = 0, $arg0$i = 0, $arg0$i1 = 0, $old = 0, $personalityslot$i = 0, $personalityslot$i$index4 = 0;
 var $personalityslot$i6 = 0, $personalityslot$i6$index11 = 0, $self = 0, $src$i = 0, $src$i2 = 0, $tmp$i = 0, $tmp$i3 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $tmp$i3 = sp + 136|0;
 $_9$i4 = sp + 112|0;
 $personalityslot$i6 = sp + 104|0;
 $tmp$i = sp + 80|0;
 $_9$i = sp + 56|0;
 $personalityslot$i = sp + 48|0;
 $_13 = sp + 24|0;
 $_20 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $self;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($8|0);
 if ($9) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 }
 $10 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $11 = ($10|0)==(0);
 $12 = $self;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 if ($11) {
  $15 = ((($14)) + 1|0);
  $tmp_ret = $15;
  $16 = $tmp_ret;
  $17 = $self;
  $18 = ((($17)) + 8|0);
  HEAP32[$18>>2] = $16;
  $arg0$i = (1);
  $_10$i = 0;
  $19 = $arg0$i;
  $src$i = $19;
  __THREW__ = 0;
  invoke_vi(214,($tmp$i|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $_10$i = 1;
   $36 = $src$i;
   ;HEAP32[$tmp$i>>2]=HEAP32[$36>>2]|0;HEAP32[$tmp$i+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$tmp$i+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$tmp$i+12>>2]=HEAP32[$36+12>>2]|0;HEAP32[$tmp$i+16>>2]=HEAP32[$36+16>>2]|0;
   $_10$i = 0;
   ;HEAP32[$_9$i>>2]=HEAP32[$tmp$i>>2]|0;HEAP32[$_9$i+4>>2]=HEAP32[$tmp$i+4>>2]|0;HEAP32[$_9$i+8>>2]=HEAP32[$tmp$i+8>>2]|0;HEAP32[$_9$i+12>>2]=HEAP32[$tmp$i+12>>2]|0;HEAP32[$_9$i+16>>2]=HEAP32[$tmp$i+16>>2]|0;
   ;HEAP32[$_13>>2]=HEAP32[$_9$i>>2]|0;HEAP32[$_13+4>>2]=HEAP32[$_9$i+4>>2]|0;HEAP32[$_13+8>>2]=HEAP32[$_9$i+8>>2]|0;HEAP32[$_13+12>>2]=HEAP32[$_9$i+12>>2]|0;HEAP32[$_13+16>>2]=HEAP32[$_9$i+16>>2]|0;
   HEAP32[$0>>2] = 1;
   $37 = ((($0)) + 4|0);
   ;HEAP32[$37>>2]=HEAP32[$_13>>2]|0;HEAP32[$37+4>>2]=HEAP32[$_13+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$_13+8>>2]|0;HEAP32[$37+12>>2]=HEAP32[$_13+12>>2]|0;HEAP32[$37+16>>2]=HEAP32[$_13+16>>2]|0;
   STACKTOP = sp;return;
  }
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  HEAP32[$personalityslot$i>>2] = $32;
  $personalityslot$i$index4 = ((($personalityslot$i)) + 4|0);
  HEAP32[$personalityslot$i$index4>>2] = $33;
  $34 = $_10$i;
  $35 = $34&1;
  if (!($35)) {
   $$field = HEAP32[$personalityslot$i>>2]|0;
   $$index1 = ((($personalityslot$i)) + 4|0);
   $$field2 = HEAP32[$$index1>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $_10$i = 0;
  __ZN4drop17h5655a31cee677dd4E($tmp$i);
  $$field = HEAP32[$personalityslot$i>>2]|0;
  $$index1 = ((($personalityslot$i)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  $old = $14;
  $22 = $self;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h16eb96d23db2ec06E($24,1)|0);
  $26 = $self;
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = $25;
  $28 = $old;
  $arg0$i1 = $28;
  $_10$i5 = 0;
  $29 = $arg0$i1;
  $src$i2 = $29;
  __THREW__ = 0;
  invoke_vi(214,($tmp$i3|0));
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if (!($31)) {
   $_10$i5 = 1;
   $42 = $src$i2;
   ;HEAP32[$tmp$i3>>2]=HEAP32[$42>>2]|0;HEAP32[$tmp$i3+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$tmp$i3+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$tmp$i3+12>>2]=HEAP32[$42+12>>2]|0;HEAP32[$tmp$i3+16>>2]=HEAP32[$42+16>>2]|0;
   $_10$i5 = 0;
   ;HEAP32[$_9$i4>>2]=HEAP32[$tmp$i3>>2]|0;HEAP32[$_9$i4+4>>2]=HEAP32[$tmp$i3+4>>2]|0;HEAP32[$_9$i4+8>>2]=HEAP32[$tmp$i3+8>>2]|0;HEAP32[$_9$i4+12>>2]=HEAP32[$tmp$i3+12>>2]|0;HEAP32[$_9$i4+16>>2]=HEAP32[$tmp$i3+16>>2]|0;
   ;HEAP32[$_20>>2]=HEAP32[$_9$i4>>2]|0;HEAP32[$_20+4>>2]=HEAP32[$_9$i4+4>>2]|0;HEAP32[$_20+8>>2]=HEAP32[$_9$i4+8>>2]|0;HEAP32[$_20+12>>2]=HEAP32[$_9$i4+12>>2]|0;HEAP32[$_20+16>>2]=HEAP32[$_9$i4+16>>2]|0;
   HEAP32[$0>>2] = 1;
   $43 = ((($0)) + 4|0);
   ;HEAP32[$43>>2]=HEAP32[$_20>>2]|0;HEAP32[$43+4>>2]=HEAP32[$_20+4>>2]|0;HEAP32[$43+8>>2]=HEAP32[$_20+8>>2]|0;HEAP32[$43+12>>2]=HEAP32[$_20+12>>2]|0;HEAP32[$43+16>>2]=HEAP32[$_20+16>>2]|0;
   STACKTOP = sp;return;
  }
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  HEAP32[$personalityslot$i6>>2] = $38;
  $personalityslot$i6$index11 = ((($personalityslot$i6)) + 4|0);
  HEAP32[$personalityslot$i6$index11>>2] = $39;
  $40 = $_10$i5;
  $41 = $40&1;
  if (!($41)) {
   $$field6 = HEAP32[$personalityslot$i6>>2]|0;
   $$index8 = ((($personalityslot$i6)) + 4|0);
   $$field9 = HEAP32[$$index8>>2]|0;
   ___resumeException($$field6|0);
   // unreachable;
  }
  $_10$i5 = 0;
  __ZN4drop17h5655a31cee677dd4E($tmp$i3);
  $$field6 = HEAP32[$personalityslot$i6>>2]|0;
  $$index8 = ((($personalityslot$i6)) + 4|0);
  $$field9 = HEAP32[$$index8>>2]|0;
  ___resumeException($$field6|0);
  // unreachable;
 }
}
function __ZN4drop17h76015c8f4ddeadd4E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(215,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h76015c8f4ddeadd4E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h76015c8f4ddeadd4E($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17h8d9dbcdc390e199dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $cond = ($1|0)==(1);
 if (!($cond)) {
  return;
 }
 $2 = ((($0)) + 4|0);
 __ZN4drop17h5655a31cee677dd4E($2);
 return;
}
function __ZN4drop17h170fadfae1d8e329E($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $1 = 0, $2 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 $$expand_i1_val = $2&1;
 $$expand_i1_val2 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val2&255);
 if ($switch) {
  return;
 }
 __ZN4drop17hcce073e3bd646d8cE($0);
 return;
}
function __ZN4drop17hcce073e3bd646d8cE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(216,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17hcce073e3bd646d8cE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hcce073e3bd646d8cE($0);
  STACKTOP = sp;return;
 }
}
function __ZN4drop17h5655a31cee677dd4E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 0:  {
  return;
  break;
 }
 case 1:  {
  $2 = ((($0)) + 12|0);
  __ZN4drop17h614c7861e005ad67E($2);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __ZN4drop17h614c7861e005ad67E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(217,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h614c7861e005ad67E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h614c7861e005ad67E($0);
  STACKTOP = sp;return;
 }
}
function __ZN58__LT_alloc__rc__Rc_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h2d3c297eb02d11a4E_52($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0;
 var $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE_53($2)|0);
 $4 = HEAP32[$3>>2]|0;
 $ptr = $4;
 $5 = $self;
 __ZN5alloc2rc8RcBoxPtr10dec_strong17hfe12e4f1e27e6aafE_54($5);
 $6 = $self;
 $7 = (__ZN5alloc2rc8RcBoxPtr6strong17hb0fc32cc2c2eeee7E_55($6)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $ptr;
 $10 = ((($9)) + 8|0);
 __ZN4drop17h68ead95707fd6252E($10);
 $11 = $self;
 __ZN5alloc2rc8RcBoxPtr8dec_weak17h1364e1391b8e6eeeE_56($11);
 $12 = $self;
 $13 = (__ZN5alloc2rc8RcBoxPtr4weak17h09b87e21d46b95efE_57($12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $ptr;
 $16 = $ptr;
 $17 = (__ZN4core3mem11size_of_val17h529f813afa514346E_58($16)|0);
 $18 = $ptr;
 $19 = (__ZN4core3mem12align_of_val17hccdf51f1d3bcb1bfE_59($18)|0);
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E_20($15,$17,$19);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h614c7861e005ad67E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE_53($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h5c27451fcfdce673E_66($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN5alloc2rc8RcBoxPtr10dec_strong17hfe12e4f1e27e6aafE_54($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE_60($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE_53($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $self;
 $10 = (__ZN5alloc2rc8RcBoxPtr6strong17hb0fc32cc2c2eeee7E_55($9)|0);
 $11 = (($10) - 1)|0;
 __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17h5e039cab79421a09E_64($8,$11);
 STACKTOP = sp;return;
}
function __ZN5alloc2rc8RcBoxPtr6strong17hb0fc32cc2c2eeee7E_55($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE_60($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE_53($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17h291309cf02aab594E_61($8)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN4drop17h68ead95707fd6252E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZN4drop17h335e7aad77d1f588E($1);
 return;
}
function __ZN5alloc2rc8RcBoxPtr8dec_weak17h1364e1391b8e6eeeE_56($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE_60($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE_53($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = $self;
 $11 = (__ZN5alloc2rc8RcBoxPtr4weak17h09b87e21d46b95efE_57($10)|0);
 $12 = (($11) - 1)|0;
 __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17h5e039cab79421a09E_64($9,$12);
 STACKTOP = sp;return;
}
function __ZN5alloc2rc8RcBoxPtr4weak17h09b87e21d46b95efE_57($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE_60($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE_53($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = (__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17h291309cf02aab594E_61($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3mem11size_of_val17h529f813afa514346E_58($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $tmp_ret = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $val = $1;
 $tmp_ret = 20;
 $2 = $tmp_ret;
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3mem12align_of_val17hccdf51f1d3bcb1bfE_59($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $tmp_ret = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $val = $1;
 $tmp_ret = 4;
 $2 = $tmp_ret;
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE_60($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr4null17h80bcfd92278ac796E_63()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17h291309cf02aab594E_61($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17hb496313349b05f7eE_62($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17hb496313349b05f7eE_62($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN4core3ptr4null17h80bcfd92278ac796E_63() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17h5e039cab79421a09E_64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $value = $3;
 $4 = $value;
 $5 = $self;
 $6 = (__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17hb496313349b05f7eE_62($5)|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN4drop17h335e7aad77d1f588E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hf525f3e71d199debE($0);
 return;
}
function __ZN4drop17hf525f3e71d199debE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __ZN4drop17hce174935c4303415E($0);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $8 = ($6|0)!=(0);
 if (!($8)) {
  return;
 }
 __ZN5alloc4heap13exchange_free17h5720505cfcfb7278E_65($1,$6,$7);
 return;
}
function __ZN4drop17hce174935c4303415E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_vi[$3 & 511]($4);
 return;
}
function __ZN5alloc4heap13exchange_free17h5720505cfcfb7278E_65($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $align = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $old_size = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $old_size = $4;
 $5 = $arg2;
 $align = $5;
 $6 = $ptr;
 $7 = $old_size;
 $8 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E_20($6,$7,$8);
 STACKTOP = sp;return;
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h5c27451fcfdce673E_66($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h402c6ed143bb9518E_67($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $drop = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $drop = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h49da44de11c191c5E_73($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$drop>>2] = $$sreg$field;
 $4 = ((($drop)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 __ZN4drop17h25ee7241b619925eE($drop);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17hcce073e3bd646d8cE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h43148375c9029f4cE($0);
 return;
}
function __ZN4drop17h43148375c9029f4cE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(218,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h43148375c9029f4cE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h43148375c9029f4cE($0);
  STACKTOP = sp;return;
 }
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h8d254c1a1463c9c8E_68($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17hebc60f0adf02a83fE_70()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h9851ebce34f52a0cE_71($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E_20($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h43148375c9029f4cE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3mem7size_of17hf25428224e4aa658E_69() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 20;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17hebc60f0adf02a83fE_70() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h9851ebce34f52a0cE_71($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2644aa664caa626bE_72($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2644aa664caa626bE_72($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h49da44de11c191c5E_73($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h46d68558d235d73bE_74($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN4drop17h25ee7241b619925eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*20)|0)|0);
 $6 = $1;
 while(1) {
  $5 = ($6|0)!=($4|0);
  if (!($5)) {
   break;
  }
  __ZN4drop17h5655a31cee677dd4E($6);
  $7 = ((($6)) + 20|0);
  $6 = $7;
 }
 return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h46d68558d235d73bE_74($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hf85ec2338e76a049E_75($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h107a40b19806ce4dE_76($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17hcd2ecb3f4ee72723E_77($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hf85ec2338e76a049E_75($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h9851ebce34f52a0cE_71($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h107a40b19806ce4dE_76($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h691e954f77d68d23E_78()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core5slice18from_raw_parts_mut17hcd2ecb3f4ee72723E_77($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core3ptr8null_mut17h691e954f77d68d23E_78() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN71__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h374624c53c04d952E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_20 = 0, $_x = 0, $arg0 = 0, $iter = 0, $personalityslot = 0, $personalityslot$index6 = 0;
 var $personalityslot$index8 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $iter = sp + 64|0;
 $_10 = sp + 40|0;
 $_x = sp + 16|0;
 $_15 = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $0;
 $_20 = 0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core4iter8iterator8Iterator6by_ref17hf4da888a0fbc8dc5E($2)|0);
 $4 = (__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hcc7d7be43f62d086E($3)|0);
 HEAP32[$iter>>2] = $4;
 while(1) {
  $_20 = 1;
  __ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17hcc96c36c4d4cf6fdE($_10,$iter);
  $5 = HEAP32[$_10>>2]|0;
  $switch2 = ($5>>>0)<(1);
  $_20 = 0;
  if ($switch2) {
   label = 4;
   break;
  }
  $8 = ((($_10)) + 4|0);
  ;HEAP32[$_x>>2]=HEAP32[$8>>2]|0;HEAP32[$_x+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$_x+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$_x+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$_x+16>>2]=HEAP32[$8+16>>2]|0;
  __THREW__ = 0;
  invoke_vi(180,($_x|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 13;
   break;
  }
  $19 = HEAP32[$_10>>2]|0;
  $switch = ($19>>>0)<(1);
  if (!($switch)) {
   continue;
  }
  __THREW__ = 0;
  invoke_vi(177,($_10|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   label = 14;
   break;
  }
 }
 do {
  if ((label|0) == 4) {
   __THREW__ = 0;
   invoke_vi(177,($_10|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    label = 14;
   } else {
    $11 = $self;
    $12 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h0972784d1c6e1cddE($11)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $self;
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h22040186c43e3994E($_15,$13,$16);
    __THREW__ = 0;
    invoke_vi(219,($_15|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     label = 14;
    } else {
     STACKTOP = sp;return;
    }
   }
  }
  else if ((label|0) == 13) {
   $25 = ___cxa_find_matching_catch_2()|0;
   $26 = tempRet0;
   HEAP32[$personalityslot>>2] = $25;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $26;
   $27 = HEAP32[$_10>>2]|0;
   $switch1 = ($27>>>0)<(1);
   if ($switch1) {
    __ZN4drop17h8d9dbcdc390e199dE($_10);
    break;
   }
   $20 = $_20;
   $21 = $20&1;
   if ($21) {
    $_20 = 0;
    $22 = ((($_10)) + 4|0);
    __ZN4drop17h5655a31cee677dd4E($22);
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  HEAP32[$personalityslot>>2] = $28;
  $personalityslot$index8 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index8>>2] = $29;
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN13drop_contents17h76015c8f4ddeadd4E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core4iter8iterator8Iterator6by_ref17hf4da888a0fbc8dc5E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hcc7d7be43f62d086E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17hcc96c36c4d4cf6fdE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = HEAP32[$3>>2]|0;
 __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h6b74da9df5f54aa5E($0,$4);
 STACKTOP = sp;return;
}
function __ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h0972784d1c6e1cddE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2644aa664caa626bE_72($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h22040186c43e3994E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $cap = 0, $ptr = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $abi_cast = sp + 4|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $cap = $4;
 $5 = $ptr;
 $6 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h95bdfd569abcc3b8E($5)|0);
 HEAP32[$abi_cast>>2] = $6;
 ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret>>2]|0;
 $7 = $cap;
 HEAP32[$0>>2] = $$field;
 $8 = ((($0)) + 4|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h95bdfd569abcc3b8E($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h16eb96d23db2ec06E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + (($5*20)|0)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3mem13uninitialized17he1d5f0b431aa3e0dE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17hfccf1eaec4906f8eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h450411eab351f322E($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17h2c5bca2b5361c61aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h79758bab893f2486E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + (($5*20)|0)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3mem6forget17hd592a4aec2ffd3ddE($0) {
 $0 = $0|0;
 var $_3 = 0, $arg0 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 32|0;
 $t = sp + 16|0;
 $_3 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$t>>2]=HEAP32[$arg0>>2]|0;HEAP32[$t+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$t+8>>2]=HEAP32[$arg0+8>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$t>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$t+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN35__LT_core__ptr__Shared_LT_T_GT__GT_3new17ha3070fc45ea257f8E($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h450411eab351f322E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN69__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h79bca17c19f558bdE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $arg0 = $1;
 $3 = $arg0;
 $self = $3;
 $4 = $self;
 __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h445771a3a2f6895dE($2,$4);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_6to_vec17h41162272b34d2024E($0,$$sreg$field,$$sreg$field2);
 STACKTOP = sp;return;
}
function __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h445771a3a2f6895dE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $p = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hf85ec2338e76a049E_75($3)|0);
 $p = $4;
 $5 = $p;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h107a40b19806ce4dE_76($5)|0);
 $6 = $p;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice14from_raw_parts17h9aaec7bcbc8683bcE($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_6to_vec17h41162272b34d2024E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN11collections5slice4hack6to_vec17hf720a4762016be9fE($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN11collections5slice4hack6to_vec17hf720a4762016be9fE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_9 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $s = 0, $vector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg0 = sp + 48|0;
 $s = sp + 40|0;
 $vector = sp + 24|0;
 $_9 = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_10 = 0;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$s>>2] = $4;
 $7 = ((($s)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$s>>2]|0;
 $9 = ((($s)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_iii(220,($8|0),($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  __THREW__ = 0;
  invoke_vii(221,($vector|0),($11|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if (!($15)) {
   $_10 = 1;
   $16 = HEAP32[$s>>2]|0;
   $17 = ((($s)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   __THREW__ = 0;
   invoke_viii(222,($vector|0),($16|0),($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    $_10 = 0;
    ;HEAP32[$_9>>2]=HEAP32[$vector>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$vector+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$vector+8>>2]|0;
    ;HEAP32[$0>>2]=HEAP32[$_9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_9+8>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $21 = ___cxa_find_matching_catch_2()|0;
 $22 = tempRet0;
 HEAP32[$personalityslot>>2] = $21;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $22;
 $23 = $_10;
 $24 = $23&1;
 if (!($24)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_10 = 0;
 __ZN4drop17hcce073e3bd646d8cE($vector);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h3e754df2b15e50f6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h90b80d8b39aabb76E($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_13with_capacity17h89e72f54edb7b8e6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field$field = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $capacity = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $2 = $arg0;
 $capacity = $2;
 $3 = $capacity;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_13with_capacity17h5e14c33c0580aa3eE($tmp_ret,$3);
 $4 = ((($tmp_ret)) + 4|0);
 $$field$field = HEAP32[$tmp_ret>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$0>>2] = $$field$field;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h3d170cee914e2603E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg1 = sp + 16|0;
 $other = sp + 8|0;
 $_6 = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$other>>2] = $5;
 $8 = ((($other)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $self;
 $10 = HEAP32[$other>>2]|0;
 $11 = ((($other)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17h08aa987cb327af58E($_6,$10,$12);
 __ZN112__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT__RF__u27_a_u20_T_C__u20_I_GT__GT_11spec_extend17hfdc810a41ee93176E($9,$_6);
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17h08aa987cb327af58E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h8212eef804f217ceE($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN112__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT__RF__u27_a_u20_T_C__u20_I_GT__GT_11spec_extend17hfdc810a41ee93176E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $_7 = 0, $arg0 = 0, $arg1 = 0, $iterator = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg1 = sp + 32|0;
 $iterator = sp + 24|0;
 $_6 = sp + 16|0;
 $_7 = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $2 = $arg0;
 $self = $2;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;
 $3 = $self;
 ;HEAP32[$_7>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$iterator+4>>2]|0;
 __THREW__ = 0;
 invoke_vii(223,($_6|0),($_7|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __THREW__ = 0;
  invoke_vii(224,($3|0),($_6|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   STACKTOP = sp;return;
  }
 }
 $8 = ___cxa_find_matching_catch_2()|0;
 $9 = tempRet0;
 HEAP32[$personalityslot>>2] = $8;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $9;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core4iter8iterator8Iterator6cloned17h712ca6cd9baaf425E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $_3 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$self>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_11spec_extend17h981c98029888b624E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field6 = 0, $$index5 = 0, $$sreg$field = 0, $$sreg$field9 = 0, $$sreg$index8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $8 = 0, $9 = 0, $_29 = 0, $_30 = 0, $_32 = 0, $_38 = 0, $_45 = 0, $_46 = 0, $_47 = 0, $_48 = 0, $_7 = 0, $additional = 0, $arg0 = 0, $arg1 = 0, $element = 0, $high = 0, $high_value = 0, $iter = 0, $iterator = 0, $local_len = 0;
 var $low = 0, $personalityslot = 0, $personalityslot$index11 = 0, $personalityslot$index13 = 0, $personalityslot$index15 = 0, $personalityslot$index17 = 0, $personalityslot$index19 = 0, $ptr = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $switch3 = 0, $switch4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $2 = sp;
 $arg1 = sp + 160|0;
 $iterator = sp + 152|0;
 $high = sp + 144|0;
 $_7 = sp + 128|0;
 $local_len = sp + 120|0;
 $_29 = sp + 112|0;
 $_30 = sp + 104|0;
 $iter = sp + 96|0;
 $_32 = sp + 72|0;
 $element = sp + 48|0;
 $_38 = sp + 24|0;
 $_45 = sp + 16|0;
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $_46 = 0;
 $_47 = 0;
 $_48 = 0;
 $3 = $arg0;
 $self = $3;
 $_46 = 1;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;
 __THREW__ = 0;
 invoke_vii(225,($_7|0),($iterator|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   label = 32;
  } else {
   $6 = HEAP32[$_7>>2]|0;
   $low = $6;
   $7 = ((($_7)) + 4|0);
   ;HEAP32[$high>>2]=HEAP32[$7>>2]|0;HEAP32[$high+4>>2]=HEAP32[$7+4>>2]|0;
   $8 = HEAP32[$high>>2]|0;
   $switch = ($8>>>0)<(1);
   if (!($switch)) {
    $9 = ((($high)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $high_value = $10;
   }
   $11 = HEAP32[$high>>2]|0;
   $switch1 = ($11>>>0)<(1);
   if ($switch1) {
    $12 = $self;
    $_46 = 0;
    ;HEAP32[$_45>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_45+4>>2]=HEAP32[$iterator+4>>2]|0;
    __THREW__ = 0;
    invoke_vii(226,($12|0),($_45|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     label = 32;
     break;
    }
    STACKTOP = sp;return;
   }
   $15 = ((($high)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $additional = $16;
   $17 = $self;
   $18 = $additional;
   __THREW__ = 0;
   invoke_vii(227,($17|0),($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 32;
   } else {
    $21 = $self;
    __THREW__ = 0;
    invoke_vii(206,($2|0),($21|0));
    $$sreg$field = HEAP32[$2>>2]|0;
    $$sreg$index8 = ((($2)) + 4|0);
    $$sreg$field9 = HEAP32[$$sreg$index8>>2]|0;
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 32;
    } else {
     __THREW__ = 0;
     $24 = (invoke_iii(207,($$sreg$field|0),($$sreg$field9|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 32;
     } else {
      $27 = $self;
      __THREW__ = 0;
      $28 = (invoke_ii(210,($27|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       label = 32;
      } else {
       __THREW__ = 0;
       $31 = (invoke_iii(211,($24|0),($28|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        label = 32;
       } else {
        $ptr = $31;
        $34 = $self;
        $35 = ((($34)) + 8|0);
        __THREW__ = 0;
        invoke_vii(228,($local_len|0),($35|0));
        $36 = __THREW__; __THREW__ = 0;
        $37 = $36&1;
        do {
         if ($37) {
          label = 33;
         } else {
          $_47 = 1;
          $_46 = 0;
          ;HEAP32[$_30>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_30+4>>2]=HEAP32[$iterator+4>>2]|0;
          __THREW__ = 0;
          invoke_vii(229,($_29|0),($_30|0));
          $38 = __THREW__; __THREW__ = 0;
          $39 = $38&1;
          if ($39) {
           label = 33;
          } else {
           ;HEAP32[$iter>>2]=HEAP32[$_29>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$_29+4>>2]|0;
           while(1) {
            __THREW__ = 0;
            invoke_vii(230,($_32|0),($iter|0));
            $40 = __THREW__; __THREW__ = 0;
            $41 = $40&1;
            if ($41) {
             label = 34;
             break;
            }
            $_48 = 1;
            $42 = HEAP32[$_32>>2]|0;
            $switch2 = ($42>>>0)<(1);
            $_48 = 0;
            if ($switch2) {
             label = 18;
             break;
            }
            $45 = ((($_32)) + 4|0);
            ;HEAP32[$element>>2]=HEAP32[$45>>2]|0;HEAP32[$element+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$element+8>>2]=HEAP32[$45+8>>2]|0;HEAP32[$element+12>>2]=HEAP32[$45+12>>2]|0;HEAP32[$element+16>>2]=HEAP32[$45+16>>2]|0;
            $46 = $ptr;
            ;HEAP32[$_38>>2]=HEAP32[$element>>2]|0;HEAP32[$_38+4>>2]=HEAP32[$element+4>>2]|0;HEAP32[$_38+8>>2]=HEAP32[$element+8>>2]|0;HEAP32[$_38+12>>2]=HEAP32[$element+12>>2]|0;HEAP32[$_38+16>>2]=HEAP32[$element+16>>2]|0;
            __THREW__ = 0;
            invoke_vii(231,($46|0),($_38|0));
            $47 = __THREW__; __THREW__ = 0;
            $48 = $47&1;
            if ($48) {
             label = 35;
             break;
            }
            $49 = $ptr;
            __THREW__ = 0;
            $50 = (invoke_iii(211,($49|0),1)|0);
            $51 = __THREW__; __THREW__ = 0;
            $52 = $51&1;
            if ($52) {
             label = 35;
             break;
            }
            $ptr = $50;
            __THREW__ = 0;
            invoke_vii(232,($local_len|0),1);
            $53 = __THREW__; __THREW__ = 0;
            $54 = $53&1;
            if ($54) {
             label = 35;
             break;
            }
            $55 = HEAP32[$_32>>2]|0;
            $switch3 = ($55>>>0)<(1);
            if (!($switch3)) {
             continue;
            }
            __THREW__ = 0;
            invoke_vi(177,($_32|0));
            $65 = __THREW__; __THREW__ = 0;
            $66 = $65&1;
            if ($66) {
             label = 34;
             break;
            }
           }
           if ((label|0) == 18) {
            __THREW__ = 0;
            invoke_vi(177,($_32|0));
            $43 = __THREW__; __THREW__ = 0;
            $44 = $43&1;
            if ($44) {
             $76 = ___cxa_find_matching_catch_2()|0;
             $77 = tempRet0;
             HEAP32[$personalityslot>>2] = $76;
             $personalityslot$index19 = ((($personalityslot)) + 4|0);
             HEAP32[$personalityslot$index19>>2] = $77;
             $$field = HEAP32[$personalityslot>>2]|0;
             $$index5 = ((($personalityslot)) + 4|0);
             $$field6 = HEAP32[$$index5>>2]|0;
             ___resumeException($$field|0);
             // unreachable;
            } else {
             $_47 = 0;
             __THREW__ = 0;
             invoke_vi(233,($local_len|0));
             $56 = __THREW__; __THREW__ = 0;
             $57 = $56&1;
             if ($57) {
              label = 32;
              break L1;
             }
             STACKTOP = sp;return;
            }
           }
           else if ((label|0) == 34) {
            $71 = ___cxa_find_matching_catch_2()|0;
            $72 = tempRet0;
            HEAP32[$personalityslot>>2] = $71;
            $personalityslot$index15 = ((($personalityslot)) + 4|0);
            HEAP32[$personalityslot$index15>>2] = $72;
            break;
           }
           else if ((label|0) == 35) {
            $73 = ___cxa_find_matching_catch_2()|0;
            $74 = tempRet0;
            HEAP32[$personalityslot>>2] = $73;
            $personalityslot$index17 = ((($personalityslot)) + 4|0);
            HEAP32[$personalityslot$index17>>2] = $74;
            $75 = HEAP32[$_32>>2]|0;
            $switch4 = ($75>>>0)<(1);
            if ($switch4) {
             __ZN4drop17h8d9dbcdc390e199dE($_32);
             break;
            }
            $62 = $_48;
            $63 = $62&1;
            if (!($63)) {
             break;
            }
            $_48 = 0;
            $64 = ((($_32)) + 4|0);
            __ZN4drop17h5655a31cee677dd4E($64);
            break;
           }
          }
         }
        } while(0);
        if ((label|0) == 33) {
         $69 = ___cxa_find_matching_catch_2()|0;
         $70 = tempRet0;
         HEAP32[$personalityslot>>2] = $69;
         $personalityslot$index13 = ((($personalityslot)) + 4|0);
         HEAP32[$personalityslot$index13>>2] = $70;
        }
        $60 = $_47;
        $61 = $60&1;
        if ($61) {
         $_47 = 0;
         __ZN4drop17hbbbef022467984b7E($local_len);
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $67 = ___cxa_find_matching_catch_2()|0;
  $68 = tempRet0;
  HEAP32[$personalityslot>>2] = $67;
  $personalityslot$index11 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index11>>2] = $68;
 }
 $58 = $_46;
 $59 = $58&1;
 if (!($59)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index5 = ((($personalityslot)) + 4|0);
  $$field6 = HEAP32[$$index5>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_46 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index5 = ((($personalityslot)) + 4|0);
 $$field6 = HEAP32[$$index5>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN78__LT_core__iter__Cloned_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h340de4d15ccdb2b7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h4724045653afc7ffE($0,$3);
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16extend_desugared17h4773ef8d9d050bbeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_17 = 0, $_31 = 0, $_36 = 0, $_37 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $element = 0, $iterator = 0, $len = 0, $lower = 0, $personalityslot = 0, $personalityslot$index11 = 0, $personalityslot$index13 = 0, $personalityslot$index9 = 0, $self = 0, $switch = 0;
 var $switch1 = 0, $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $2 = sp;
 $arg1 = sp + 112|0;
 $iterator = sp + 104|0;
 $_6 = sp + 80|0;
 $element = sp + 56|0;
 $_17 = sp + 40|0;
 $_31 = sp + 16|0;
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $_36 = 0;
 $_37 = 0;
 $3 = $arg0;
 $self = $3;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;
 while(1) {
  __THREW__ = 0;
  invoke_vii(230,($_6|0),($iterator|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   label = 24;
   break;
  }
  $_36 = 1;
  $6 = HEAP32[$_6>>2]|0;
  $switch = ($6>>>0)<(1);
  $_36 = 0;
  if ($switch) {
   label = 6;
   break;
  }
  $_37 = 1;
  $10 = ((($_6)) + 4|0);
  ;HEAP32[$element>>2]=HEAP32[$10>>2]|0;HEAP32[$element+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$element+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$element+12>>2]=HEAP32[$10+12>>2]|0;HEAP32[$element+16>>2]=HEAP32[$10+16>>2]|0;
  $11 = $self;
  __THREW__ = 0;
  $12 = (invoke_ii(210,($11|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   label = 25;
   break;
  }
  $len = $12;
  $15 = $len;
  $16 = $self;
  __THREW__ = 0;
  $17 = (invoke_ii(234,($16|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   label = 25;
   break;
  }
  $20 = ($15|0)==($17|0);
  if ($20) {
   __THREW__ = 0;
   invoke_vii(225,($_17|0),($iterator|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    label = 25;
    break;
   }
   $23 = HEAP32[$_17>>2]|0;
   $lower = $23;
   $24 = $self;
   $25 = $lower;
   __THREW__ = 0;
   $26 = (invoke_iii(235,($25|0),1)|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    label = 25;
    break;
   }
   __THREW__ = 0;
   invoke_vii(227,($24|0),($26|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    label = 25;
    break;
   }
  }
  $31 = $self;
  __THREW__ = 0;
  invoke_vii(206,($2|0),($31|0));
  $$sreg$field = HEAP32[$2>>2]|0;
  $$sreg$index6 = ((($2)) + 4|0);
  $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0;
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if ($33) {
   label = 25;
   break;
  }
  $34 = $len;
  __THREW__ = 0;
  $35 = (invoke_iiii(236,($$sreg$field|0),($$sreg$field7|0),($34|0))|0);
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if ($37) {
   label = 25;
   break;
  }
  $_37 = 0;
  ;HEAP32[$_31>>2]=HEAP32[$element>>2]|0;HEAP32[$_31+4>>2]=HEAP32[$element+4>>2]|0;HEAP32[$_31+8>>2]=HEAP32[$element+8>>2]|0;HEAP32[$_31+12>>2]=HEAP32[$element+12>>2]|0;HEAP32[$_31+16>>2]=HEAP32[$element+16>>2]|0;
  __THREW__ = 0;
  invoke_vii(231,($35|0),($_31|0));
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if ($39) {
   label = 25;
   break;
  }
  $40 = $self;
  $41 = $len;
  $42 = (($41) + 1)|0;
  __THREW__ = 0;
  invoke_vii(237,($40|0),($42|0));
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if ($44) {
   label = 25;
   break;
  }
  $45 = HEAP32[$_6>>2]|0;
  $switch2 = ($45>>>0)<(1);
  if (!($switch2)) {
   continue;
  }
  __THREW__ = 0;
  invoke_vi(177,($_6|0));
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if ($50) {
   label = 24;
   break;
  }
 }
 if ((label|0) == 6) {
  __THREW__ = 0;
  invoke_vi(177,($_6|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   STACKTOP = sp;return;
  }
  $57 = ___cxa_find_matching_catch_2()|0;
  $58 = tempRet0;
  HEAP32[$personalityslot>>2] = $57;
  $personalityslot$index13 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index13>>2] = $58;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $51 = ___cxa_find_matching_catch_2()|0;
  $52 = tempRet0;
  HEAP32[$personalityslot>>2] = $51;
  $personalityslot$index9 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index9>>2] = $52;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 else if ((label|0) == 25) {
  $53 = ___cxa_find_matching_catch_2()|0;
  $54 = tempRet0;
  HEAP32[$personalityslot>>2] = $53;
  $personalityslot$index11 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index11>>2] = $54;
  $55 = $_37;
  $56 = $55&1;
  if ($56) {
   $_37 = 0;
   __ZN4drop17h5655a31cee677dd4E($element);
  }
  $7 = HEAP32[$_6>>2]|0;
  $switch1 = ($7>>>0)<(1);
  if ($switch1) {
   __ZN4drop17h8d9dbcdc390e199dE($_6);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $46 = $_36;
  $47 = $46&1;
  if (!($47)) {
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $_36 = 0;
  $48 = ((($_6)) + 4|0);
  __ZN4drop17h5655a31cee677dd4E($48);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17hbc12eeed7772b118E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $additional = 0, $arg0 = 0, $arg1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $additional = $3;
 $4 = $self;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $additional;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17hbc9185dfde24707cE($4,$7,$8);
 STACKTOP = sp;return;
}
function __ZN11collections3vec12SetLenOnDrop3new17h7db2f00f2c1c0305E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $len = $2;
 $3 = $len;
 $4 = HEAP32[$3>>2]|0;
 $5 = $len;
 HEAP32[$0>>2] = $5;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h0113e11cee25a481E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $_3 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$self>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN78__LT_core__iter__Cloned_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h6cc8a38ae651fce0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hef9cd9ebe5830a33E($3)|0);
 $_3 = $4;
 $5 = $_3;
 __ZN53__LT_core__option__Option_LT__RF__u27_a_u20_T_GT__GT_6cloned17h77153adec0d3eddfE($0,$5);
 STACKTOP = sp;return;
}
function __ZN4core3ptr5write17h028a6b3a94432575E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_8 = 0, $arg0 = 0, $arg1 = 0, $dst = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $arg1 = sp + 48|0;
 $src = sp + 24|0;
 $_8 = sp;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$arg1+16>>2]=HEAP32[$1+16>>2]|0;
 $2 = $arg0;
 $dst = $2;
 ;HEAP32[$src>>2]=HEAP32[$arg1>>2]|0;HEAP32[$src+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$src+8>>2]=HEAP32[$arg1+8>>2]|0;HEAP32[$src+12>>2]=HEAP32[$arg1+12>>2]|0;HEAP32[$src+16>>2]=HEAP32[$arg1+16>>2]|0;
 $3 = $dst;
 ;HEAP32[$_8>>2]=HEAP32[$src>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$src+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$src+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$src+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$src+16>>2]|0;
 ;HEAP32[$3>>2]=HEAP32[$_8>>2]|0;HEAP32[$3+4>>2]=HEAP32[$_8+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$_8+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$_8+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$_8+16>>2]|0;
 STACKTOP = sp;return;
}
function __ZN11collections3vec12SetLenOnDrop13increment_len17h10904a32f05ced00E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $increment = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $increment = $3;
 $4 = $increment;
 $5 = $self;
 $6 = ((($5)) + 4|0);
 $7 = $self;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($4))|0;
 HEAP32[$6>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN4drop17hbbbef022467984b7E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(238,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17hbbbef022467984b7E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hbbbef022467984b7E($0);
  STACKTOP = sp;return;
 }
}
function __ZN80__LT_collections__vec__SetLenOnDrop_LT__u27_a_GT__u20_as_u20_core__ops__Drop_GT_4drop17h341ffcedab56f085E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $self;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN13drop_contents17hbbbef022467984b7E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hef9cd9ebe5830a33E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_19 = 0, $_31 = 0, $arg0 = 0, $arg0$i = 0, $arg0$i2 = 0;
 var $old = 0, $ptr = 0, $ptr1 = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0 = sp + 28|0;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $self;
  $5 = HEAP32[$4>>2]|0;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h5788d9395d0bfbfeE($5)|0);
  $6 = $self;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h5788d9395d0bfbfeE($8)|0);
 }
 $9 = $self;
 $10 = HEAP32[$9>>2]|0;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 if ($14) {
  HEAP32[$_0>>2] = 0;
  $34 = HEAP32[$_0>>2]|0;
  STACKTOP = sp;return ($34|0);
 }
 $15 = $self;
 $16 = HEAP32[$15>>2]|0;
 $old = $16;
 $17 = $self;
 $18 = HEAP32[$17>>2]|0;
 $ptr = $18;
 $19 = $ptr;
 $arg0$i = $19;
 $20 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $21 = ($20|0)==(0);
 $22 = $ptr;
 if ($21) {
  $23 = ((($22)) + 1|0);
  $tmp_ret = $23;
  $24 = $tmp_ret;
  $_19 = $24;
 } else {
  $25 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h16eb96d23db2ec06E($22,1)|0);
  $_19 = $25;
 }
 $26 = $self;
 $27 = $_19;
 HEAP32[$26>>2] = $27;
 $28 = $old;
 $ptr1 = $28;
 $29 = $ptr1;
 $arg0$i2 = $29;
 $30 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $31 = ($30|0)==(0);
 if ($31) {
  $_31 = (1);
 } else {
  $32 = $ptr1;
  $_31 = $32;
 }
 $33 = $_31;
 HEAP32[$_0>>2] = $33;
 $34 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function __ZN53__LT_core__option__Option_LT__RF__u27_a_u20_T_GT__GT_6cloned17h77153adec0d3eddfE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $_3 = $3;
 $4 = $_3;
 __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hd1a86c279fa5dbf6E($0,$4);
 STACKTOP = sp;return;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hd1a86c279fa5dbf6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val12 = 0, $$expand_i1_val13 = 0, $$expand_i1_val14 = 0, $$field = 0, $$field4 = 0, $$field7 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_6 = 0, $_8 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index9 = 0, $self = 0;
 var $switch = 0, $switch1 = 0, $switch2 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $self = sp + 40|0;
 $_6 = sp + 16|0;
 $_8 = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $1;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 $2 = $arg0;
 HEAP32[$self>>2] = $2;
 $_11 = 1;
 $3 = HEAP32[$self>>2]|0;
 $4 = ($3|0)!=(0|0);
 $$expand_i1_val = $4&1;
 $$expand_i1_val10 = 1;
 $switch2 = ($$expand_i1_val&255)<($$expand_i1_val10&255);
 do {
  if ($switch2) {
   HEAP32[$0>>2] = 0;
  } else {
   $_10 = 0;
   $7 = HEAP32[$self>>2]|0;
   $x = $7;
   $_11 = 0;
   $8 = $x;
   HEAP32[$_8>>2] = $8;
   $$field7 = HEAP32[$_8>>2]|0;
   __THREW__ = 0;
   invoke_vii(239,($_6|0),($$field7|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    HEAP32[$0>>2] = 1;
    $11 = ((($0)) + 4|0);
    ;HEAP32[$11>>2]=HEAP32[$_6>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$_6+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$_6+12>>2]|0;HEAP32[$11+16>>2]=HEAP32[$_6+16>>2]|0;
    break;
   }
   $20 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   HEAP32[$personalityslot>>2] = $20;
   $personalityslot$index9 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index9>>2] = $21;
   $22 = $_11;
   $23 = $22&1;
   if ($23) {
    $_11 = 0;
   }
   $5 = HEAP32[$self>>2]|0;
   $6 = ($5|0)!=(0|0);
   $$expand_i1_val11 = $6&1;
   $$expand_i1_val12 = 1;
   $switch = ($$expand_i1_val11&255)<($$expand_i1_val12&255);
   if (!($switch)) {
    $16 = $_10;
    $17 = $16&1;
    if ($17) {
     $_10 = 0;
    }
   }
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $12 = $_11;
 $13 = $12&1;
 if ($13) {
  $_11 = 0;
 }
 $14 = HEAP32[$self>>2]|0;
 $15 = ($14|0)!=(0|0);
 $$expand_i1_val13 = $15&1;
 $$expand_i1_val14 = 1;
 $switch1 = ($$expand_i1_val13&255)<($$expand_i1_val14&255);
 if ($switch1) {
  STACKTOP = sp;return;
 }
 $18 = $_10;
 $19 = $18&1;
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $_10 = 0;
 STACKTOP = sp;return;
}
function __ZN53__LT_core__option__Option_LT__RF__u27_a_u20_T_GT__GT_6cloned28__u7b__u7b_closure_u7d__u7d_17hfc7276b622808d43E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $arg1 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg1 = $1;
 $2 = $arg1;
 $t = $2;
 $3 = $t;
 __ZN70__LT_simpledom__simpledom__Attribute_u20_as_u20_core__clone__Clone_GT_5clone17h8cbfb6a7b053ad1dE($0,$3);
 STACKTOP = sp;return;
}
function __ZN70__LT_simpledom__simpledom__Attribute_u20_as_u20_core__clone__Clone_GT_5clone17h8cbfb6a7b053ad1dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field$field$field = 0, $$sreg$field = 0, $$sreg$field4 = 0, $$sreg$index3 = 0, $$sreg1$field = 0, $$sreg1$field7 = 0, $$sreg1$index6 = 0, $$sreg2$field = 0, $$sreg2$field10 = 0, $$sreg2$index9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_21 = 0, $_3 = 0, $__self_0 = 0, $__self_01 = 0;
 var $__self_1 = 0, $__self_12 = 0, $abi_cast = 0, $arg0 = 0, $self = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 $_3 = sp + 48|0;
 $_21 = sp + 40|0;
 $abi_cast = sp + 52|0;
 $arg0 = $1;
 $5 = $arg0;
 $self = $5;
 $6 = $self;
 HEAP32[$_3>>2] = $6;
 $7 = HEAP32[$_3>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $switch = ($8>>>0)<(1);
 $9 = HEAP32[$_3>>2]|0;
 if ($switch) {
  $10 = ((($9)) + 4|0);
  $__self_0 = $10;
  $11 = HEAP32[$_3>>2]|0;
  $12 = ((($11)) + 12|0);
  $__self_1 = $12;
  $13 = $__self_0;
  __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__clone__Clone_GT_5clone17h831deb377857cefbE($4,$13);
  $$sreg$field = HEAP32[$4>>2]|0;
  $$sreg$index3 = ((($4)) + 4|0);
  $$sreg$field4 = HEAP32[$$sreg$index3>>2]|0;
  $14 = $__self_1;
  __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__clone__Clone_GT_5clone17h831deb377857cefbE($3,$14);
  $$sreg1$field = HEAP32[$3>>2]|0;
  $$sreg1$index6 = ((($3)) + 4|0);
  $$sreg1$field7 = HEAP32[$$sreg1$index6>>2]|0;
  HEAP32[$0>>2] = 0;
  $15 = ((($0)) + 4|0);
  HEAP32[$15>>2] = $$sreg$field;
  $16 = ((($15)) + 4|0);
  HEAP32[$16>>2] = $$sreg$field4;
  $17 = ((($0)) + 12|0);
  HEAP32[$17>>2] = $$sreg1$field;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $$sreg1$field7;
  STACKTOP = sp;return;
 } else {
  $19 = ((($9)) + 4|0);
  $__self_01 = $19;
  $20 = HEAP32[$_3>>2]|0;
  $21 = ((($20)) + 12|0);
  $__self_12 = $21;
  $22 = $__self_01;
  __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__clone__Clone_GT_5clone17h831deb377857cefbE($2,$22);
  $$sreg2$field = HEAP32[$2>>2]|0;
  $$sreg2$index9 = ((($2)) + 4|0);
  $$sreg2$field10 = HEAP32[$$sreg2$index9>>2]|0;
  $23 = $__self_12;
  $24 = (__ZN61__LT_alloc__rc__Rc_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h5cbbe68286bd02bcE($23)|0);
  HEAP32[$abi_cast>>2] = $24;
  ;HEAP32[$_21>>2]=HEAP32[$abi_cast>>2]|0;
  HEAP32[$0>>2] = 1;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $$sreg2$field;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $$sreg2$field10;
  $$field$field$field = HEAP32[$_21>>2]|0;
  $27 = ((($0)) + 12|0);
  HEAP32[$27>>2] = $$field$field$field;
  STACKTOP = sp;return;
 }
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__clone__Clone_GT_5clone17h831deb377857cefbE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arg0 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$retVal>>2] = $3;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN61__LT_alloc__rc__Rc_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h5cbbe68286bd02bcE($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_0 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 __ZN5alloc2rc8RcBoxPtr10inc_strong17hb8175821e9a4cd28E($2);
 $3 = $self;
 $$field = HEAP32[$3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $4 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN5alloc2rc8RcBoxPtr10inc_strong17hb8175821e9a4cd28E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_8 = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = $self$i;
 $5 = HEAP32[$4>>2]|0;
 (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE_60($5)|0);
 $6 = $self$i;
 $7 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h2e41590e74098bafE_53($6)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $self;
 $10 = (__ZN5alloc2rc8RcBoxPtr6strong17hb0fc32cc2c2eeee7E_55($9)|0);
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h4ded379d8122b068E($_8,$10,1);
 $11 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_14unwrap_or_else17h2e1a1ba15857c807E($_8)|0);
 __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17h5e039cab79421a09E_64($8,$11);
 STACKTOP = sp;return;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_14unwrap_or_else17h2e1a1ba15857c807E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_9 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index6 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;
 $_10 = 0;
 $_9 = 0;
 $_9 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 $_10 = 1;
 $1 = HEAP32[$self>>2]|0;
 $switch2 = ($1>>>0)<(1);
 do {
  if ($switch2) {
   $_10 = 0;
   __THREW__ = 0;
   $3 = (invoke_i(240)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    $_0 = $3;
    break;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = tempRet0;
   HEAP32[$personalityslot>>2] = $17;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $18;
   $19 = $_10;
   $20 = $19&1;
   if ($20) {
    $_10 = 0;
   }
   $2 = HEAP32[$self>>2]|0;
   $switch = ($2>>>0)<(1);
   if (!($switch)) {
    $13 = $_9;
    $14 = $13&1;
    if ($14) {
     $_9 = 0;
    }
   }
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  } else {
   $_9 = 0;
   $6 = ((($self)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $x = $7;
   $8 = $x;
   $_0 = $8;
  }
 } while(0);
 $9 = $_10;
 $10 = $9&1;
 if ($10) {
  $_10 = 0;
 }
 $11 = HEAP32[$self>>2]|0;
 $switch1 = ($11>>>0)<(1);
 if ($switch1) {
  $12 = $_0;
  STACKTOP = sp;return ($12|0);
 }
 $15 = $_9;
 $16 = $15&1;
 if (!($16)) {
  $12 = $_0;
  STACKTOP = sp;return ($12|0);
 }
 $_9 = 0;
 $12 = $_0;
 STACKTOP = sp;return ($12|0);
}
function __ZN5alloc2rc8RcBoxPtr10inc_strong28__u7b__u7b_closure_u7d__u7d_17h3351d02c83dc8abaE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _llvm_trap();
 // unreachable;
 return (0)|0;
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h5788d9395d0bfbfeE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr4null17he07168374e9c32f0E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr4null17he07168374e9c32f0E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17hbc9185dfde24707cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $abi_cast = 0, $align = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg2 = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0;
 var $new_cap = 0, $ptr = 0, $self = 0, $self$i = 0, $tmp_ret = 0, $tmp_ret1 = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $tmp_ret = sp + 8|0;
 $tmp_ret1 = sp;
 $abi_cast = sp + 16|0;
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $used_cap = $4;
 $5 = $arg2;
 $needed_extra_cap = $5;
 $6 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $elem_size = $6;
 $7 = (__ZN4core3mem8align_of17hebc60f0adf02a83fE_70()|0);
 $align = $7;
 $8 = $self;
 $arg0$i = $8;
 $9 = $arg0$i;
 $self$i = $9;
 $10 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $_0$i = -1;
 } else {
  $12 = $self$i;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $_0$i = $14;
 }
 $15 = $_0$i;
 $16 = $used_cap;
 $17 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h927b60995810bc3aE($15,$16)|0);
 $18 = $needed_extra_cap;
 $19 = ($17>>>0)>=($18>>>0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $self;
 $21 = $used_cap;
 $22 = $needed_extra_cap;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17h6d12c6811fea8f9cE($tmp_ret,$20,$21,$22);
 $23 = ((($tmp_ret)) + 4|0);
 $24 = HEAP32[$tmp_ret>>2]|0;
 $25 = HEAP32[$23>>2]|0;
 $new_cap = $24;
 $new_alloc_size = $25;
 $26 = $new_alloc_size;
 __ZN5alloc7raw_vec11alloc_guard17h6eacc493ea6b88dbE_41($26);
 $27 = $self;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $new_alloc_size;
  $32 = $align;
  $33 = (__ZN5alloc4heap8allocate17h358fb0ac596fce84E_42($31,$32)|0);
  $ptr = $33;
 } else {
  $34 = $self;
  $35 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hf85ec2338e76a049E_75($34)|0);
  $36 = $self;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $elem_size;
  $40 = Math_imul($38, $39)|0;
  $41 = $new_alloc_size;
  $42 = $align;
  $43 = (__ZN5alloc4heap10reallocate17he28f7928a028933bE_43($35,$40,$41,$42)|0);
  $ptr = $43;
 }
 $44 = $ptr;
 $45 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_35($44)|0);
 if ($45) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 $46 = $ptr;
 $47 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h95bdfd569abcc3b8E($46)|0);
 HEAP32[$abi_cast>>2] = $47;
 ;HEAP32[$tmp_ret1>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret1>>2]|0;
 $48 = $self;
 HEAP32[$48>>2] = $$field;
 $49 = $new_cap;
 $50 = $self;
 $51 = ((($50)) + 4|0);
 HEAP32[$51>>2] = $49;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17h6d12c6811fea8f9cE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_20 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $double_cap = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0, $new_cap = 0, $required_cap = 0, $self = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_9 = sp + 8|0;
 $_20 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $arg2 = $3;
 $4 = $arg0;
 $self = $4;
 $5 = $arg1;
 $used_cap = $5;
 $6 = $arg2;
 $needed_extra_cap = $6;
 $7 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $elem_size = $7;
 $8 = $used_cap;
 $9 = $needed_extra_cap;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h4ded379d8122b068E($_9,$8,$9);
 $10 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hb17817c931012d25E($_9,6551,17)|0);
 $required_cap = $10;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<1;
 $double_cap = $14;
 $15 = $double_cap;
 $16 = $required_cap;
 $17 = (__ZN4core3cmp3max17h6f7732cf62a64ef1E($15,$16)|0);
 $new_cap = $17;
 $18 = $new_cap;
 $19 = $elem_size;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h150d4095fd2b51b1E($_20,$18,$19);
 $20 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hb17817c931012d25E($_20,6551,17)|0);
 $new_alloc_size = $20;
 $21 = $new_cap;
 $22 = $new_alloc_size;
 HEAP32[$0>>2] = $21;
 $23 = ((($0)) + 4|0);
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_8capacity17h0e0ed4a1b7eab776E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $_0$i = -1;
  $9 = $_0$i;
  STACKTOP = sp;return ($9|0);
 } else {
  $6 = $self$i;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $_0$i = $8;
  $9 = $_0$i;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN4core3num23__LT_impl_u20_usize_GT_14saturating_add17habeff856fb664a83E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, $switch = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $other = $3;
 $4 = $self;
 $5 = $other;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h4ded379d8122b068E($_5,$4,$5);
 $6 = HEAP32[$_5>>2]|0;
 $switch = ($6>>>0)<(1);
 if ($switch) {
  $7 = (__ZN4core3num23__LT_impl_u20_usize_GT_9max_value17h4fa46e2b6316ead1E()|0);
  $_0 = $7;
  $11 = $_0;
  STACKTOP = sp;return ($11|0);
 } else {
  $8 = ((($_5)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $x = $9;
  $10 = $x;
  $_0 = $10;
  $11 = $_0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h817e47a288b89ddbE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $index;
 __THREW__ = 0;
 $13 = (invoke_iiii(241,($9|0),($11|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17h8c4caf6d525b41d7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $len;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17h0cf5d7fef51c6c5eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = $index;
 $10 = HEAP32[$self>>2]|0;
 $11 = ((($self)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_iiii(242,($9|0),($10|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h56ac62c9886feaebE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg1 = sp + 8|0;
 $slice = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$slice>>2]|0;
 $10 = ((($slice)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h450411eab351f322E($9,$11)|0);
 $13 = $self;
 $14 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h79758bab893f2486E($12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN4core3num23__LT_impl_u20_usize_GT_9max_value17h4fa46e2b6316ead1E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h4724045653afc7ffE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_17 = 0, $arg0 = 0, $diff = 0, $exact = 0, $self = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_17 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $7 = $self;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h927b60995810bc3aE($6,$9)|0);
 $diff = $10;
 $11 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $size = $11;
 $12 = $diff;
 $13 = $size;
 $14 = ($13|0)==(0);
 if ($14) {
  $_11 = 1;
 } else {
  $15 = $size;
  $_11 = $15;
 }
 $16 = $_11;
 $17 = ($16|0)==(0);
 $18 = $17;
 if ($18) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(2452);
  // unreachable;
 } else {
  $19 = $_11;
  $20 = (($12>>>0) / ($19>>>0))&-1;
  $exact = $20;
  $21 = $exact;
  $22 = $exact;
  HEAP32[$_17>>2] = 1;
  $23 = ((($_17)) + 4|0);
  HEAP32[$23>>2] = $22;
  HEAP32[$0>>2] = $21;
  $24 = ((($0)) + 4|0);
  ;HEAP32[$24>>2]=HEAP32[$_17>>2]|0;HEAP32[$24+4>>2]=HEAP32[$_17+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h8212eef804f217ceE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_14 = 0, $arg0 = 0, $arg0$i = 0, $p = 0, $p1 = 0, $ptr = 0, $self = 0, $tmp_ret = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $p = (1);
 } else {
  $10 = HEAP32[$self>>2]|0;
  $11 = ((($self)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h177f2d4a3a021c63E($10,$12)|0);
  $p1 = $13;
  $14 = $p1;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h5788d9395d0bfbfeE($14)|0);
  $15 = $p1;
  $p = $15;
 }
 $16 = $p;
 $17 = $p;
 $ptr = $17;
 $18 = $ptr;
 $arg0$i = $18;
 $19 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $20 = ($19|0)==(0);
 $21 = $ptr;
 if ($20) {
  $22 = HEAP32[$self>>2]|0;
  $23 = ((($self)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h90b80d8b39aabb76E($22,$24)|0);
  $26 = (($21) + ($25)|0);
  $tmp_ret = $26;
  $27 = $tmp_ret;
  $_14 = $27;
  HEAP32[$0>>2] = $16;
  $33 = $_14;
  $34 = ((($0)) + 4|0);
  HEAP32[$34>>2] = $33;
  STACKTOP = sp;return;
 } else {
  $28 = HEAP32[$self>>2]|0;
  $29 = ((($self)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h90b80d8b39aabb76E($28,$30)|0);
  $32 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h16eb96d23db2ec06E($21,$31)|0);
  $_14 = $32;
  HEAP32[$0>>2] = $16;
  $33 = $_14;
  $34 = ((($0)) + 4|0);
  HEAP32[$34>>2] = $33;
  STACKTOP = sp;return;
 }
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h177f2d4a3a021c63E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h90b80d8b39aabb76E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $lvalue_temp = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$lvalue_temp>>2] = $7;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($lvalue_temp)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_13with_capacity17h5e14c33c0580aa3eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_5 = 0, $abi_cast = 0, $align = 0, $alloc_size = 0, $arg0 = 0, $cap = 0, $elem_size = 0, $ptr = 0, $ptr1 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_5 = sp + 8|0;
 $tmp_ret = sp;
 $abi_cast = sp + 16|0;
 $arg0 = $1;
 $2 = $arg0;
 $cap = $2;
 $3 = (__ZN4core3mem7size_of17hf25428224e4aa658E_69()|0);
 $elem_size = $3;
 $4 = $cap;
 $5 = $elem_size;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h150d4095fd2b51b1E($_5,$4,$5);
 $6 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hb17817c931012d25E($_5,6551,17)|0);
 $alloc_size = $6;
 $7 = $alloc_size;
 __ZN5alloc7raw_vec11alloc_guard17h6eacc493ea6b88dbE_41($7);
 $8 = $alloc_size;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $ptr = (1);
  } else {
   $10 = (__ZN4core3mem8align_of17hebc60f0adf02a83fE_70()|0);
   $align = $10;
   $11 = $alloc_size;
   $12 = $align;
   $13 = (__ZN5alloc4heap8allocate17h358fb0ac596fce84E_42($11,$12)|0);
   $ptr1 = $13;
   $14 = $ptr1;
   $15 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_35($14)|0);
   if ($15) {
    __ZN5alloc3oom3oom17h9c08827c36eab673E();
    // unreachable;
   } else {
    $16 = $ptr1;
    $ptr = $16;
    break;
   }
  }
 } while(0);
 $17 = $ptr;
 $18 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h95bdfd569abcc3b8E($17)|0);
 HEAP32[$abi_cast>>2] = $18;
 ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret>>2]|0;
 $19 = $cap;
 HEAP32[$0>>2] = $$field;
 $20 = ((($0)) + 4|0);
 HEAP32[$20>>2] = $19;
 STACKTOP = sp;return;
}
function __ZN4core5slice14from_raw_parts17h9aaec7bcbc8683bcE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_5>>2] = $4;
 $6 = ((($_5)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_5)) + 4|0);
 $8 = HEAP32[$_5>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN75__LT_simpledom__simpledom__ElementContent_u20_as_u20_core__clone__Clone_GT_5clone17hefbbc765d695317eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_15 = 0, $_3 = 0, $_8 = 0, $__self_0 = 0, $__self_01 = 0, $__self_02 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp;
 $_3 = sp + 40|0;
 $_8 = sp + 24|0;
 $_15 = sp + 8|0;
 $arg0 = $1;
 $3 = $arg0;
 $self = $3;
 $4 = $self;
 HEAP32[$_3>>2] = $4;
 $5 = HEAP32[$_3>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 0:  {
  $7 = HEAP32[$_3>>2]|0;
  $8 = ((($7)) + 4|0);
  $__self_0 = $8;
  $9 = $__self_0;
  __ZN66__LT_collections__string__String_u20_as_u20_core__clone__Clone_GT_5clone17h581d7b45aa8df381E($_8,$9);
  HEAP32[$0>>2] = 0;
  $10 = ((($0)) + 4|0);
  ;HEAP32[$10>>2]=HEAP32[$_8>>2]|0;HEAP32[$10+4>>2]=HEAP32[$_8+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$_8+8>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $11 = HEAP32[$_3>>2]|0;
  $12 = ((($11)) + 4|0);
  $__self_01 = $12;
  $13 = $__self_01;
  __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__clone__Clone_GT_5clone17h831deb377857cefbE($2,$13);
  $$sreg$field = HEAP32[$2>>2]|0;
  $$sreg$index1 = ((($2)) + 4|0);
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
  HEAP32[$0>>2] = 1;
  $14 = ((($0)) + 4|0);
  HEAP32[$14>>2] = $$sreg$field;
  $15 = ((($14)) + 4|0);
  HEAP32[$15>>2] = $$sreg$field2;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $16 = HEAP32[$_3>>2]|0;
  $17 = ((($16)) + 4|0);
  $__self_02 = $17;
  $18 = $__self_02;
  __ZN69__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h9f253a92b4c79c76E($_15,$18);
  HEAP32[$0>>2] = 2;
  $19 = ((($0)) + 4|0);
  ;HEAP32[$19>>2]=HEAP32[$_15>>2]|0;HEAP32[$19+4>>2]=HEAP32[$_15+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$_15+8>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  // unreachable;
 }
 }
}
function __ZN69__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h9f253a92b4c79c76E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $arg0 = $1;
 $3 = $arg0;
 $self = $3;
 $4 = $self;
 __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h6683d9dfb9c5f57cE($2,$4);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_6to_vec17h94f2c66ca80f2fe1E($0,$$sreg$field,$$sreg$field2);
 STACKTOP = sp;return;
}
function __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h6683d9dfb9c5f57cE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $p = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h0e1aeebaaf4243cdE_24($3)|0);
 $p = $4;
 $5 = $p;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h72516150e42e5932E_25($5)|0);
 $6 = $p;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice14from_raw_parts17h6b986bdc7c0122b6E($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_6to_vec17h94f2c66ca80f2fe1E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN11collections5slice4hack6to_vec17h04bd0bb6b3abee19E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN11collections5slice4hack6to_vec17h04bd0bb6b3abee19E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_9 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $s = 0, $vector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg0 = sp + 48|0;
 $s = sp + 40|0;
 $vector = sp + 24|0;
 $_9 = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_10 = 0;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$s>>2] = $4;
 $7 = ((($s)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$s>>2]|0;
 $9 = ((($s)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_iii(243,($8|0),($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  __THREW__ = 0;
  invoke_vii(244,($vector|0),($11|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if (!($15)) {
   $_10 = 1;
   $16 = HEAP32[$s>>2]|0;
   $17 = ((($s)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   __THREW__ = 0;
   invoke_viii(245,($vector|0),($16|0),($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    $_10 = 0;
    ;HEAP32[$_9>>2]=HEAP32[$vector>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$vector+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$vector+8>>2]|0;
    ;HEAP32[$0>>2]=HEAP32[$_9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_9+8>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $21 = ___cxa_find_matching_catch_2()|0;
 $22 = tempRet0;
 HEAP32[$personalityslot>>2] = $21;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $22;
 $23 = $_10;
 $24 = $23&1;
 if (!($24)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_10 = 0;
 __ZN4drop17h168a6168c579fd89E($vector);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h96073221e77ac80bE_79($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h2480914c11445481E_83($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_13with_capacity17h44699301d2ceb6fbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field$field = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $capacity = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $2 = $arg0;
 $capacity = $2;
 $3 = $capacity;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_13with_capacity17h71389ee99eeecf16E($tmp_ret,$3);
 $4 = ((($tmp_ret)) + 4|0);
 $$field$field = HEAP32[$tmp_ret>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$0>>2] = $$field$field;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h9f18826ff54526b5E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg1 = sp + 16|0;
 $other = sp + 8|0;
 $_6 = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$other>>2] = $5;
 $8 = ((($other)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $self;
 $10 = HEAP32[$other>>2]|0;
 $11 = ((($other)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17h30650deccce92948E($_6,$10,$12);
 __ZN112__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT__RF__u27_a_u20_T_C__u20_I_GT__GT_11spec_extend17haee52ffa0e9213a7E($9,$_6);
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17h30650deccce92948E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h2bbace166a888de7E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN112__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT__RF__u27_a_u20_T_C__u20_I_GT__GT_11spec_extend17haee52ffa0e9213a7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $_7 = 0, $arg0 = 0, $arg1 = 0, $iterator = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg1 = sp + 32|0;
 $iterator = sp + 24|0;
 $_6 = sp + 16|0;
 $_7 = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $2 = $arg0;
 $self = $2;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;
 $3 = $self;
 ;HEAP32[$_7>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$iterator+4>>2]|0;
 __THREW__ = 0;
 invoke_vii(246,($_6|0),($_7|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __THREW__ = 0;
  invoke_vii(247,($3|0),($_6|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   STACKTOP = sp;return;
  }
 }
 $8 = ___cxa_find_matching_catch_2()|0;
 $9 = tempRet0;
 HEAP32[$personalityslot>>2] = $8;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $9;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core4iter8iterator8Iterator6cloned17he42d8b88915292aeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $_3 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$self>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_11spec_extend17h7d76ce0ddad6cc50E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field6 = 0, $$index5 = 0, $$sreg$field = 0, $$sreg$field9 = 0, $$sreg$index8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $8 = 0, $9 = 0, $_29 = 0, $_30 = 0, $_32 = 0, $_38 = 0, $_45 = 0, $_46 = 0, $_47 = 0, $_48 = 0, $_7 = 0, $additional = 0, $arg0 = 0, $arg1 = 0, $element = 0, $high = 0, $high_value = 0, $iter = 0, $iterator = 0, $local_len = 0;
 var $low = 0, $personalityslot = 0, $personalityslot$index11 = 0, $personalityslot$index13 = 0, $personalityslot$index15 = 0, $personalityslot$index17 = 0, $personalityslot$index19 = 0, $ptr = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $switch3 = 0, $switch4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $2 = sp;
 $arg1 = sp + 216|0;
 $iterator = sp + 208|0;
 $high = sp + 200|0;
 $_7 = sp + 184|0;
 $local_len = sp + 176|0;
 $_29 = sp + 168|0;
 $_30 = sp + 160|0;
 $iter = sp + 152|0;
 $_32 = sp + 104|0;
 $element = sp + 64|0;
 $_38 = sp + 24|0;
 $_45 = sp + 16|0;
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $_46 = 0;
 $_47 = 0;
 $_48 = 0;
 $3 = $arg0;
 $self = $3;
 $_46 = 1;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;
 __THREW__ = 0;
 invoke_vii(248,($_7|0),($iterator|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   label = 32;
  } else {
   $6 = HEAP32[$_7>>2]|0;
   $low = $6;
   $7 = ((($_7)) + 4|0);
   ;HEAP32[$high>>2]=HEAP32[$7>>2]|0;HEAP32[$high+4>>2]=HEAP32[$7+4>>2]|0;
   $8 = HEAP32[$high>>2]|0;
   $switch = ($8>>>0)<(1);
   if (!($switch)) {
    $9 = ((($high)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $high_value = $10;
   }
   $11 = HEAP32[$high>>2]|0;
   $switch1 = ($11>>>0)<(1);
   if ($switch1) {
    $12 = $self;
    $_46 = 0;
    ;HEAP32[$_45>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_45+4>>2]=HEAP32[$iterator+4>>2]|0;
    __THREW__ = 0;
    invoke_vii(249,($12|0),($_45|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     label = 32;
     break;
    }
    STACKTOP = sp;return;
   }
   $15 = ((($high)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $additional = $16;
   $17 = $self;
   $18 = $additional;
   __THREW__ = 0;
   invoke_vii(250,($17|0),($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 32;
   } else {
    $21 = $self;
    __THREW__ = 0;
    invoke_vii(165,($2|0),($21|0));
    $$sreg$field = HEAP32[$2>>2]|0;
    $$sreg$index8 = ((($2)) + 4|0);
    $$sreg$field9 = HEAP32[$$sreg$index8>>2]|0;
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 32;
    } else {
     __THREW__ = 0;
     $24 = (invoke_iii(166,($$sreg$field|0),($$sreg$field9|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 32;
     } else {
      $27 = $self;
      __THREW__ = 0;
      $28 = (invoke_ii(169,($27|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       label = 32;
      } else {
       __THREW__ = 0;
       $31 = (invoke_iii(170,($24|0),($28|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        label = 32;
       } else {
        $ptr = $31;
        $34 = $self;
        $35 = ((($34)) + 8|0);
        __THREW__ = 0;
        invoke_vii(228,($local_len|0),($35|0));
        $36 = __THREW__; __THREW__ = 0;
        $37 = $36&1;
        do {
         if ($37) {
          label = 33;
         } else {
          $_47 = 1;
          $_46 = 0;
          ;HEAP32[$_30>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_30+4>>2]=HEAP32[$iterator+4>>2]|0;
          __THREW__ = 0;
          invoke_vii(251,($_29|0),($_30|0));
          $38 = __THREW__; __THREW__ = 0;
          $39 = $38&1;
          if ($39) {
           label = 33;
          } else {
           ;HEAP32[$iter>>2]=HEAP32[$_29>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$_29+4>>2]|0;
           while(1) {
            __THREW__ = 0;
            invoke_vii(252,($_32|0),($iter|0));
            $40 = __THREW__; __THREW__ = 0;
            $41 = $40&1;
            if ($41) {
             label = 34;
             break;
            }
            $_48 = 1;
            $42 = HEAP32[$_32>>2]|0;
            $switch2 = ($42>>>0)<(1);
            $_48 = 0;
            if ($switch2) {
             label = 18;
             break;
            }
            $45 = ((($_32)) + 4|0);
            dest=$element; src=$45; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
            $46 = $ptr;
            dest=$_38; src=$element; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
            __THREW__ = 0;
            invoke_vii(253,($46|0),($_38|0));
            $47 = __THREW__; __THREW__ = 0;
            $48 = $47&1;
            if ($48) {
             label = 35;
             break;
            }
            $49 = $ptr;
            __THREW__ = 0;
            $50 = (invoke_iii(170,($49|0),1)|0);
            $51 = __THREW__; __THREW__ = 0;
            $52 = $51&1;
            if ($52) {
             label = 35;
             break;
            }
            $ptr = $50;
            __THREW__ = 0;
            invoke_vii(232,($local_len|0),1);
            $53 = __THREW__; __THREW__ = 0;
            $54 = $53&1;
            if ($54) {
             label = 35;
             break;
            }
            $55 = HEAP32[$_32>>2]|0;
            $switch3 = ($55>>>0)<(1);
            if (!($switch3)) {
             continue;
            }
            __THREW__ = 0;
            invoke_vi(150,($_32|0));
            $65 = __THREW__; __THREW__ = 0;
            $66 = $65&1;
            if ($66) {
             label = 34;
             break;
            }
           }
           if ((label|0) == 18) {
            __THREW__ = 0;
            invoke_vi(150,($_32|0));
            $43 = __THREW__; __THREW__ = 0;
            $44 = $43&1;
            if ($44) {
             $76 = ___cxa_find_matching_catch_2()|0;
             $77 = tempRet0;
             HEAP32[$personalityslot>>2] = $76;
             $personalityslot$index19 = ((($personalityslot)) + 4|0);
             HEAP32[$personalityslot$index19>>2] = $77;
             $$field = HEAP32[$personalityslot>>2]|0;
             $$index5 = ((($personalityslot)) + 4|0);
             $$field6 = HEAP32[$$index5>>2]|0;
             ___resumeException($$field|0);
             // unreachable;
            } else {
             $_47 = 0;
             __THREW__ = 0;
             invoke_vi(233,($local_len|0));
             $56 = __THREW__; __THREW__ = 0;
             $57 = $56&1;
             if ($57) {
              label = 32;
              break L1;
             }
             STACKTOP = sp;return;
            }
           }
           else if ((label|0) == 34) {
            $71 = ___cxa_find_matching_catch_2()|0;
            $72 = tempRet0;
            HEAP32[$personalityslot>>2] = $71;
            $personalityslot$index15 = ((($personalityslot)) + 4|0);
            HEAP32[$personalityslot$index15>>2] = $72;
            break;
           }
           else if ((label|0) == 35) {
            $73 = ___cxa_find_matching_catch_2()|0;
            $74 = tempRet0;
            HEAP32[$personalityslot>>2] = $73;
            $personalityslot$index17 = ((($personalityslot)) + 4|0);
            HEAP32[$personalityslot$index17>>2] = $74;
            $75 = HEAP32[$_32>>2]|0;
            $switch4 = ($75>>>0)<(1);
            if ($switch4) {
             __ZN4drop17h348e10b97a61d454E($_32);
             break;
            }
            $62 = $_48;
            $63 = $62&1;
            if (!($63)) {
             break;
            }
            $_48 = 0;
            $64 = ((($_32)) + 4|0);
            __ZN4drop17ha3594332bb7982ceE($64);
            break;
           }
          }
         }
        } while(0);
        if ((label|0) == 33) {
         $69 = ___cxa_find_matching_catch_2()|0;
         $70 = tempRet0;
         HEAP32[$personalityslot>>2] = $69;
         $personalityslot$index13 = ((($personalityslot)) + 4|0);
         HEAP32[$personalityslot$index13>>2] = $70;
        }
        $60 = $_47;
        $61 = $60&1;
        if ($61) {
         $_47 = 0;
         __ZN4drop17hbbbef022467984b7E($local_len);
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $67 = ___cxa_find_matching_catch_2()|0;
  $68 = tempRet0;
  HEAP32[$personalityslot>>2] = $67;
  $personalityslot$index11 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index11>>2] = $68;
 }
 $58 = $_46;
 $59 = $58&1;
 if (!($59)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index5 = ((($personalityslot)) + 4|0);
  $$field6 = HEAP32[$$index5>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_46 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index5 = ((($personalityslot)) + 4|0);
 $$field6 = HEAP32[$$index5>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN78__LT_core__iter__Cloned_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hdcfd1acf4d7931bdE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hb2d44d45bddba55bE($0,$3);
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16extend_desugared17hd872b8a6ac8f5fabE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_17 = 0, $_31 = 0, $_36 = 0, $_37 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $element = 0, $iterator = 0, $len = 0, $lower = 0, $personalityslot = 0, $personalityslot$index11 = 0, $personalityslot$index13 = 0, $personalityslot$index9 = 0, $self = 0, $switch = 0;
 var $switch1 = 0, $switch2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $2 = sp;
 $arg1 = sp + 168|0;
 $iterator = sp + 160|0;
 $_6 = sp + 112|0;
 $element = sp + 72|0;
 $_17 = sp + 56|0;
 $_31 = sp + 16|0;
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $_36 = 0;
 $_37 = 0;
 $3 = $arg0;
 $self = $3;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;
 while(1) {
  __THREW__ = 0;
  invoke_vii(252,($_6|0),($iterator|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   label = 24;
   break;
  }
  $_36 = 1;
  $6 = HEAP32[$_6>>2]|0;
  $switch = ($6>>>0)<(1);
  $_36 = 0;
  if ($switch) {
   label = 6;
   break;
  }
  $_37 = 1;
  $10 = ((($_6)) + 4|0);
  dest=$element; src=$10; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $11 = $self;
  __THREW__ = 0;
  $12 = (invoke_ii(169,($11|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   label = 25;
   break;
  }
  $len = $12;
  $15 = $len;
  $16 = $self;
  __THREW__ = 0;
  $17 = (invoke_ii(254,($16|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if ($19) {
   label = 25;
   break;
  }
  $20 = ($15|0)==($17|0);
  if ($20) {
   __THREW__ = 0;
   invoke_vii(248,($_17|0),($iterator|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    label = 25;
    break;
   }
   $23 = HEAP32[$_17>>2]|0;
   $lower = $23;
   $24 = $self;
   $25 = $lower;
   __THREW__ = 0;
   $26 = (invoke_iii(235,($25|0),1)|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    label = 25;
    break;
   }
   __THREW__ = 0;
   invoke_vii(250,($24|0),($26|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    label = 25;
    break;
   }
  }
  $31 = $self;
  __THREW__ = 0;
  invoke_vii(165,($2|0),($31|0));
  $$sreg$field = HEAP32[$2>>2]|0;
  $$sreg$index6 = ((($2)) + 4|0);
  $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0;
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if ($33) {
   label = 25;
   break;
  }
  $34 = $len;
  __THREW__ = 0;
  $35 = (invoke_iiii(255,($$sreg$field|0),($$sreg$field7|0),($34|0))|0);
  $36 = __THREW__; __THREW__ = 0;
  $37 = $36&1;
  if ($37) {
   label = 25;
   break;
  }
  $_37 = 0;
  dest=$_31; src=$element; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  __THREW__ = 0;
  invoke_vii(253,($35|0),($_31|0));
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if ($39) {
   label = 25;
   break;
  }
  $40 = $self;
  $41 = $len;
  $42 = (($41) + 1)|0;
  __THREW__ = 0;
  invoke_vii(256,($40|0),($42|0));
  $43 = __THREW__; __THREW__ = 0;
  $44 = $43&1;
  if ($44) {
   label = 25;
   break;
  }
  $45 = HEAP32[$_6>>2]|0;
  $switch2 = ($45>>>0)<(1);
  if (!($switch2)) {
   continue;
  }
  __THREW__ = 0;
  invoke_vi(150,($_6|0));
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if ($50) {
   label = 24;
   break;
  }
 }
 if ((label|0) == 6) {
  __THREW__ = 0;
  invoke_vi(150,($_6|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   STACKTOP = sp;return;
  }
  $57 = ___cxa_find_matching_catch_2()|0;
  $58 = tempRet0;
  HEAP32[$personalityslot>>2] = $57;
  $personalityslot$index13 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index13>>2] = $58;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $51 = ___cxa_find_matching_catch_2()|0;
  $52 = tempRet0;
  HEAP32[$personalityslot>>2] = $51;
  $personalityslot$index9 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index9>>2] = $52;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 else if ((label|0) == 25) {
  $53 = ___cxa_find_matching_catch_2()|0;
  $54 = tempRet0;
  HEAP32[$personalityslot>>2] = $53;
  $personalityslot$index11 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index11>>2] = $54;
  $55 = $_37;
  $56 = $55&1;
  if ($56) {
   $_37 = 0;
   __ZN4drop17ha3594332bb7982ceE($element);
  }
  $7 = HEAP32[$_6>>2]|0;
  $switch1 = ($7>>>0)<(1);
  if ($switch1) {
   __ZN4drop17h348e10b97a61d454E($_6);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $46 = $_36;
  $47 = $46&1;
  if (!($47)) {
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $_36 = 0;
  $48 = ((($_6)) + 4|0);
  __ZN4drop17ha3594332bb7982ceE($48);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h90f92bc66b8ceb6eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $additional = 0, $arg0 = 0, $arg1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $additional = $3;
 $4 = $self;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $additional;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17h406f47aeda45b7f9E($4,$7,$8);
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h949e5b795cd3d504E_80($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h5da33358dd5c34e7E_81($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17h2812dbe7bb8c1778E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h525eb7a061c86864E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + (($5*40)|0)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hc23990d35a161737E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $_3 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$self>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN78__LT_core__iter__Cloned_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h56950e8842ad5d12E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hb7b08cca2b6dc7b0E($3)|0);
 $_3 = $4;
 $5 = $_3;
 __ZN53__LT_core__option__Option_LT__RF__u27_a_u20_T_GT__GT_6cloned17h4156ae0601447f4fE($0,$5);
 STACKTOP = sp;return;
}
function __ZN4core3ptr5write17h3320bd8f4e994860E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_8 = 0, $arg0 = 0, $arg1 = 0, $dst = 0, $src = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $arg1 = sp + 80|0;
 $src = sp + 40|0;
 $_8 = sp;
 $arg0 = $0;
 dest=$arg1; src=$1; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $2 = $arg0;
 $dst = $2;
 dest=$src; src=$arg1; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = $dst;
 dest=$_8; src=$src; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$3; src=$_8; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hb7b08cca2b6dc7b0E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_19 = 0, $_31 = 0, $arg0 = 0, $arg0$i = 0, $arg0$i2 = 0;
 var $old = 0, $ptr = 0, $ptr1 = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0 = sp + 28|0;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $self;
  $5 = HEAP32[$4>>2]|0;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h29967336dbc48684E($5)|0);
  $6 = $self;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h29967336dbc48684E($8)|0);
 }
 $9 = $self;
 $10 = HEAP32[$9>>2]|0;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 if ($14) {
  HEAP32[$_0>>2] = 0;
  $34 = HEAP32[$_0>>2]|0;
  STACKTOP = sp;return ($34|0);
 }
 $15 = $self;
 $16 = HEAP32[$15>>2]|0;
 $old = $16;
 $17 = $self;
 $18 = HEAP32[$17>>2]|0;
 $ptr = $18;
 $19 = $ptr;
 $arg0$i = $19;
 $20 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $21 = ($20|0)==(0);
 $22 = $ptr;
 if ($21) {
  $23 = ((($22)) + 1|0);
  $tmp_ret = $23;
  $24 = $tmp_ret;
  $_19 = $24;
 } else {
  $25 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h977f91fda7edfa1aE($22,1)|0);
  $_19 = $25;
 }
 $26 = $self;
 $27 = $_19;
 HEAP32[$26>>2] = $27;
 $28 = $old;
 $ptr1 = $28;
 $29 = $ptr1;
 $arg0$i2 = $29;
 $30 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $31 = ($30|0)==(0);
 if ($31) {
  $_31 = (1);
 } else {
  $32 = $ptr1;
  $_31 = $32;
 }
 $33 = $_31;
 HEAP32[$_0>>2] = $33;
 $34 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function __ZN53__LT_core__option__Option_LT__RF__u27_a_u20_T_GT__GT_6cloned17h4156ae0601447f4fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $_3 = $3;
 $4 = $_3;
 __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hc8b3c2896a1a0f80E($0,$4);
 STACKTOP = sp;return;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hc8b3c2896a1a0f80E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val12 = 0, $$expand_i1_val13 = 0, $$expand_i1_val14 = 0, $$field = 0, $$field4 = 0, $$field7 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_6 = 0, $_8 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index9 = 0, $self = 0;
 var $switch = 0, $switch1 = 0, $switch2 = 0, $x = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $self = sp + 60|0;
 $_6 = sp + 16|0;
 $_8 = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $1;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 $2 = $arg0;
 HEAP32[$self>>2] = $2;
 $_11 = 1;
 $3 = HEAP32[$self>>2]|0;
 $4 = ($3|0)!=(0|0);
 $$expand_i1_val = $4&1;
 $$expand_i1_val10 = 1;
 $switch2 = ($$expand_i1_val&255)<($$expand_i1_val10&255);
 do {
  if ($switch2) {
   HEAP32[$0>>2] = 0;
  } else {
   $_10 = 0;
   $7 = HEAP32[$self>>2]|0;
   $x = $7;
   $_11 = 0;
   $8 = $x;
   HEAP32[$_8>>2] = $8;
   $$field7 = HEAP32[$_8>>2]|0;
   __THREW__ = 0;
   invoke_vii(257,($_6|0),($$field7|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    HEAP32[$0>>2] = 1;
    $11 = ((($0)) + 4|0);
    dest=$11; src=$_6; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    break;
   }
   $20 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   HEAP32[$personalityslot>>2] = $20;
   $personalityslot$index9 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index9>>2] = $21;
   $22 = $_11;
   $23 = $22&1;
   if ($23) {
    $_11 = 0;
   }
   $5 = HEAP32[$self>>2]|0;
   $6 = ($5|0)!=(0|0);
   $$expand_i1_val11 = $6&1;
   $$expand_i1_val12 = 1;
   $switch = ($$expand_i1_val11&255)<($$expand_i1_val12&255);
   if (!($switch)) {
    $16 = $_10;
    $17 = $16&1;
    if ($17) {
     $_10 = 0;
    }
   }
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $12 = $_11;
 $13 = $12&1;
 if ($13) {
  $_11 = 0;
 }
 $14 = HEAP32[$self>>2]|0;
 $15 = ($14|0)!=(0|0);
 $$expand_i1_val13 = $15&1;
 $$expand_i1_val14 = 1;
 $switch1 = ($$expand_i1_val13&255)<($$expand_i1_val14&255);
 if ($switch1) {
  STACKTOP = sp;return;
 }
 $18 = $_10;
 $19 = $18&1;
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $_10 = 0;
 STACKTOP = sp;return;
}
function __ZN53__LT_core__option__Option_LT__RF__u27_a_u20_T_GT__GT_6cloned28__u7b__u7b_closure_u7d__u7d_17ha387fd490fb08637E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $arg1 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg1 = $1;
 $2 = $arg1;
 $t = $2;
 $3 = $t;
 __ZN68__LT_simpledom__simpledom__Element_u20_as_u20_core__clone__Clone_GT_5clone17h512cdf093cfe9ed7E($0,$3);
 STACKTOP = sp;return;
}
function __ZN68__LT_simpledom__simpledom__Element_u20_as_u20_core__clone__Clone_GT_5clone17h512cdf093cfe9ed7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_6 = 0;
 var $_9 = 0, $__self_0_0 = 0, $__self_0_1 = 0, $__self_0_2 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_6 = sp + 48|0;
 $_9 = sp + 32|0;
 $_12 = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $__self_0_0 = $3;
 $4 = $self;
 $5 = ((($4)) + 8|0);
 $__self_0_1 = $5;
 $6 = $self;
 $7 = ((($6)) + 20|0);
 $__self_0_2 = $7;
 $8 = $__self_0_0;
 __ZN68__LT_core__option__Option_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h55c69367f8eba76dE($_6,$8);
 $9 = $__self_0_1;
 __ZN68__LT_core__option__Option_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h4da121c8c745ff49E($_9,$9);
 $10 = $__self_0_2;
 __THREW__ = 0;
 invoke_vii(151,($_12|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  HEAP32[$personalityslot>>2] = $15;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $16;
  __ZN4drop17h170fadfae1d8e329E($_9);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  ;HEAP32[$0>>2]=HEAP32[$_6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_6+4>>2]|0;
  $13 = ((($0)) + 8|0);
  ;HEAP32[$13>>2]=HEAP32[$_9>>2]|0;HEAP32[$13+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$_9+8>>2]|0;
  $14 = ((($0)) + 20|0);
  ;HEAP32[$14>>2]=HEAP32[$_12>>2]|0;HEAP32[$14+4>>2]=HEAP32[$_12+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$_12+8>>2]|0;HEAP32[$14+12>>2]=HEAP32[$_12+12>>2]|0;HEAP32[$14+16>>2]=HEAP32[$_12+16>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZN68__LT_core__option__Option_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h55c69367f8eba76dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val4 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $__self_0 = 0, $arg0 = 0, $self = 0, $switch = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $_3 = sp + 8|0;
 $arg0 = $1;
 $3 = $arg0;
 $self = $3;
 $4 = $self;
 HEAP32[$_3>>2] = $4;
 $5 = HEAP32[$_3>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 $$expand_i1_val = $7&1;
 $$expand_i1_val4 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val4&255);
 if ($switch) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $8 = HEAP32[$_3>>2]|0;
  $__self_0 = $8;
  $9 = $__self_0;
  __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__clone__Clone_GT_5clone17h831deb377857cefbE($2,$9);
  $$sreg$field = HEAP32[$2>>2]|0;
  $$sreg$index1 = ((($2)) + 4|0);
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
  HEAP32[$0>>2] = $$sreg$field;
  $10 = ((($0)) + 4|0);
  HEAP32[$10>>2] = $$sreg$field2;
  STACKTOP = sp;return;
 }
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h29967336dbc48684E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr4null17ha1d8904ca86894b2E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h977f91fda7edfa1aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + (($5*40)|0)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr4null17ha1d8904ca86894b2E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h5da33358dd5c34e7E_81($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17h406f47aeda45b7f9E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $abi_cast = 0, $align = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg2 = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0;
 var $new_cap = 0, $ptr = 0, $self = 0, $self$i = 0, $tmp_ret = 0, $tmp_ret1 = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $tmp_ret = sp + 8|0;
 $tmp_ret1 = sp;
 $abi_cast = sp + 16|0;
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $used_cap = $4;
 $5 = $arg2;
 $needed_extra_cap = $5;
 $6 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $elem_size = $6;
 $7 = (__ZN4core3mem8align_of17he32ca0008511ab29E_18()|0);
 $align = $7;
 $8 = $self;
 $arg0$i = $8;
 $9 = $arg0$i;
 $self$i = $9;
 $10 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $_0$i = -1;
 } else {
  $12 = $self$i;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $_0$i = $14;
 }
 $15 = $_0$i;
 $16 = $used_cap;
 $17 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h927b60995810bc3aE($15,$16)|0);
 $18 = $needed_extra_cap;
 $19 = ($17>>>0)>=($18>>>0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $self;
 $21 = $used_cap;
 $22 = $needed_extra_cap;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17h3aea2dc40bc9c3d9E($tmp_ret,$20,$21,$22);
 $23 = ((($tmp_ret)) + 4|0);
 $24 = HEAP32[$tmp_ret>>2]|0;
 $25 = HEAP32[$23>>2]|0;
 $new_cap = $24;
 $new_alloc_size = $25;
 $26 = $new_alloc_size;
 __ZN5alloc7raw_vec11alloc_guard17h6eacc493ea6b88dbE_41($26);
 $27 = $self;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $new_alloc_size;
  $32 = $align;
  $33 = (__ZN5alloc4heap8allocate17h358fb0ac596fce84E_42($31,$32)|0);
  $ptr = $33;
 } else {
  $34 = $self;
  $35 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h0e1aeebaaf4243cdE_24($34)|0);
  $36 = $self;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $elem_size;
  $40 = Math_imul($38, $39)|0;
  $41 = $new_alloc_size;
  $42 = $align;
  $43 = (__ZN5alloc4heap10reallocate17he28f7928a028933bE_43($35,$40,$41,$42)|0);
  $ptr = $43;
 }
 $44 = $ptr;
 $45 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_35($44)|0);
 if ($45) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 $46 = $ptr;
 $47 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h1f125474e9b421a3E_82($46)|0);
 HEAP32[$abi_cast>>2] = $47;
 ;HEAP32[$tmp_ret1>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret1>>2]|0;
 $48 = $self;
 HEAP32[$48>>2] = $$field;
 $49 = $new_cap;
 $50 = $self;
 $51 = ((($50)) + 4|0);
 HEAP32[$51>>2] = $49;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17h3aea2dc40bc9c3d9E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_20 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $double_cap = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0, $new_cap = 0, $required_cap = 0, $self = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_9 = sp + 8|0;
 $_20 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $arg2 = $3;
 $4 = $arg0;
 $self = $4;
 $5 = $arg1;
 $used_cap = $5;
 $6 = $arg2;
 $needed_extra_cap = $6;
 $7 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $elem_size = $7;
 $8 = $used_cap;
 $9 = $needed_extra_cap;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17h4ded379d8122b068E($_9,$8,$9);
 $10 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hb17817c931012d25E($_9,6551,17)|0);
 $required_cap = $10;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<1;
 $double_cap = $14;
 $15 = $double_cap;
 $16 = $required_cap;
 $17 = (__ZN4core3cmp3max17h6f7732cf62a64ef1E($15,$16)|0);
 $new_cap = $17;
 $18 = $new_cap;
 $19 = $elem_size;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h150d4095fd2b51b1E($_20,$18,$19);
 $20 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hb17817c931012d25E($_20,6551,17)|0);
 $new_alloc_size = $20;
 $21 = $new_cap;
 $22 = $new_alloc_size;
 HEAP32[$0>>2] = $21;
 $23 = ((($0)) + 4|0);
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h1f125474e9b421a3E_82($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_8capacity17hd53f985907e887f4E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $_0$i = -1;
  $9 = $_0$i;
  STACKTOP = sp;return ($9|0);
 } else {
  $6 = $self$i;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $_0$i = $8;
  $9 = $_0$i;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17hefb432f9c1b0e606E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $index;
 __THREW__ = 0;
 $13 = (invoke_iiii(258,($9|0),($11|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17h5cc1b21a2071e27fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $len;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17h8dbfefd2bf0aae72E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = $index;
 $10 = HEAP32[$self>>2]|0;
 $11 = ((($self)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_iiii(259,($9|0),($10|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h6bc9bb7bb7d858f6E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg1 = sp + 8|0;
 $slice = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$slice>>2]|0;
 $10 = ((($slice)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h5da33358dd5c34e7E_81($9,$11)|0);
 $13 = $self;
 $14 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h525eb7a061c86864E($12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hb2d44d45bddba55bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_17 = 0, $arg0 = 0, $diff = 0, $exact = 0, $self = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_17 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $7 = $self;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h927b60995810bc3aE($6,$9)|0);
 $diff = $10;
 $11 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $size = $11;
 $12 = $diff;
 $13 = $size;
 $14 = ($13|0)==(0);
 if ($14) {
  $_11 = 1;
 } else {
  $15 = $size;
  $_11 = $15;
 }
 $16 = $_11;
 $17 = ($16|0)==(0);
 $18 = $17;
 if ($18) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(2452);
  // unreachable;
 } else {
  $19 = $_11;
  $20 = (($12>>>0) / ($19>>>0))&-1;
  $exact = $20;
  $21 = $exact;
  $22 = $exact;
  HEAP32[$_17>>2] = 1;
  $23 = ((($_17)) + 4|0);
  HEAP32[$23>>2] = $22;
  HEAP32[$0>>2] = $21;
  $24 = ((($0)) + 4|0);
  ;HEAP32[$24>>2]=HEAP32[$_17>>2]|0;HEAP32[$24+4>>2]=HEAP32[$_17+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h2bbace166a888de7E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_14 = 0, $arg0 = 0, $arg0$i = 0, $p = 0, $p1 = 0, $ptr = 0, $self = 0, $tmp_ret = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $p = (1);
 } else {
  $10 = HEAP32[$self>>2]|0;
  $11 = ((($self)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17hafa53ff357da28edE($10,$12)|0);
  $p1 = $13;
  $14 = $p1;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h29967336dbc48684E($14)|0);
  $15 = $p1;
  $p = $15;
 }
 $16 = $p;
 $17 = $p;
 $ptr = $17;
 $18 = $ptr;
 $arg0$i = $18;
 $19 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $20 = ($19|0)==(0);
 $21 = $ptr;
 if ($20) {
  $22 = HEAP32[$self>>2]|0;
  $23 = ((($self)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h2480914c11445481E_83($22,$24)|0);
  $26 = (($21) + ($25)|0);
  $tmp_ret = $26;
  $27 = $tmp_ret;
  $_14 = $27;
  HEAP32[$0>>2] = $16;
  $33 = $_14;
  $34 = ((($0)) + 4|0);
  HEAP32[$34>>2] = $33;
  STACKTOP = sp;return;
 } else {
  $28 = HEAP32[$self>>2]|0;
  $29 = ((($self)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h2480914c11445481E_83($28,$30)|0);
  $32 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h977f91fda7edfa1aE($21,$31)|0);
  $_14 = $32;
  HEAP32[$0>>2] = $16;
  $33 = $_14;
  $34 = ((($0)) + 4|0);
  HEAP32[$34>>2] = $33;
  STACKTOP = sp;return;
 }
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17hafa53ff357da28edE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h2480914c11445481E_83($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $lvalue_temp = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$lvalue_temp>>2] = $7;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($lvalue_temp)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_13with_capacity17h71389ee99eeecf16E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_5 = 0, $abi_cast = 0, $align = 0, $alloc_size = 0, $arg0 = 0, $cap = 0, $elem_size = 0, $ptr = 0, $ptr1 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_5 = sp + 8|0;
 $tmp_ret = sp;
 $abi_cast = sp + 16|0;
 $arg0 = $1;
 $2 = $arg0;
 $cap = $2;
 $3 = (__ZN4core3mem7size_of17hd154145e87414f75E_17()|0);
 $elem_size = $3;
 $4 = $cap;
 $5 = $elem_size;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h150d4095fd2b51b1E($_5,$4,$5);
 $6 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hb17817c931012d25E($_5,6551,17)|0);
 $alloc_size = $6;
 $7 = $alloc_size;
 __ZN5alloc7raw_vec11alloc_guard17h6eacc493ea6b88dbE_41($7);
 $8 = $alloc_size;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $ptr = (1);
  } else {
   $10 = (__ZN4core3mem8align_of17he32ca0008511ab29E_18()|0);
   $align = $10;
   $11 = $alloc_size;
   $12 = $align;
   $13 = (__ZN5alloc4heap8allocate17h358fb0ac596fce84E_42($11,$12)|0);
   $ptr1 = $13;
   $14 = $ptr1;
   $15 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_35($14)|0);
   if ($15) {
    __ZN5alloc3oom3oom17h9c08827c36eab673E();
    // unreachable;
   } else {
    $16 = $ptr1;
    $ptr = $16;
    break;
   }
  }
 } while(0);
 $17 = $ptr;
 $18 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h1f125474e9b421a3E_82($17)|0);
 HEAP32[$abi_cast>>2] = $18;
 ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret>>2]|0;
 $19 = $cap;
 HEAP32[$0>>2] = $$field;
 $20 = ((($0)) + 4|0);
 HEAP32[$20>>2] = $19;
 STACKTOP = sp;return;
}
function __ZN4core5slice14from_raw_parts17h6b986bdc7c0122b6E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_5>>2] = $4;
 $6 = ((($_5)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_5)) + 4|0);
 $8 = HEAP32[$_5>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN71__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h1691776ccf0c35dfE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_20 = 0, $_x = 0, $arg0 = 0, $iter = 0, $personalityslot = 0, $personalityslot$index6 = 0;
 var $personalityslot$index8 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $iter = sp + 100|0;
 $_10 = sp + 56|0;
 $_x = sp + 16|0;
 $_15 = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $0;
 $_20 = 0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core4iter8iterator8Iterator6by_ref17h400c74a3cd793277E($2)|0);
 $4 = (__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hb7c25f638c668ca6E($3)|0);
 HEAP32[$iter>>2] = $4;
 while(1) {
  $_20 = 1;
  __ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h876354f179e84854E($_10,$iter);
  $5 = HEAP32[$_10>>2]|0;
  $switch2 = ($5>>>0)<(1);
  $_20 = 0;
  if ($switch2) {
   label = 4;
   break;
  }
  $8 = ((($_10)) + 4|0);
  dest=$_x; src=$8; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  __THREW__ = 0;
  invoke_vi(153,($_x|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 13;
   break;
  }
  $19 = HEAP32[$_10>>2]|0;
  $switch = ($19>>>0)<(1);
  if (!($switch)) {
   continue;
  }
  __THREW__ = 0;
  invoke_vi(150,($_10|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   label = 14;
   break;
  }
 }
 do {
  if ((label|0) == 4) {
   __THREW__ = 0;
   invoke_vi(150,($_10|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    label = 14;
   } else {
    $11 = $self;
    $12 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd237dd8dec5f2ed2E($11)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $self;
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17hdd8fc42bc367b9c9E_84($_15,$13,$16);
    __THREW__ = 0;
    invoke_vi(260,($_15|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     label = 14;
    } else {
     STACKTOP = sp;return;
    }
   }
  }
  else if ((label|0) == 13) {
   $25 = ___cxa_find_matching_catch_2()|0;
   $26 = tempRet0;
   HEAP32[$personalityslot>>2] = $25;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $26;
   $27 = HEAP32[$_10>>2]|0;
   $switch1 = ($27>>>0)<(1);
   if ($switch1) {
    __ZN4drop17h348e10b97a61d454E($_10);
    break;
   }
   $20 = $_20;
   $21 = $20&1;
   if ($21) {
    $_20 = 0;
    $22 = ((($_10)) + 4|0);
    __ZN4drop17ha3594332bb7982ceE($22);
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = tempRet0;
  HEAP32[$personalityslot>>2] = $28;
  $personalityslot$index8 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index8>>2] = $29;
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN13drop_contents17h49fe11cdc496b758E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core4iter8iterator8Iterator6by_ref17h400c74a3cd793277E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hb7c25f638c668ca6E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h876354f179e84854E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = HEAP32[$3>>2]|0;
 __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17heed2247bd7a1b8ceE($0,$4);
 STACKTOP = sp;return;
}
function __ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd237dd8dec5f2ed2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc2c1b29b8009c8a6E_21($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17hdd8fc42bc367b9c9E_84($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $cap = 0, $ptr = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $abi_cast = sp + 4|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $cap = $4;
 $5 = $ptr;
 $6 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h1f125474e9b421a3E_82($5)|0);
 HEAP32[$abi_cast>>2] = $6;
 ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret>>2]|0;
 $7 = $cap;
 HEAP32[$0>>2] = $$field;
 $8 = ((($0)) + 4|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN4core3mem13uninitialized17h882ce1f8e2cecfbcE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3mem6forget17h6c8c051b67a6976aE($0) {
 $0 = $0|0;
 var $_3 = 0, $arg0 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 32|0;
 $t = sp + 16|0;
 $_3 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$t>>2]=HEAP32[$arg0>>2]|0;HEAP32[$t+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$t+8>>2]=HEAP32[$arg0+8>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$t>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$t+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN35__LT_core__ptr__Shared_LT_T_GT__GT_3new17h4efb4b6447e01f0cE($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17h4f455634a33ffa24E($0) {
 $0 = $0|0;
 var $$field$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h7901b8aacb3cb4b9E($tmp_ret);
 $1 = ((($tmp_ret)) + 4|0);
 $$field$field = HEAP32[$tmp_ret>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $$field$field;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h7901b8aacb3cb4b9E($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $abi_cast = 0, $cap = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp;
 $abi_cast = sp + 4|0;
 $1 = (__ZN4core3mem7size_of17h01334bab523b4211E_39()|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $cap = -1;
 } else {
  $cap = 0;
 }
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17haa9a9970a64771a8E((1))|0);
 HEAP32[$abi_cast>>2] = $3;
 ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret>>2]|0;
 $4 = $cap;
 HEAP32[$0>>2] = $$field;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN9simpledom9simpledom2el17h7194554ad55be29dE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val12 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_12 = 0, $_14 = 0, $_15 = 0, $_16 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $attrs = 0, $c = 0, $childrens = 0, $name = 0, $personalityslot = 0, $personalityslot$index6 = 0;
 var $personalityslot$index8 = 0, $switch = 0, $switch1 = 0, $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $arg0 = sp + 208|0;
 $arg1 = sp + 192|0;
 $arg2 = sp + 176|0;
 $name = sp + 168|0;
 $attrs = sp + 152|0;
 $childrens = sp + 136|0;
 $c = sp + 120|0;
 $_9 = sp + 104|0;
 $_10 = sp + 80|0;
 $_11 = sp + 64|0;
 $_12 = sp + 48|0;
 $_14 = sp + 32|0;
 $_15 = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $1;
 $5 = ((($arg0)) + 4|0);
 HEAP32[$5>>2] = $2;
 ;HEAP32[$arg1>>2]=HEAP32[$3>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$3+8>>2]|0;
 ;HEAP32[$arg2>>2]=HEAP32[$4>>2]|0;HEAP32[$arg2+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$arg2+8>>2]=HEAP32[$4+8>>2]|0;
 $_16 = 0;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$name>>2] = $6;
 $9 = ((($name)) + 4|0);
 HEAP32[$9>>2] = $8;
 ;HEAP32[$attrs>>2]=HEAP32[$arg1>>2]|0;HEAP32[$attrs+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$attrs+8>>2]=HEAP32[$arg1+8>>2]|0;
 $_16 = 1;
 ;HEAP32[$childrens>>2]=HEAP32[$arg2>>2]|0;HEAP32[$childrens+4>>2]=HEAP32[$arg2+4>>2]|0;HEAP32[$childrens+8>>2]=HEAP32[$arg2+8>>2]|0;
 $10 = HEAP32[$childrens>>2]|0;
 $11 = ($10|0)!=(0|0);
 $$expand_i1_val = $11&1;
 $$expand_i1_val9 = 1;
 $switch2 = ($$expand_i1_val&255)<($$expand_i1_val9&255);
 if ($switch2) {
  $12 = HEAP32[$name>>2]|0;
  $13 = ((($name)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  ;HEAP32[$_14>>2]=HEAP32[$attrs>>2]|0;HEAP32[$_14+4>>2]=HEAP32[$attrs+4>>2]|0;HEAP32[$_14+8>>2]=HEAP32[$attrs+8>>2]|0;
  HEAP32[$_15>>2] = 0;
  __THREW__ = 0;
  invoke_viiiii(261,($0|0),($12|0),($14|0),($_14|0),($_15|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   label = 13;
  }
 } else {
  $_16 = 0;
  ;HEAP32[$c>>2]=HEAP32[$childrens>>2]|0;HEAP32[$c+4>>2]=HEAP32[$childrens+4>>2]|0;HEAP32[$c+8>>2]=HEAP32[$childrens+8>>2]|0;
  $17 = HEAP32[$name>>2]|0;
  $18 = ((($name)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  ;HEAP32[$_9>>2]=HEAP32[$attrs>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$attrs+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$attrs+8>>2]|0;
  ;HEAP32[$_12>>2]=HEAP32[$c>>2]|0;HEAP32[$_12+4>>2]=HEAP32[$c+4>>2]|0;HEAP32[$_12+8>>2]=HEAP32[$c+8>>2]|0;
  HEAP32[$_11>>2] = 2;
  $20 = ((($_11)) + 4|0);
  ;HEAP32[$20>>2]=HEAP32[$_12>>2]|0;HEAP32[$20+4>>2]=HEAP32[$_12+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$_12+8>>2]|0;
  HEAP32[$_10>>2] = 1;
  $21 = ((($_10)) + 4|0);
  ;HEAP32[$21>>2]=HEAP32[$_11>>2]|0;HEAP32[$21+4>>2]=HEAP32[$_11+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$_11+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[$_11+12>>2]|0;
  __THREW__ = 0;
  invoke_viiiii(261,($0|0),($17|0),($19|0),($_9|0),($_10|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = $22&1;
  if ($23) {
   label = 13;
  }
 }
 if ((label|0) == 13) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  HEAP32[$personalityslot>>2] = $34;
  $personalityslot$index6 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index6>>2] = $35;
  $36 = HEAP32[$childrens>>2]|0;
  $37 = ($36|0)!=(0|0);
  $$expand_i1_val12 = $37&1;
  $$expand_i1_val13 = 1;
  $switch1 = ($$expand_i1_val12&255)<($$expand_i1_val13&255);
  if ($switch1) {
   __ZN4drop17h1e23d488269719a9E($childrens);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $26 = $_16;
  $27 = $26&1;
  if (!($27)) {
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $_16 = 0;
  __ZN4drop17h168a6168c579fd89E($childrens);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $24 = HEAP32[$childrens>>2]|0;
 $25 = ($24|0)!=(0|0);
 $$expand_i1_val10 = $25&1;
 $$expand_i1_val11 = 1;
 $switch = ($$expand_i1_val10&255)<($$expand_i1_val11&255);
 if ($switch) {
  __THREW__ = 0;
  invoke_vi(262,($childrens|0));
  $28 = __THREW__; __THREW__ = 0;
  $29 = $28&1;
  if (!($29)) {
   STACKTOP = sp;return;
  }
 } else {
  $30 = $_16;
  $31 = $30&1;
  if (!($31)) {
   STACKTOP = sp;return;
  }
  $_16 = 0;
  __THREW__ = 0;
  invoke_vi(184,($childrens|0));
  $32 = __THREW__; __THREW__ = 0;
  $33 = $32&1;
  if (!($33)) {
   STACKTOP = sp;return;
  }
 }
 $38 = ___cxa_find_matching_catch_2()|0;
 $39 = tempRet0;
 HEAP32[$personalityslot>>2] = $38;
 $personalityslot$index8 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index8>>2] = $39;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17h1e23d488269719a9E($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $1 = 0, $2 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 $$expand_i1_val = $2&1;
 $$expand_i1_val2 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val2&255);
 if ($switch) {
  return;
 }
 __ZN4drop17h168a6168c579fd89E($0);
 return;
}
function __ZN44__LT_i32_u20_as_u20_webplatform__Interop_GT_6as_int17h3367c0f98a6963e4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $arg0 = 0, $arg1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 STACKTOP = sp;return ($3|0);
}
function __ZN59__LT__RF__u27_a_u20_str_u20_as_u20_webplatform__Interop_GT_6as_int17h0651b868b4423f0dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$sreg$field = 0, $$sreg$field5 = 0, $$sreg$index4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_15 = 0, $_17 = 0, $_6 = 0, $arena = 0, $arg0 = 0, $arg1 = 0;
 var $c = 0, $personalityslot = 0, $personalityslot$index7 = 0, $ret = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp;
 $arg0 = sp + 64|0;
 $self = sp + 56|0;
 $c = sp + 48|0;
 $_6 = sp + 24|0;
 $_15 = sp + 16|0;
 $personalityslot = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 $arg1 = $2;
 $_17 = 0;
 $5 = HEAP32[$arg0>>2]|0;
 $6 = ((($arg0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$self>>2] = $5;
 $8 = ((($self)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $arg1;
 $arena = $9;
 $10 = HEAP32[$self>>2]|0;
 $11 = ((($self)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_viii(263,($_6|0),($10|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  __THREW__ = 0;
  invoke_vii(264,($c|0),($_6|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if (!($16)) {
   $_17 = 1;
   __THREW__ = 0;
   invoke_vii(265,($3|0),($c|0));
   $$sreg$field = HEAP32[$3>>2]|0;
   $$sreg$index4 = ((($3)) + 4|0);
   $$sreg$field5 = HEAP32[$$sreg$index4>>2]|0;
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if (!($18)) {
    __THREW__ = 0;
    $19 = (invoke_iii(266,($$sreg$field|0),($$sreg$field5|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     $22 = $19;
     $ret = $22;
     $23 = $arena;
     $_17 = 0;
     ;HEAP32[$_15>>2]=HEAP32[$c>>2]|0;HEAP32[$_15+4>>2]=HEAP32[$c+4>>2]|0;
     __THREW__ = 0;
     invoke_vii(267,($23|0),($_15|0));
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if (!($25)) {
      $26 = $ret;
      STACKTOP = sp;return ($26|0);
     }
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch_2()|0;
 $28 = tempRet0;
 HEAP32[$personalityslot>>2] = $27;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $28;
 $29 = $_17;
 $30 = $29&1;
 if (!($30)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_17 = 0;
 __ZN4drop17h93ceda8e58e3fb30E($c);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN3std3ffi5c_str7CString3new17hab7958d187e8293dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $arg0 = 0, $personalityslot = 0;
 var $personalityslot$index1 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 32|0;
 $t = sp + 24|0;
 $_3 = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$t>>2] = $4;
 $7 = ((($t)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$t>>2]|0;
 $9 = ((($t)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_viii(268,($_3|0),($8|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __THREW__ = 0;
  invoke_vii(269,($0|0),($_3|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   STACKTOP = sp;return;
  }
 }
 $15 = ___cxa_find_matching_catch_2()|0;
 $16 = tempRet0;
 HEAP32[$personalityslot>>2] = $15;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $16;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6unwrap17h848dd51f972045adE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_8 = 0, $_9 = 0, $arg0 = 0, $e = 0, $personalityslot = 0, $personalityslot$index6 = 0, $personalityslot$index8 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $arg0 = sp + 80|0;
 $self = sp + 56|0;
 $t = sp + 48|0;
 $e = sp + 32|0;
 $_5 = sp + 24|0;
 $_8 = sp + 8|0;
 $personalityslot = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$arg0+16>>2]=HEAP32[$1+16>>2]|0;
 $_10 = 0;
 $_9 = 0;
 $_9 = 1;
 $_10 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$self+12>>2]=HEAP32[$arg0+12>>2]|0;HEAP32[$self+16>>2]=HEAP32[$arg0+16>>2]|0;
 $2 = HEAP32[$self>>2]|0;
 $switch1 = ($2>>>0)<(1);
 do {
  if ($switch1) {
   $_10 = 0;
   $3 = ((($self)) + 4|0);
   ;HEAP32[$t>>2]=HEAP32[$3>>2]|0;HEAP32[$t+4>>2]=HEAP32[$3+4>>2]|0;
   ;HEAP32[$_5>>2]=HEAP32[$t>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$t+4>>2]|0;
   ;HEAP32[$0>>2]=HEAP32[$_5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_5+4>>2]|0;
   $4 = HEAP32[$self>>2]|0;
   $switch = ($4>>>0)<(1);
   if ($switch) {
    STACKTOP = sp;return;
   }
   $_9 = 0;
   $16 = ((($self)) + 4|0);
   __THREW__ = 0;
   invoke_vi(271,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    HEAP32[$personalityslot>>2] = $19;
    $personalityslot$index8 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index8>>2] = $20;
    break;
   } else {
    STACKTOP = sp;return;
   }
  } else {
   $_9 = 0;
   $5 = ((($self)) + 4|0);
   ;HEAP32[$e>>2]=HEAP32[$5>>2]|0;HEAP32[$e+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$e+12>>2]=HEAP32[$5+12>>2]|0;
   ;HEAP32[$_8>>2]=HEAP32[$e>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$e+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$e+12>>2]|0;
   __THREW__ = 0;
   invoke_viii(270,(6712|0),43,($_8|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = ___cxa_find_matching_catch_2()|0;
   $8 = tempRet0;
   HEAP32[$personalityslot>>2] = $7;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $8;
   $9 = HEAP32[$self>>2]|0;
   $switch2 = ($9>>>0)<(1);
   if ($switch2) {
    $10 = $_10;
    $11 = $10&1;
    if (!($11)) {
     break;
    }
    $_10 = 0;
    $12 = ((($self)) + 4|0);
    __ZN4drop17h93ceda8e58e3fb30E($12);
    break;
   } else {
    $13 = $_9;
    $14 = $13&1;
    if (!($14)) {
     break;
    }
    $_9 = 0;
    $15 = ((($self)) + 4|0);
    __ZN4drop17hed62fb861afed8c2E($15);
    break;
   }
  }
 } while(0);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_4push17he3535db2a74cca90E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$sreg$field = 0, $$sreg$field5 = 0, $$sreg$index4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_21 = 0, $_22 = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $end = 0, $personalityslot = 0, $personalityslot$index7 = 0, $self = 0;
 var $self$i = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = sp;
 $arg1 = sp + 32|0;
 $value = sp + 24|0;
 $_21 = sp + 16|0;
 $personalityslot = sp + 8|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $_22 = 0;
 $3 = $arg0;
 $self = $3;
 $_22 = 1;
 ;HEAP32[$value>>2]=HEAP32[$arg1>>2]|0;HEAP32[$value+4>>2]=HEAP32[$arg1+4>>2]|0;
 $4 = $self;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $self;
 $arg0$i = $7;
 $8 = $arg0$i;
 $self$i = $8;
 __THREW__ = 0;
 $9 = (invoke_i(272)|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 do {
  if (!($11)) {
   $12 = ($9|0)==(0);
   if ($12) {
    $_0$i = -1;
   } else {
    $13 = $self$i;
    $14 = ((($13)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $_0$i = $15;
   }
   $16 = $_0$i;
   $17 = ($6|0)==($16|0);
   if ($17) {
    $18 = $self;
    __THREW__ = 0;
    invoke_vi(273,($18|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     break;
    }
   }
   $21 = $self;
   __THREW__ = 0;
   invoke_vii(274,($2|0),($21|0));
   $$sreg$field = HEAP32[$2>>2]|0;
   $$sreg$index4 = ((($2)) + 4|0);
   $$sreg$field5 = HEAP32[$$sreg$index4>>2]|0;
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    $24 = (invoke_iii(275,($$sreg$field|0),($$sreg$field5|0))|0);
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if (!($26)) {
     $27 = $self;
     $28 = ((($27)) + 8|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     $30 = (invoke_iii(276,($24|0),($29|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $end = $30;
      $33 = $end;
      $_22 = 0;
      ;HEAP32[$_21>>2]=HEAP32[$value>>2]|0;HEAP32[$_21+4>>2]=HEAP32[$value+4>>2]|0;
      __THREW__ = 0;
      invoke_vii(277,($33|0),($_21|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if (!($35)) {
       $36 = $self;
       $37 = ((($36)) + 8|0);
       $38 = $self;
       $39 = ((($38)) + 8|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = (($40) + 1)|0;
       HEAP32[$37>>2] = $41;
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 } while(0);
 $42 = ___cxa_find_matching_catch_2()|0;
 $43 = tempRet0;
 HEAP32[$personalityslot>>2] = $42;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $43;
 $44 = $_22;
 $45 = $44&1;
 if (!($45)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_22 = 0;
 __ZN4drop17h93ceda8e58e3fb30E($value);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17h93ceda8e58e3fb30E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(278,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h93ceda8e58e3fb30E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h93ceda8e58e3fb30E($0);
  STACKTOP = sp;return;
 }
}
function __ZN60__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Drop_GT_4drop17h2bba541bafbc67a6E_91($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h84d763b59a1692f0E_94($3,$5,0)|0);
 HEAP8[$6>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h93ceda8e58e3fb30E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hb2a34a0868cbb90aE($0);
 return;
}
function __ZN4drop17hb2a34a0868cbb90aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  return;
 }
 __ZN5alloc4heap13exchange_free17h5720505cfcfb7278E_92($1,$4,1);
 return;
}
function __ZN5alloc4heap13exchange_free17h5720505cfcfb7278E_92($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $align = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $old_size = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $old_size = $4;
 $5 = $arg2;
 $align = $5;
 $6 = $ptr;
 $7 = $old_size;
 $8 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E_93($6,$7,$8);
 STACKTOP = sp;return;
}
function __ZN5alloc4heap10deallocate17h2ed96d866771a555E_93($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $align = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $old_size = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $old_size = $4;
 $5 = $arg2;
 $align = $5;
 $6 = $ptr;
 $7 = $old_size;
 $8 = $align;
 ___rust_deallocate($6,$7,$8);
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h84d763b59a1692f0E_94($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $index;
 __THREW__ = 0;
 $13 = (invoke_iiii(279,($9|0),($11|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_95($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = $index;
 $10 = HEAP32[$self>>2]|0;
 $11 = ((($self)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_iiii(280,($9|0),($10|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17hf7aa56bc41f16c53E_96($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg1 = sp + 8|0;
 $slice = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$slice>>2]|0;
 $10 = ((($slice)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h40f049985213b358E_97($9,$11)|0);
 $13 = $self;
 $14 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h3666bfeb514b5534E_98($12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h40f049985213b358E_97($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h3666bfeb514b5534E_98($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3mem7size_of17h6b2a5e5b6654bff6E_99() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 8;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h89230ed3ec57b141E($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $abi_cast = 0, $align = 0, $arg0 = 0, $elem_size = 0, $new_alloc_size = 0, $new_cap = 0;
 var $new_cap1 = 0, $new_cap3 = 0, $ptr = 0, $ptr2 = 0, $ptr4 = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_13 = sp + 8|0;
 $tmp_ret = sp;
 $abi_cast = sp + 16|0;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h6b2a5e5b6654bff6E_99()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 $5 = $4 ^ 1;
 if ($5) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3160);
  // unreachable;
 }
 $6 = (__ZN4core3mem8align_of17h47c7e034cc1677e4E_107()|0);
 $align = $6;
 $7 = $self;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $elem_size;
  $12 = ($11>>>0)>(536870911);
  if ($12) {
   $new_cap1 = 1;
  } else {
   $new_cap1 = 4;
  }
  $34 = $new_cap1;
  $35 = $elem_size;
  $36 = Math_imul($34, $35)|0;
  $37 = $align;
  $38 = (__ZN5alloc4heap8allocate17h358fb0ac596fce84E_109($36,$37)|0);
  $ptr2 = $38;
  $39 = $new_cap1;
  $40 = $ptr2;
  HEAP32[$_13>>2] = $39;
  $41 = ((($_13)) + 4|0);
  HEAP32[$41>>2] = $40;
 } else {
  $13 = $self;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $new_cap3 = $16;
  $17 = $new_cap3;
  $18 = $elem_size;
  $19 = Math_imul($17, $18)|0;
  $new_alloc_size = $19;
  $20 = $new_alloc_size;
  __ZN5alloc7raw_vec11alloc_guard17h6eacc493ea6b88dbE_108($20);
  $21 = $self;
  $22 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h9e50d461979fcd78E_101($21)|0);
  $23 = $self;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $elem_size;
  $27 = Math_imul($25, $26)|0;
  $28 = $new_alloc_size;
  $29 = $align;
  $30 = (__ZN5alloc4heap10reallocate17he28f7928a028933bE_110($22,$27,$28,$29)|0);
  $ptr4 = $30;
  $31 = $new_cap3;
  $32 = $ptr4;
  HEAP32[$_13>>2] = $31;
  $33 = ((($_13)) + 4|0);
  HEAP32[$33>>2] = $32;
 }
 $42 = HEAP32[$_13>>2]|0;
 $new_cap = $42;
 $43 = ((($_13)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $ptr = $44;
 $45 = $ptr;
 $46 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_111($45)|0);
 if ($46) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 } else {
  $47 = $ptr;
  $48 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h65b05d74ea2ba073E_112($47)|0);
  HEAP32[$abi_cast>>2] = $48;
  ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
  $$field = HEAP32[$tmp_ret>>2]|0;
  $49 = $self;
  HEAP32[$49>>2] = $$field;
  $50 = $new_cap;
  $51 = $self;
  $52 = ((($51)) + 4|0);
  HEAP32[$52>>2] = $50;
  STACKTOP = sp;return;
 }
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hbb28d721bf2c09f8E_100($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h9e50d461979fcd78E_101($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h2a6bbe28f7c4c9eeE_102($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17h03b09f3afc0dd1deE_103($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h415221f0d0dabf3cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h2655591ea027e435E($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h452f56dc7507ccaaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5<<3)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr5write17h62a7db69e6ff587bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_8 = 0, $arg0 = 0, $arg1 = 0, $dst = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg1 = sp + 16|0;
 $src = sp + 8|0;
 $_8 = sp;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $2 = $arg0;
 $dst = $2;
 ;HEAP32[$src>>2]=HEAP32[$arg1>>2]|0;HEAP32[$src+4>>2]=HEAP32[$arg1+4>>2]|0;
 $3 = $dst;
 ;HEAP32[$_8>>2]=HEAP32[$src>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$src+4>>2]|0;
 ;HEAP32[$3>>2]=HEAP32[$_8>>2]|0;HEAP32[$3+4>>2]=HEAP32[$_8+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h2655591ea027e435E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = sp + 8|0;
 $self = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h9e50d461979fcd78E_101($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h27a654e33c937434E_105($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h2a6bbe28f7c4c9eeE_102($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h9f2658e12a6cea87E_104()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core5slice18from_raw_parts_mut17h03b09f3afc0dd1deE_103($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core3ptr8null_mut17h9f2658e12a6cea87E_104() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h27a654e33c937434E_105($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hf993be83807f3270E_106($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hf993be83807f3270E_106($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3mem8align_of17h47c7e034cc1677e4E_107() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN5alloc7raw_vec11alloc_guard17h6eacc493ea6b88dbE_108($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $alloc_size = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $alloc_size = $1;
 $2 = (__ZN4core3mem7size_of17hf53622acb0d5c06dE_114()|0);
 $3 = ($2>>>0)<(8);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $alloc_size;
 $5 = ($4>>>0)<=(2147483647);
 $6 = $5 ^ 1;
 if ($6) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN5alloc4heap8allocate17h358fb0ac596fce84E_109($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $align$i = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg1$i = 0, $size = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $size = $2;
 $3 = $arg1;
 $align = $3;
 $4 = $size;
 $5 = $align;
 $arg0$i = $4;
 $arg1$i = $5;
 $6 = $arg0$i;
 $size$i = $6;
 $7 = $arg1$i;
 $align$i = $7;
 $8 = $size;
 $9 = $align;
 $10 = (___rust_allocate($8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN5alloc4heap10reallocate17he28f7928a028933bE_110($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $align$i = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg1$i = 0, $arg2 = 0;
 var $arg3 = 0, $old_size = 0, $ptr = 0, $size = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $arg3 = $3;
 $4 = $arg0;
 $ptr = $4;
 $5 = $arg1;
 $old_size = $5;
 $6 = $arg2;
 $size = $6;
 $7 = $arg3;
 $align = $7;
 $8 = $size;
 $9 = $align;
 $arg0$i = $8;
 $arg1$i = $9;
 $10 = $arg0$i;
 $size$i = $10;
 $11 = $arg1$i;
 $align$i = $11;
 $12 = $ptr;
 $13 = $old_size;
 $14 = $size;
 $15 = $align;
 $16 = (___rust_reallocate($12,$13,$14,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_111($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h53c0df43cabeafe8E_113()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h65b05d74ea2ba073E_112($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3ptr8null_mut17h53c0df43cabeafe8E_113() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN4core3mem7size_of17hf53622acb0d5c06dE_114() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core6result13unwrap_failed17hdffd96b76ab17f0aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_5 = 0, $__arg0 = 0, $__arg1 = 0, $arg0 = 0;
 var $arg1 = 0, $error = 0, $msg = 0, $personalityslot = 0, $personalityslot$index1 = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $arg0 = sp + 112|0;
 $arg1 = sp + 96|0;
 $msg = sp + 88|0;
 $error = sp + 72|0;
 $_5 = sp + 48|0;
 $_10 = sp + 32|0;
 $_11 = sp + 24|0;
 $tmp_ret = sp + 16|0;
 $personalityslot = sp + 8|0;
 $tmp_ret1 = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 ;HEAP32[$arg1>>2]=HEAP32[$2>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$2+12>>2]|0;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$msg>>2] = $4;
 $7 = ((($msg)) + 4|0);
 HEAP32[$7>>2] = $6;
 ;HEAP32[$error>>2]=HEAP32[$arg1>>2]|0;HEAP32[$error+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$error+8>>2]=HEAP32[$arg1+8>>2]|0;HEAP32[$error+12>>2]=HEAP32[$arg1+12>>2]|0;
 $8 = HEAP32[830]|0;
 $9 = HEAP32[(3324)>>2]|0;
 HEAP32[$_11>>2] = $msg;
 $10 = ((($_11)) + 4|0);
 HEAP32[$10>>2] = $error;
 $11 = HEAP32[$_11>>2]|0;
 $__arg0 = $11;
 $12 = ((($_11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $__arg1 = $13;
 $14 = $__arg0;
 __THREW__ = 0;
 invoke_viii(281,($tmp_ret|0),($14|0),(282|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = ((($tmp_ret)) + 4|0);
  $18 = HEAP32[$tmp_ret>>2]|0;
  $19 = HEAP32[$17>>2]|0;
  $20 = $__arg1;
  __THREW__ = 0;
  invoke_viii(283,($tmp_ret1|0),($20|0),(284|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   $23 = ((($tmp_ret1)) + 4|0);
   $24 = HEAP32[$tmp_ret1>>2]|0;
   $25 = HEAP32[$23>>2]|0;
   HEAP32[$_10>>2] = $18;
   $26 = ((($_10)) + 4|0);
   HEAP32[$26>>2] = $19;
   $27 = ((($_10)) + 8|0);
   HEAP32[$27>>2] = $24;
   $28 = ((($27)) + 4|0);
   HEAP32[$28>>2] = $25;
   __THREW__ = 0;
   invoke_viiiii(285,($_5|0),($8|0),($9|0),($_10|0),2);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    __THREW__ = 0;
    invoke_vii(100,($_5|0),(3308|0));
    $31 = __THREW__; __THREW__ = 0;
   }
  }
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = tempRet0;
 HEAP32[$personalityslot>>2] = $32;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $33;
 __ZN4drop17hed62fb861afed8c2E($error);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17hed62fb861afed8c2E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZN4drop17h04868e66b5580599E($1);
 return;
}
function __ZN4drop17h04868e66b5580599E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(286,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h04868e66b5580599E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h04868e66b5580599E($0);
  STACKTOP = sp;return;
 }
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h02e82e970be211cdE_116($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $drop = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $drop = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h0c3befd6c0903ed0E_122($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$drop>>2] = $$sreg$field;
 $4 = ((($drop)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h04868e66b5580599E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h40a22d2f9b33d86fE($0);
 return;
}
function __ZN4drop17h40a22d2f9b33d86fE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(287,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h40a22d2f9b33d86fE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h40a22d2f9b33d86fE($0);
  STACKTOP = sp;return;
 }
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h32cd9b80ae08eae3E_117($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h01334bab523b4211E_118()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17ha27b5d1180f16c91E_119()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hbd38f9fc458f30d0E_120($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E_93($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h40a22d2f9b33d86fE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3mem7size_of17h01334bab523b4211E_118() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17ha27b5d1180f16c91E_119() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hbd38f9fc458f30d0E_120($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc27d5060612007fdE_121($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc27d5060612007fdE_121($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h0c3befd6c0903ed0E_122($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h87e2ccedc14ca01bE_123($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h87e2ccedc14ca01bE_123($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h80ac1ad82cccc24eE_124($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_111($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17h101fab0c1c9324ddE_125($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h80ac1ad82cccc24eE_124($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hbd38f9fc458f30d0E_120($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core5slice18from_raw_parts_mut17h101fab0c1c9324ddE_125($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17ha3b8a98364490850E_126($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $f = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $f;
 $9 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hded13da3919e24b6E($5,$7,$8)|0);
 HEAP8[$abi_cast>>0] = $9;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $10 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3fmt10ArgumentV13new17h4fc99b8d04e93a27E_127($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt10ArgumentV13new17h6c2fb50d9ad38205E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt9Arguments6new_v117h22aa263f6d4613b4E_128($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_6 = 0, $arg0 = 0, $arg1 = 0, $args = 0, $pieces = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 32|0;
 $arg1 = sp + 24|0;
 $pieces = sp + 16|0;
 $args = sp + 8|0;
 $_6 = sp;
 HEAP32[$arg0>>2] = $1;
 $5 = ((($arg0)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$arg1>>2] = $3;
 $6 = ((($arg1)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[$arg0>>2]|0;
 $8 = ((($arg0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$pieces>>2] = $7;
 $10 = ((($pieces)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$arg1>>2]|0;
 $12 = ((($arg1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$args>>2] = $11;
 $14 = ((($args)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$pieces>>2]|0;
 $16 = ((($pieces)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$_6>>2] = 0;
 $18 = HEAP32[$args>>2]|0;
 $19 = ((($args)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$0>>2] = $15;
 $21 = ((($0)) + 4|0);
 HEAP32[$21>>2] = $17;
 $22 = ((($0)) + 8|0);
 ;HEAP32[$22>>2]=HEAP32[$_6>>2]|0;HEAP32[$22+4>>2]=HEAP32[$_6+4>>2]|0;
 $23 = ((($0)) + 16|0);
 HEAP32[$23>>2] = $18;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $20;
 STACKTOP = sp;return;
}
function __ZN50__LT_T_u20_as_u20_core__convert__Into_LT_U_GT__GT_4into17h2425fe24d2f28555E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = sp + 16|0;
 $self = sp + 8|0;
 $personalityslot = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_viii(288,($0|0),($8|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  HEAP32[$personalityslot>>2] = $13;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $14;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN67__LT__BP_const_u20_libc__c_void_u20_as_u20_webplatform__Interop_GT_6as_int17hf35a8fa3e6501bb1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $arg1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = $3;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3fmt10ArgumentV13new17ha2f19ba0a108ab54E_131($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN71__LT_webplatform__HtmlNode_LT__u27_a_GT__u20_as_u20_core__ops__Drop_GT_4drop17hc195ff3c5a7ba048E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_4 = 0, $_9 = 0, $__arg0 = 0, $arg0 = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_4 = sp + 24|0;
 $_9 = sp + 16|0;
 $_10 = sp + 8|0;
 $tmp_ret = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = HEAP32[618]|0;
 $3 = HEAP32[(2476)>>2]|0;
 $4 = $self;
 HEAP32[$_10>>2] = $4;
 $5 = HEAP32[$_10>>2]|0;
 $__arg0 = $5;
 $6 = $__arg0;
 __ZN4core3fmt10ArgumentV13new17ha2f19ba0a108ab54E_131($tmp_ret,$6,140);
 $7 = ((($tmp_ret)) + 4|0);
 $8 = HEAP32[$tmp_ret>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$_9>>2] = $8;
 $10 = ((($_9)) + 4|0);
 HEAP32[$10>>2] = $9;
 __ZN4core3fmt9Arguments6new_v117h22aa263f6d4613b4E_128($_4,$2,$3,$_9,1);
 __ZN3std2io5stdio6_print17hd5142059f0ff0076E($_4);
 STACKTOP = sp;return;
}
function __ZN69__LT_webplatform__JSRef_LT__u27_a_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc06a047d3cde0b52E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN11webplatform8HtmlNode8root_ref17h34de0e5d252bfac5E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 HEAP32[$_0>>2] = $2;
 $3 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17h38da251d6b68dc83E_138($0) {
 $0 = $0|0;
 var $$field$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h895432b4e85f32a8E_142($tmp_ret);
 $1 = ((($tmp_ret)) + 4|0);
 $$field$field = HEAP32[$tmp_ret>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $$field$field;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4drop17h357bb778b7856b74E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(289,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h357bb778b7856b74E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h357bb778b7856b74E($0);
  STACKTOP = sp;return;
 }
}
function __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6unwrap17h77beda18c5a0abfbE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$field = 0, $$field11 = 0, $$field2 = 0, $$field5 = 0, $$field8 = 0, $$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_8 = 0, $_9 = 0, $arg = 0, $arg0 = 0, $e = 0, $personalityslot = 0, $personalityslot$index13 = 0, $retVal$index14 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $t = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $arg0 = sp + 56|0;
 $self = sp + 40|0;
 $t = sp + 32|0;
 $e = sp + 24|0;
 $_8 = sp + 16|0;
 $arg = sp + 8|0;
 $personalityslot = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;
 $_10 = 0;
 $_9 = 0;
 $_9 = 1;
 $_10 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;
 $1 = HEAP32[$self>>2]|0;
 $switch1 = ($1>>>0)<(1);
 if ($switch1) {
  $_10 = 0;
  $2 = ((($self)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($2)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$t>>2] = $3;
  $6 = ((($t)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$t>>2]|0;
  $8 = ((($t)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$self>>2]|0;
  $switch = ($10>>>0)<(1);
  if ($switch) {
   HEAP32[$retVal>>2] = $7;
   $retVal$index14 = ((($retVal)) + 4|0);
   HEAP32[$retVal$index14>>2] = $9;
   STACKTOP = sp;return;
  }
  $_9 = 0;
  HEAP32[$retVal>>2] = $7;
  $retVal$index14 = ((($retVal)) + 4|0);
  HEAP32[$retVal$index14>>2] = $9;
  STACKTOP = sp;return;
 }
 $_9 = 0;
 $11 = ((($self)) + 4|0);
 $$field5 = HEAP32[$11>>2]|0;
 HEAP32[$e>>2] = $$field5;
 $$field8 = HEAP32[$e>>2]|0;
 HEAP32[$_8>>2] = $$field8;
 $$field11 = HEAP32[$_8>>2]|0;
 HEAP32[$arg>>2] = $$field11;
 $12 = HEAP32[$arg>>2]|0;
 __THREW__ = 0;
 invoke_viii(290,(6712|0),43,($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 HEAP32[$personalityslot>>2] = $14;
 $personalityslot$index13 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index13>>2] = $15;
 $16 = HEAP32[$self>>2]|0;
 $switch2 = ($16>>>0)<(1);
 if ($switch2) {
  $17 = $_10;
  $18 = $17&1;
  if ($18) {
   $_10 = 0;
  }
 } else {
  $19 = $_9;
  $20 = $19&1;
  if ($20) {
   $_9 = 0;
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core6result13unwrap_failed17hec8642c937e35d08E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$field6 = 0, $$index5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_5 = 0, $__arg0 = 0, $__arg1 = 0;
 var $abi_cast = 0, $arg0 = 0, $arg1 = 0, $error = 0, $msg = 0, $personalityslot = 0, $personalityslot$index1 = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $arg0 = sp + 96|0;
 $arg1 = sp + 88|0;
 $abi_cast = sp + 112|0;
 $msg = sp + 80|0;
 $error = sp + 72|0;
 $_5 = sp + 48|0;
 $_10 = sp + 32|0;
 $_11 = sp + 24|0;
 $tmp_ret = sp + 16|0;
 $personalityslot = sp + 8|0;
 $tmp_ret1 = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 HEAP32[$abi_cast>>2] = $2;
 ;HEAP32[$arg1>>2]=HEAP32[$abi_cast>>2]|0;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$msg>>2] = $4;
 $7 = ((($msg)) + 4|0);
 HEAP32[$7>>2] = $6;
 $$field = HEAP32[$arg1>>2]|0;
 HEAP32[$error>>2] = $$field;
 $8 = HEAP32[830]|0;
 $9 = HEAP32[(3324)>>2]|0;
 HEAP32[$_11>>2] = $msg;
 $10 = ((($_11)) + 4|0);
 HEAP32[$10>>2] = $error;
 $11 = HEAP32[$_11>>2]|0;
 $__arg0 = $11;
 $12 = ((($_11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $__arg1 = $13;
 $14 = $__arg0;
 __THREW__ = 0;
 invoke_viii(281,($tmp_ret|0),($14|0),(282|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = ((($tmp_ret)) + 4|0);
  $18 = HEAP32[$tmp_ret>>2]|0;
  $19 = HEAP32[$17>>2]|0;
  $20 = $__arg1;
  __THREW__ = 0;
  invoke_viii(291,($tmp_ret1|0),($20|0),(292|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   $23 = ((($tmp_ret1)) + 4|0);
   $24 = HEAP32[$tmp_ret1>>2]|0;
   $25 = HEAP32[$23>>2]|0;
   HEAP32[$_10>>2] = $18;
   $26 = ((($_10)) + 4|0);
   HEAP32[$26>>2] = $19;
   $27 = ((($_10)) + 8|0);
   HEAP32[$27>>2] = $24;
   $28 = ((($27)) + 4|0);
   HEAP32[$28>>2] = $25;
   __THREW__ = 0;
   invoke_viiiii(285,($_5|0),($8|0),($9|0),($_10|0),2);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    __THREW__ = 0;
    invoke_vii(100,($_5|0),(3308|0));
    $31 = __THREW__; __THREW__ = 0;
   }
  }
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = tempRet0;
 HEAP32[$personalityslot>>2] = $32;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $33;
 $$field3 = HEAP32[$personalityslot>>2]|0;
 $$index5 = ((($personalityslot)) + 4|0);
 $$field6 = HEAP32[$$index5>>2]|0;
 ___resumeException($$field3|0);
 // unreachable;
}
function __ZN4core3fmt10ArgumentV13new17h4ed55bf2e647755dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $lvalue_temp = 0, $lvalue_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lvalue_temp = sp + 4|0;
 $lvalue_temp1 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$lvalue_temp>>2] = $5;
 $6 = HEAP32[$lvalue_temp>>2]|0;
 $7 = $x;
 HEAP32[$lvalue_temp1>>2] = $7;
 $8 = HEAP32[$lvalue_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h2e4caa7870aa83f2E_139($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $drop = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $drop = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h130b5405457e69f3E_141($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$drop>>2] = $$sreg$field;
 $4 = ((($drop)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 __ZN4drop17hbe8fa62b5ecaf6e2E($drop);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h357bb778b7856b74E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h18ece52aa04a2eb1E($0);
 return;
}
function __ZN4drop17h18ece52aa04a2eb1E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(293,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h18ece52aa04a2eb1E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h18ece52aa04a2eb1E($0);
  STACKTOP = sp;return;
 }
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h0e26fdf6fdd614d7E_140($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h6b2a5e5b6654bff6E_99()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17h47c7e034cc1677e4E_107()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h27a654e33c937434E_105($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E_93($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h18ece52aa04a2eb1E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h130b5405457e69f3E_141($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hbb28d721bf2c09f8E_100($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN4drop17hbe8fa62b5ecaf6e2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3<<3)|0);
 $6 = $1;
 while(1) {
  $5 = ($6|0)!=($4|0);
  if (!($5)) {
   break;
  }
  __ZN4drop17h93ceda8e58e3fb30E($6);
  $7 = ((($6)) + 8|0);
  $6 = $7;
 }
 return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h895432b4e85f32a8E_142($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $abi_cast = 0, $cap = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp;
 $abi_cast = sp + 4|0;
 $1 = (__ZN4core3mem7size_of17h6b2a5e5b6654bff6E_99()|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $cap = -1;
 } else {
  $cap = 0;
 }
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h65b05d74ea2ba073E_112((1))|0);
 HEAP32[$abi_cast>>2] = $3;
 ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret>>2]|0;
 $4 = $cap;
 HEAP32[$0>>2] = $$field;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN5alloc4heap15exchange_malloc17h8890b6b3bb39aab2E_146($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $align = 0, $arg0 = 0, $arg1 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $size = $2;
 $3 = $arg1;
 $align = $3;
 $4 = $size;
 $5 = ($4|0)==(0);
 if ($5) {
  $_0 = (1);
  $12 = $_0;
  STACKTOP = sp;return ($12|0);
 }
 $6 = $size;
 $7 = $align;
 $8 = (__ZN5alloc4heap8allocate17h358fb0ac596fce84E_109($6,$7)|0);
 $ptr = $8;
 $9 = $ptr;
 $10 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h3f8d40b8a5810e9fE_111($9)|0);
 if ($10) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 $11 = $ptr;
 $_0 = $11;
 $12 = $_0;
 STACKTOP = sp;return ($12|0);
}
function __ZN11webplatform8HtmlNode12prop_set_str17h91e26a3cbc5bcd7aE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_29 = 0, $arena = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $s = 0, $self = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $arg1 = sp + 48|0;
 $arg2 = sp + 40|0;
 $s = sp + 32|0;
 $v = sp + 24|0;
 $arena = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $5 = ((($arg1)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$arg2>>2] = $3;
 $6 = ((($arg2)) + 4|0);
 HEAP32[$6>>2] = $4;
 $_29 = 0;
 $7 = $arg0;
 $self = $7;
 $8 = HEAP32[$arg1>>2]|0;
 $9 = ((($arg1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$s>>2] = $8;
 $11 = ((($s)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$arg2>>2]|0;
 $13 = ((($arg2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$v>>2] = $12;
 $15 = ((($v)) + 4|0);
 HEAP32[$15>>2] = $14;
 __THREW__ = 0;
 invoke_vi(294,($arena|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  $_29 = 1;
  $18 = $self;
  $19 = HEAP32[$18>>2]|0;
  __THREW__ = 0;
  $20 = (invoke_iii(71,($19|0),($arena|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   $23 = HEAP32[$s>>2]|0;
   $24 = ((($s)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   __THREW__ = 0;
   $26 = (invoke_iiii(72,($23|0),($25|0),($arena|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if (!($28)) {
    $29 = HEAP32[$v>>2]|0;
    $30 = ((($v)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    __THREW__ = 0;
    $32 = (invoke_iiii(72,($29|0),($31|0),($arena|0))|0);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if (!($34)) {
     $35 = _emscripten_asm_const_iiii(1, ($20|0), ($26|0), ($32|0))|0;
     $_29 = 0;
     __THREW__ = 0;
     invoke_vi(295,($arena|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if (!($37)) {
      STACKTOP = sp;return;
     }
     $42 = ___cxa_find_matching_catch_2()|0;
     $43 = tempRet0;
     HEAP32[$personalityslot>>2] = $42;
     $personalityslot$index6 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index6>>2] = $43;
     $$field = HEAP32[$personalityslot>>2]|0;
     $$index1 = ((($personalityslot)) + 4|0);
     $$field2 = HEAP32[$$index1>>2]|0;
     ___resumeException($$field|0);
     // unreachable;
    }
   }
  }
 }
 $38 = ___cxa_find_matching_catch_2()|0;
 $39 = tempRet0;
 HEAP32[$personalityslot>>2] = $38;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $39;
 $40 = $_29;
 $41 = $40&1;
 if (!($41)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_29 = 0;
 __ZN4drop17h357bb778b7856b74E($arena);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11webplatform8HtmlNode12prop_get_i3217h2f048ba64c2304ebE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_22 = 0, $arena = 0, $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $s = 0, $self = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg1 = sp + 32|0;
 $s = sp + 24|0;
 $arena = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_22 = 0;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$s>>2] = $5;
 $8 = ((($s)) + 4|0);
 HEAP32[$8>>2] = $7;
 __THREW__ = 0;
 invoke_vi(294,($arena|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 do {
  if ($10) {
   label = 8;
  } else {
   $_22 = 1;
   $11 = $self;
   $12 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $13 = (invoke_iii(71,($12|0),($arena|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    label = 8;
   } else {
    $16 = HEAP32[$s>>2]|0;
    $17 = ((($s)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    $19 = (invoke_iiii(72,($16|0),($18|0),($arena|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     label = 8;
    } else {
     $22 = _emscripten_asm_const_iii(2, ($13|0), ($19|0))|0;
     $_22 = 0;
     __THREW__ = 0;
     invoke_vi(295,($arena|0));
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      $29 = ___cxa_find_matching_catch_2()|0;
      $30 = tempRet0;
      HEAP32[$personalityslot>>2] = $29;
      $personalityslot$index6 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index6>>2] = $30;
      break;
     } else {
      STACKTOP = sp;return ($22|0);
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  HEAP32[$personalityslot>>2] = $25;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $26;
  $27 = $_22;
  $28 = $27&1;
  if ($28) {
   $_22 = 0;
   __ZN4drop17h357bb778b7856b74E($arena);
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN11webplatform8HtmlNode12prop_get_str17he4db14e1010fe13dE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $$sreg1$field = 0, $$sreg1$field10 = 0, $$sreg1$index9 = 0, $$sreg2$field = 0, $$sreg2$field13 = 0, $$sreg2$index12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_25 = 0, $_32 = 0, $a = 0, $arena = 0, $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index15 = 0, $personalityslot$index17 = 0, $s = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp;
 $arg1 = sp + 88|0;
 $s = sp + 80|0;
 $arena = sp + 64|0;
 $_25 = sp + 48|0;
 $personalityslot = sp + 40|0;
 $arg0 = $1;
 HEAP32[$arg1>>2] = $2;
 $7 = ((($arg1)) + 4|0);
 HEAP32[$7>>2] = $3;
 $_32 = 0;
 $8 = $arg0;
 $self = $8;
 $9 = HEAP32[$arg1>>2]|0;
 $10 = ((($arg1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$s>>2] = $9;
 $12 = ((($s)) + 4|0);
 HEAP32[$12>>2] = $11;
 __THREW__ = 0;
 invoke_vi(294,($arena|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $_32 = 1;
  $15 = $self;
  $16 = HEAP32[$15>>2]|0;
  __THREW__ = 0;
  $17 = (invoke_iii(71,($16|0),($arena|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   $20 = HEAP32[$s>>2]|0;
   $21 = ((($s)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   __THREW__ = 0;
   $23 = (invoke_iiii(72,($20|0),($22|0),($arena|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    $26 = _emscripten_asm_const_iii(3, ($17|0), ($23|0))|0;
    $a = $26;
    $_32 = 0;
    __THREW__ = 0;
    invoke_vi(295,($arena|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = $a;
     $30 = $29;
     __ZN3std3ffi5c_str4CStr8from_ptr17hc6258ac56fc9d700E($6,$30);
     $$sreg$field = HEAP32[$6>>2]|0;
     $$sreg$index6 = ((($6)) + 4|0);
     $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0;
     __ZN3std3ffi5c_str4CStr8to_bytes17hf96cdf4a833f5310E($5,$$sreg$field,$$sreg$field7);
     $$sreg1$field = HEAP32[$5>>2]|0;
     $$sreg1$index9 = ((($5)) + 4|0);
     $$sreg1$field10 = HEAP32[$$sreg1$index9>>2]|0;
     __ZN4core3str9from_utf817he0e1c9036739d488E($_25,$$sreg1$field,$$sreg1$field10);
     __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6unwrap17h77beda18c5a0abfbE($4,$_25);
     $$sreg2$field = HEAP32[$4>>2]|0;
     $$sreg2$index12 = ((($4)) + 4|0);
     $$sreg2$field13 = HEAP32[$$sreg2$index12>>2]|0;
     __ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h77a7452d11da03e2E($0,$$sreg2$field,$$sreg2$field13);
     STACKTOP = sp;return;
    }
    $35 = ___cxa_find_matching_catch_2()|0;
    $36 = tempRet0;
    HEAP32[$personalityslot>>2] = $35;
    $personalityslot$index17 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index17>>2] = $36;
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index3 = ((($personalityslot)) + 4|0);
    $$field4 = HEAP32[$$index3>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
  }
 }
 $31 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 HEAP32[$personalityslot>>2] = $31;
 $personalityslot$index15 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index15>>2] = $32;
 $33 = $_32;
 $34 = $33&1;
 if (!($34)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_32 = 0;
 __ZN4drop17h357bb778b7856b74E($arena);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11webplatform8HtmlNode6append17h23b95f36ac0f3245E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_23 = 0, $arena = 0, $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $s = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arena = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $0;
 $arg1 = $1;
 $_23 = 0;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $s = $3;
 __THREW__ = 0;
 invoke_vi(294,($arena|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   label = 8;
  } else {
   $_23 = 1;
   $6 = $self;
   $7 = HEAP32[$6>>2]|0;
   __THREW__ = 0;
   $8 = (invoke_iii(71,($7|0),($arena|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    label = 8;
   } else {
    $11 = $s;
    $12 = HEAP32[$11>>2]|0;
    __THREW__ = 0;
    $13 = (invoke_iii(71,($12|0),($arena|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     label = 8;
    } else {
     $16 = _emscripten_asm_const_iii(4, ($8|0), ($13|0))|0;
     $_23 = 0;
     __THREW__ = 0;
     invoke_vi(295,($arena|0));
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      $23 = ___cxa_find_matching_catch_2()|0;
      $24 = tempRet0;
      HEAP32[$personalityslot>>2] = $23;
      $personalityslot$index6 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index6>>2] = $24;
      break;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  HEAP32[$personalityslot>>2] = $19;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $20;
  $21 = $_23;
  $22 = $21&1;
  if ($22) {
   $_23 = 0;
   __ZN4drop17h357bb778b7856b74E($arena);
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11webplatform8HtmlNode11html_append17h3c448a8398a0e7fbE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_23 = 0, $arena = 0, $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $s = 0, $self = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg1 = sp + 32|0;
 $s = sp + 24|0;
 $arena = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_23 = 0;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$s>>2] = $5;
 $8 = ((($s)) + 4|0);
 HEAP32[$8>>2] = $7;
 __THREW__ = 0;
 invoke_vi(294,($arena|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 do {
  if ($10) {
   label = 8;
  } else {
   $_23 = 1;
   $11 = $self;
   $12 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $13 = (invoke_iii(71,($12|0),($arena|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    label = 8;
   } else {
    $16 = HEAP32[$s>>2]|0;
    $17 = ((($s)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    $19 = (invoke_iiii(72,($16|0),($18|0),($arena|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     label = 8;
    } else {
     $22 = _emscripten_asm_const_iii(5, ($13|0), ($19|0))|0;
     $_23 = 0;
     __THREW__ = 0;
     invoke_vi(295,($arena|0));
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      $29 = ___cxa_find_matching_catch_2()|0;
      $30 = tempRet0;
      HEAP32[$personalityslot>>2] = $29;
      $personalityslot$index6 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index6>>2] = $30;
      break;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  HEAP32[$personalityslot>>2] = $25;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $26;
  $27 = $_23;
  $28 = $27&1;
  if ($28) {
   $_23 = 0;
   __ZN4drop17h357bb778b7856b74E($arena);
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11webplatform8HtmlNode12html_prepend17h173a05c5542a4ef4E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_23 = 0, $arena = 0, $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $s = 0, $self = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg1 = sp + 32|0;
 $s = sp + 24|0;
 $arena = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_23 = 0;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$s>>2] = $5;
 $8 = ((($s)) + 4|0);
 HEAP32[$8>>2] = $7;
 __THREW__ = 0;
 invoke_vi(294,($arena|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 do {
  if ($10) {
   label = 8;
  } else {
   $_23 = 1;
   $11 = $self;
   $12 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $13 = (invoke_iii(71,($12|0),($arena|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    label = 8;
   } else {
    $16 = HEAP32[$s>>2]|0;
    $17 = ((($s)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    $19 = (invoke_iiii(72,($16|0),($18|0),($arena|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     label = 8;
    } else {
     $22 = _emscripten_asm_const_iii(6, ($13|0), ($19|0))|0;
     $_23 = 0;
     __THREW__ = 0;
     invoke_vi(295,($arena|0));
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      $29 = ___cxa_find_matching_catch_2()|0;
      $30 = tempRet0;
      HEAP32[$personalityslot>>2] = $29;
      $personalityslot$index6 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index6>>2] = $30;
      break;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch_2()|0;
  $26 = tempRet0;
  HEAP32[$personalityslot>>2] = $25;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $26;
  $27 = $_23;
  $28 = $27&1;
  if ($28) {
   $_23 = 0;
   __ZN4drop17h357bb778b7856b74E($arena);
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11webplatform8Document14element_create17h72ab34278ae96c45E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_21 = 0, $_26 = 0, $arena = 0, $arg0 = 0;
 var $arg1 = 0, $id = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $s = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg1 = sp + 40|0;
 $s = sp + 32|0;
 $arena = sp + 16|0;
 $_21 = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $1;
 HEAP32[$arg1>>2] = $2;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $3;
 $_26 = 0;
 $5 = $arg0;
 $self = $5;
 $6 = HEAP32[$arg1>>2]|0;
 $7 = ((($arg1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$s>>2] = $6;
 $9 = ((($s)) + 4|0);
 HEAP32[$9>>2] = $8;
 __THREW__ = 0;
 invoke_vi(294,($arena|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $_26 = 1;
  $12 = HEAP32[$s>>2]|0;
  $13 = ((($s)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  __THREW__ = 0;
  $15 = (invoke_iiii(72,($12|0),($14|0),($arena|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $18 = _emscripten_asm_const_ii(7, ($15|0))|0;
   $id = $18;
   $_26 = 0;
   __THREW__ = 0;
   invoke_vi(295,($arena|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $35 = ___cxa_find_matching_catch_2()|0;
    $36 = tempRet0;
    HEAP32[$personalityslot>>2] = $35;
    $personalityslot$index6 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index6>>2] = $36;
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index1 = ((($personalityslot)) + 4|0);
    $$field2 = HEAP32[$$index1>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $21 = $id;
   $22 = ($21|0)<(0);
   if ($22) {
    HEAP32[$0>>2] = 0;
    STACKTOP = sp;return;
   } else {
    $23 = $id;
    $24 = $self;
    HEAP32[$_21>>2] = $23;
    $25 = ((($_21)) + 4|0);
    HEAP32[$25>>2] = $24;
    HEAP32[$0>>2] = 1;
    $26 = ((($_21)) + 4|0);
    $27 = HEAP32[$_21>>2]|0;
    $28 = HEAP32[$26>>2]|0;
    $29 = ((($0)) + 4|0);
    HEAP32[$29>>2] = $27;
    $30 = ((($29)) + 4|0);
    HEAP32[$30>>2] = $28;
    STACKTOP = sp;return;
   }
  }
 }
 $31 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 HEAP32[$personalityslot>>2] = $31;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $32;
 $33 = $_26;
 $34 = $33&1;
 if (!($34)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_26 = 0;
 __ZN4drop17h357bb778b7856b74E($arena);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11webplatform8Document13element_query17he69b28cda2f0be41E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_21 = 0, $_25 = 0, $arena = 0, $arg0 = 0;
 var $arg1 = 0, $id = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $s = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg1 = sp + 40|0;
 $s = sp + 32|0;
 $arena = sp + 16|0;
 $_21 = sp + 8|0;
 $personalityslot = sp;
 $arg0 = $1;
 HEAP32[$arg1>>2] = $2;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $3;
 $_25 = 0;
 $5 = $arg0;
 $self = $5;
 $6 = HEAP32[$arg1>>2]|0;
 $7 = ((($arg1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$s>>2] = $6;
 $9 = ((($s)) + 4|0);
 HEAP32[$9>>2] = $8;
 __THREW__ = 0;
 invoke_vi(294,($arena|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $_25 = 1;
  $12 = HEAP32[$s>>2]|0;
  $13 = ((($s)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  __THREW__ = 0;
  $15 = (invoke_iiii(72,($12|0),($14|0),($arena|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $18 = _emscripten_asm_const_ii(8, ($15|0))|0;
   $id = $18;
   $_25 = 0;
   __THREW__ = 0;
   invoke_vi(295,($arena|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $35 = ___cxa_find_matching_catch_2()|0;
    $36 = tempRet0;
    HEAP32[$personalityslot>>2] = $35;
    $personalityslot$index6 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index6>>2] = $36;
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index1 = ((($personalityslot)) + 4|0);
    $$field2 = HEAP32[$$index1>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $21 = $id;
   $22 = ($21|0)<(0);
   if ($22) {
    HEAP32[$0>>2] = 0;
    STACKTOP = sp;return;
   } else {
    $23 = $id;
    $24 = $self;
    HEAP32[$_21>>2] = $23;
    $25 = ((($_21)) + 4|0);
    HEAP32[$25>>2] = $24;
    HEAP32[$0>>2] = 1;
    $26 = ((($_21)) + 4|0);
    $27 = HEAP32[$_21>>2]|0;
    $28 = HEAP32[$26>>2]|0;
    $29 = ((($0)) + 4|0);
    HEAP32[$29>>2] = $27;
    $30 = ((($29)) + 4|0);
    HEAP32[$30>>2] = $28;
    STACKTOP = sp;return;
   }
  }
 }
 $31 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 HEAP32[$personalityslot>>2] = $31;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $32;
 $33 = $_25;
 $34 = $33&1;
 if (!($34)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_25 = 0;
 __ZN4drop17h357bb778b7856b74E($arena);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11webplatform4init17h07bf258edc3ddd43E() {
 var $$field$field$field = 0, $$field4 = 0, $$field7 = 0, $$index6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $_12 = 0, $abi_cast = 0, $personalityslot = 0, $personalityslot$index2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_0 = sp + 48|0;
 $_10 = sp + 40|0;
 $_11 = sp + 24|0;
 $_12 = sp + 8|0;
 $personalityslot = sp;
 $abi_cast = sp + 52|0;
 $0 = _emscripten_asm_const_i(9)|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17h508f93457e7dc15eE($_12);
 __THREW__ = 0;
 invoke_vii(296,($_11|0),($_12|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  $3 = (invoke_ii(297,($_11|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   HEAP32[$abi_cast>>2] = $3;
   ;HEAP32[$_10>>2]=HEAP32[$abi_cast>>2]|0;
   $$field$field$field = HEAP32[$_10>>2]|0;
   HEAP32[$_0>>2] = $$field$field$field;
   $6 = HEAP32[$_0>>2]|0;
   STACKTOP = sp;return ($6|0);
  }
 }
 $7 = ___cxa_find_matching_catch_2()|0;
 $8 = tempRet0;
 HEAP32[$personalityslot>>2] = $7;
 $personalityslot$index2 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index2>>2] = $8;
 $$field4 = HEAP32[$personalityslot>>2]|0;
 $$index6 = ((($personalityslot)) + 4|0);
 $$field7 = HEAP32[$$index6>>2]|0;
 ___resumeException($$field4|0);
 // unreachable;
 return (0)|0;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17h508f93457e7dc15eE($0) {
 $0 = $0|0;
 var $$field$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17ha8d0e9b2a4f9678fE($tmp_ret);
 $1 = ((($tmp_ret)) + 4|0);
 $$field$field = HEAP32[$tmp_ret>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $$field$field;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN37__LT_core__cell__RefCell_LT_T_GT__GT_3new17hb042ef98d78bbedcE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$field5$field = 0, $$index1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $_4 = 0, $_5 = 0, $abi_cast = 0, $arg0 = 0, $personalityslot = 0;
 var $personalityslot$index10 = 0, $personalityslot$index8 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $arg0 = sp + 64|0;
 $value = sp + 48|0;
 $_3 = sp + 32|0;
 $_4 = sp + 16|0;
 $_5 = sp + 8|0;
 $personalityslot = sp;
 $abi_cast = sp + 76|0;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$value>>2]=HEAP32[$arg0>>2]|0;HEAP32[$value+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$value+8>>2]=HEAP32[$arg0+8>>2]|0;
 ;HEAP32[$_4>>2]=HEAP32[$value>>2]|0;HEAP32[$_4+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$_4+8>>2]=HEAP32[$value+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(298,($_3|0),($_4|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  HEAP32[$personalityslot>>2] = $8;
  $personalityslot$index8 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index8>>2] = $9;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 __THREW__ = 0;
 $4 = (invoke_ii(299,0)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  HEAP32[$abi_cast>>2] = $4;
  ;HEAP32[$_5>>2]=HEAP32[$abi_cast>>2]|0;
  $$field5$field = HEAP32[$_5>>2]|0;
  HEAP32[$0>>2] = $$field5$field;
  $7 = ((($0)) + 4|0);
  ;HEAP32[$7>>2]=HEAP32[$_3>>2]|0;HEAP32[$7+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$_3+8>>2]|0;
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch_2()|0;
 $11 = tempRet0;
 HEAP32[$personalityslot>>2] = $10;
 $personalityslot$index10 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index10>>2] = $11;
 __ZN4drop17h5b7bc0b4aa087d78E($_3);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN31__LT_alloc__rc__Rc_LT_T_GT__GT_3new17hb938fae809de7c62E($0) {
 $0 = $0|0;
 var $$field = 0, $$field13 = 0, $$field2 = 0, $$field5$field = 0, $$field9$field = 0, $$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $_7 = 0, $_8 = 0, $_9 = 0, $abi_cast = 0, $abi_cast1 = 0, $abi_cast3 = 0;
 var $arg0 = 0, $personalityslot = 0, $personalityslot$index16 = 0, $personalityslot$index18 = 0, $tmp_ret = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $arg0 = sp + 72|0;
 $_0 = sp + 64|0;
 $value = sp + 48|0;
 $_8 = sp + 40|0;
 $_9 = sp + 32|0;
 $_10 = sp + 16|0;
 $personalityslot = sp + 8|0;
 $abi_cast = sp + 96|0;
 $abi_cast1 = sp + 92|0;
 $tmp_ret = sp;
 $abi_cast3 = sp + 88|0;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$0+12>>2]|0;
 $_11 = 0;
 $_11 = 1;
 ;HEAP32[$value>>2]=HEAP32[$arg0>>2]|0;HEAP32[$value+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$value+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$value+12>>2]=HEAP32[$arg0+12>>2]|0;
 $1 = (__ZN5alloc4heap15exchange_malloc17h8890b6b3bb39aab2E_146(24,4)|0);
 $_7 = $1;
 __THREW__ = 0;
 $2 = (invoke_ii(299,1)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  label = 9;
 } else {
  HEAP32[$abi_cast>>2] = $2;
  ;HEAP32[$_8>>2]=HEAP32[$abi_cast>>2]|0;
  __THREW__ = 0;
  $7 = (invoke_ii(299,1)|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   label = 9;
  } else {
   HEAP32[$abi_cast1>>2] = $7;
   ;HEAP32[$_9>>2]=HEAP32[$abi_cast1>>2]|0;
   $_11 = 0;
   ;HEAP32[$_10>>2]=HEAP32[$value>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$value+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$value+12>>2]|0;
   $10 = $_7;
   $$field5$field = HEAP32[$_8>>2]|0;
   HEAP32[$10>>2] = $$field5$field;
   $$field9$field = HEAP32[$_9>>2]|0;
   $11 = ((($10)) + 4|0);
   HEAP32[$11>>2] = $$field9$field;
   $12 = ((($10)) + 8|0);
   ;HEAP32[$12>>2]=HEAP32[$_10>>2]|0;HEAP32[$12+4>>2]=HEAP32[$_10+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$_10+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$_10+12>>2]|0;
   $13 = $_7;
   __THREW__ = 0;
   $14 = (invoke_ii(300,($13|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    __THREW__ = 0;
    $17 = (invoke_ii(301,($14|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     HEAP32[$abi_cast3>>2] = $17;
     ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast3>>2]|0;
     $$field13 = HEAP32[$tmp_ret>>2]|0;
     HEAP32[$_0>>2] = $$field13;
     $20 = HEAP32[$_0>>2]|0;
     STACKTOP = sp;return ($20|0);
    }
   }
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   HEAP32[$personalityslot>>2] = $24;
   $personalityslot$index18 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index18>>2] = $25;
  }
 }
 if ((label|0) == 9) {
  $21 = ___cxa_find_matching_catch_2()|0;
  $22 = tempRet0;
  HEAP32[$personalityslot>>2] = $21;
  $personalityslot$index16 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index16>>2] = $22;
  $23 = $_7;
  __ZN5alloc4heap8box_free17h7913b1ec3c893fb8E($23);
 }
 $5 = $_11;
 $6 = $5&1;
 if (!($6)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_11 = 0;
 __ZN4drop17hbab5825c2cdecc38E($value);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3new17h44f3c9b185e9d52fE($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_0 = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 12|0;
 $arg0 = $0;
 $1 = $arg0;
 $value = $1;
 $2 = $value;
 $3 = (__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3new17h38d313a5db1f548fE($2)|0);
 HEAP32[$abi_cast>>2] = $3;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $4 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN5alloc4heap8box_free17h7913b1ec3c893fb8E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $align = 0, $arg0 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $size = 24;
 $align = 4;
 $2 = $size;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $ptr;
 $5 = $size;
 $6 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E_93($4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN5alloc5boxed30__LT_impl_u20_Box_LT_T_GT__GT_8into_raw17h0b2b813854dcd2a5E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $b = 0, $lvalue_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $b = $1;
 $2 = $b;
 $lvalue_temp = $2;
 $3 = $lvalue_temp;
 STACKTOP = sp;return ($3|0);
}
function __ZN35__LT_core__ptr__Shared_LT_T_GT__GT_3new17h877418937a4e6ca3E($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN4drop17hbab5825c2cdecc38E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZN4drop17h5b7bc0b4aa087d78E($1);
 return;
}
function __ZN4drop17h5b7bc0b4aa087d78E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h4c83356d1dd74dbbE($0);
 return;
}
function __ZN4drop17h4c83356d1dd74dbbE($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(302,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17h4c83356d1dd74dbbE($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h4c83356d1dd74dbbE($0);
  STACKTOP = sp;return;
 }
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17he9c3cb9d06350164E_199($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $drop = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $drop = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h92f38ca2ed6bbc6bE_205($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$drop>>2] = $$sreg$field;
 $4 = ((($drop)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 __ZN4drop17h5ea79b8d093ed2cbE($drop);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h4c83356d1dd74dbbE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hdbcb9eaaf7754de6E($0);
 return;
}
function __ZN4drop17hdbcb9eaaf7754de6E($0) {
 $0 = $0|0;
 var $$field = 0, $$field4 = 0, $$index1 = 0, $$index3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __THREW__ = 0;
 invoke_vi(303,($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$1>>2] = $4;
  $$index1 = ((($1)) + 4|0);
  HEAP32[$$index1>>2] = $5;
  __ZN13drop_contents17hdbcb9eaaf7754de6E($0);
  $$field = HEAP32[$1>>2]|0;
  $$index3 = ((($1)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hdbcb9eaaf7754de6E($0);
  STACKTOP = sp;return;
 }
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h1fecc8b91300da9eE_200($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17headfa8af309595d8E_201()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17h27591068d88f93b8E_202()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h381c4460d502091dE_203($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17h2ed96d866771a555E_93($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17hdbcb9eaaf7754de6E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3mem7size_of17headfa8af309595d8E_201() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 8;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17h27591068d88f93b8E_202() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h381c4460d502091dE_203($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $lvalue_temp = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h4d449cf481180e02E_204($2)|0);
 $lvalue_temp = $3;
 $4 = $lvalue_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h4d449cf481180e02E_204($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h92f38ca2ed6bbc6bE_205($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hf3883631d51e57dfE_206($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN4drop17h5ea79b8d093ed2cbE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3<<3)|0);
 $6 = $1;
 while(1) {
  $5 = ($6|0)!=($4|0);
  if (!($5)) {
   break;
  }
  __ZN4drop17h6b36378a39d971c7E($6);
  $7 = ((($6)) + 8|0);
  $6 = $7;
 }
 return;
}
function __ZN4drop17h6b36378a39d971c7E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __ZN4drop17hac6de1a0c61c310fE($0);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $8 = ($6|0)!=(0);
 if (!($8)) {
  return;
 }
 __ZN5alloc4heap13exchange_free17h5720505cfcfb7278E_92($1,$6,$7);
 return;
}
function __ZN4drop17hac6de1a0c61c310fE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_vi[$3 & 511]($4);
 return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hf3883631d51e57dfE_206($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h08da60f1da26d7caE_207($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hf503e2c3673e25ffE_208($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17hfcfd7bde64e0033fE_209($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h08da60f1da26d7caE_207($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h381c4460d502091dE_203($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hf503e2c3673e25ffE_208($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h7897726fa2c131ccE_210()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core5slice18from_raw_parts_mut17hfcfd7bde64e0033fE_209($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $lvalue_temp = 0, $p = 0, $retVal$index1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 8|0;
 $lvalue_temp = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$lvalue_temp>>2] = $8;
 $10 = ((($lvalue_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$lvalue_temp>>2]|0;
 $12 = ((($lvalue_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core3ptr8null_mut17h7897726fa2c131ccE_210() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3new17h38d313a5db1f548fE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $arg0 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $value = $1;
 $2 = $value;
 HEAP32[$_0>>2] = $2;
 $3 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3new17h7c3ac7beb3bf9f11E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_3 = 0, $arg0 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = sp + 32|0;
 $value = sp + 16|0;
 $_3 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$value>>2]=HEAP32[$arg0>>2]|0;HEAP32[$value+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$value+8>>2]=HEAP32[$arg0+8>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$value>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$value+8>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_3+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17ha8d0e9b2a4f9678fE($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $abi_cast = 0, $cap = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp;
 $abi_cast = sp + 4|0;
 $1 = (__ZN4core3mem7size_of17headfa8af309595d8E_201()|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $cap = -1;
 } else {
  $cap = 0;
 }
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h82e4da70006f6e9dE_211((1))|0);
 HEAP32[$abi_cast>>2] = $3;
 ;HEAP32[$tmp_ret>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$tmp_ret>>2]|0;
 $4 = $cap;
 HEAP32[$0>>2] = $$field;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h82e4da70006f6e9dE_211($0) {
 $0 = $0|0;
 var $$field = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $_0 = sp + 8|0;
 $_3 = sp;
 $abi_cast = sp + 20|0;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $$field = HEAP32[$_3>>2]|0;
 HEAP32[$_0>>2] = $$field;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN11webplatform4spin17h5b275783d7de1e4aE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _emscripten_set_main_loop((304|0),0,1);
 return;
}
function __ZN11webplatform9leavemebe17hdeaa05b5f446203aE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _emscripten_pause_main_loop();
 return;
}
function __ZN3std9panicking11begin_panic17h8e1740626d0f752eE_234($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___rust_allocate(8,4)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 } else {
  HEAP32[$3>>2] = $0;
  $5 = ((($3)) + 4|0);
  HEAP32[$5>>2] = $1;
  __ZN3std9panicking20rust_panic_with_hook17h9c5ff0e4f1740e9eE($3,304,$2);
  // unreachable;
 }
}
function __ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17h5116f479deb48cdaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$1$gep = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $_11 = 0;
 var $_16 = 0, $_3$sroa$0$0$i = 0, $_3$sroa$21$0$i = 0, $_31 = 0, $_36 = 0, $_39 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i24 = 0, $code = 0, $detail = 0, $not$$i$i$i$i$i = 0, $not$$i$i$i$i$i21 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $code = sp + 92|0;
 $detail = sp + 80|0;
 $_11 = sp + 56|0;
 $_16 = sp + 40|0;
 $_31 = sp + 16|0;
 $_36 = sp + 8|0;
 $_39 = sp;
 $trunc = HEAP8[$0>>0]|0;
 $trunc$clear = $trunc & 3;
 switch ($trunc$clear<<24>>24) {
 case 0:  {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$code>>2] = $3;
  __ZN3std3sys3imp2os12error_string17h8f92c6903d4d3754E($detail,$3);
  $4 = $detail;
  $5 = $code;
  HEAP32[$_16>>2] = $4;
  $6 = ((($_16)) + 4|0);
  HEAP32[$6>>2] = (305);
  $7 = ((($_16)) + 8|0);
  HEAP32[$7>>2] = $5;
  $8 = ((($_16)) + 12|0);
  HEAP32[$8>>2] = (306);
  HEAP32[$_11>>2] = 3020;
  $9 = ((($_11)) + 4|0);
  HEAP32[$9>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i24 = ((($_11)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i24>>2] = 0;
  $10 = ((($_11)) + 16|0);
  HEAP32[$10>>2] = $_16;
  $11 = ((($_11)) + 20|0);
  HEAP32[$11>>2] = 2;
  __THREW__ = 0;
  $12 = (invoke_iii(307,($1|0),($_11|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $31 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   $36 = ((($detail)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $not$$i$i$i$i$i = ($37|0)==(0);
   if ($not$$i$i$i$i$i) {
    ___resumeException($31|0);
    // unreachable;
   }
   $38 = HEAP32[$detail>>2]|0;
   ___rust_deallocate($38,$37,1);
   ___resumeException($31|0);
   // unreachable;
  } else {
   $32 = ((($detail)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $not$$i$i$i$i$i21 = ($33|0)==(0);
   if (!($not$$i$i$i$i$i21)) {
    $34 = HEAP32[$detail>>2]|0;
    ___rust_deallocate($34,$33,1);
   }
   $_0$sroa$0$0 = $12;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
  break;
 }
 case 1:  {
  $15 = ((($0)) + 1|0);
  $trunc$i = HEAP8[$15>>0]|0;
  $trunc$i$clear = $trunc$i & 31;
  do {
   switch ($trunc$i$clear<<24>>24) {
   case 0:  {
    $_3$sroa$0$0$i = 9191;$_3$sroa$21$0$i = 16;
    break;
   }
   case 1:  {
    $_3$sroa$0$0$i = 9174;$_3$sroa$21$0$i = 17;
    break;
   }
   case 2:  {
    $_3$sroa$0$0$i = 9156;$_3$sroa$21$0$i = 18;
    break;
   }
   case 3:  {
    $_3$sroa$0$0$i = 9140;$_3$sroa$21$0$i = 16;
    break;
   }
   case 4:  {
    $_3$sroa$0$0$i = 9122;$_3$sroa$21$0$i = 18;
    break;
   }
   case 5:  {
    $_3$sroa$0$0$i = 9109;$_3$sroa$21$0$i = 13;
    break;
   }
   case 6:  {
    $_3$sroa$0$0$i = 9095;$_3$sroa$21$0$i = 14;
    break;
   }
   case 7:  {
    $_3$sroa$0$0$i = 9074;$_3$sroa$21$0$i = 21;
    break;
   }
   case 8:  {
    $_3$sroa$0$0$i = 9063;$_3$sroa$21$0$i = 11;
    break;
   }
   case 9:  {
    $_3$sroa$0$0$i = 9042;$_3$sroa$21$0$i = 21;
    break;
   }
   case 10:  {
    $_3$sroa$0$0$i = 9021;$_3$sroa$21$0$i = 21;
    break;
   }
   case 11:  {
    $_3$sroa$0$0$i = 8998;$_3$sroa$21$0$i = 23;
    break;
   }
   case 12:  {
    $_3$sroa$0$0$i = 8986;$_3$sroa$21$0$i = 12;
    break;
   }
   case 13:  {
    $_3$sroa$0$0$i = 8977;$_3$sroa$21$0$i = 9;
    break;
   }
   case 14:  {
    $_3$sroa$0$0$i = 8967;$_3$sroa$21$0$i = 10;
    break;
   }
   case 15:  {
    $_3$sroa$0$0$i = 8946;$_3$sroa$21$0$i = 21;
    break;
   }
   case 16:  {
    $_3$sroa$0$0$i = 8932;$_3$sroa$21$0$i = 14;
    break;
   }
   case 17:  {
    $_3$sroa$0$0$i = 8910;$_3$sroa$21$0$i = 22;
    break;
   }
   case 18:  {
    __ZN3std9panicking11begin_panic17h8e1740626d0f752eE_234(8870,40,2756);
    // unreachable;
    break;
   }
   default: {
    // unreachable;
   }
   }
  } while(0);
  HEAP32[$_39>>2] = $_3$sroa$0$0$i;
  $$fca$1$gep = ((($_39)) + 4|0);
  HEAP32[$$fca$1$gep>>2] = $_3$sroa$21$0$i;
  $16 = $_39;
  HEAP32[$_36>>2] = $16;
  $17 = ((($_36)) + 4|0);
  HEAP32[$17>>2] = (308);
  HEAP32[$_31>>2] = 3044;
  $18 = ((($_31)) + 4|0);
  HEAP32[$18>>2] = 1;
  $_6$sroa$0$0$$sroa_idx$i = ((($_31)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $19 = ((($_31)) + 16|0);
  HEAP32[$19>>2] = $_36;
  $20 = ((($_31)) + 20|0);
  HEAP32[$20>>2] = 1;
  $21 = (__ZN4core3fmt9Formatter9write_fmt17h0f0e81f3f99c1f62E($1,$_31)|0);
  $_0$sroa$0$0 = $21;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 case 2:  {
  $22 = ((($0)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($23)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (FUNCTION_TABLE_iii[$29 & 511]($25,$1)|0);
  $_0$sroa$0$0 = $30;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZN3std9panicking15begin_panic_fmt17he05914c28470d251E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_1$sroa$4$0$$sroa_idx3$i = 0, $_1$sroa$5$0$$sroa_idx5$i = 0, $_10$i = 0, $_8$i = 0, $_9 = 0, $not$$i$i$i$i$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$5$0 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_8$i = sp + 56|0;
 $_10$i = sp + 32|0;
 $s = sp + 16|0;
 $_9 = sp;
 HEAP32[$s>>2] = 1;
 $_1$sroa$4$0$$sroa_idx3$i = ((($s)) + 4|0);
 HEAP32[$_1$sroa$4$0$$sroa_idx3$i>>2] = 0;
 $_1$sroa$5$0$$sroa_idx5$i = ((($s)) + 8|0);
 HEAP32[$_1$sroa$5$0$$sroa_idx5$i>>2] = 0;
 HEAP32[$_8$i>>2] = $s;
 ;HEAP32[$_10$i>>2]=HEAP32[$0>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$0+20>>2]|0;
 __THREW__ = 0;
 (invoke_iiii(309,($_8$i|0),(88|0),($_10$i|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  ;HEAP32[$_9>>2]=HEAP32[$s>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$s+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$s+8>>2]|0;
  __THREW__ = 0;
  invoke_vii(310,($_9|0),($1|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  $personalityslot$sroa$0$0 = $5;$personalityslot$sroa$5$0 = $6;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $7 = ___cxa_find_matching_catch_2()|0;
 $8 = tempRet0;
 $9 = HEAP32[$_1$sroa$4$0$$sroa_idx3$i>>2]|0;
 $not$$i$i$i$i$i = ($9|0)==(0);
 if ($not$$i$i$i$i$i) {
  $personalityslot$sroa$0$0 = $7;$personalityslot$sroa$5$0 = $8;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $10 = HEAP32[$s>>2]|0;
 ___rust_deallocate($10,$9,1);
 $personalityslot$sroa$0$0 = $7;$personalityslot$sroa$5$0 = $8;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN3std9panicking11begin_panic17hab4851815c22504eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $x$sroa$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$sroa$0$i = sp;
 ;HEAP32[$x$sroa$0$i>>2]=HEAP32[$0>>2]|0;HEAP32[$x$sroa$0$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$x$sroa$0$i+8>>2]=HEAP32[$0+8>>2]|0;
 $2 = (___rust_allocate(12,4)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 } else {
  ;HEAP32[$2>>2]=HEAP32[$x$sroa$0$i>>2]|0;HEAP32[$2+4>>2]=HEAP32[$x$sroa$0$i+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$x$sroa$0$i+8>>2]|0;
  __ZN3std9panicking20rust_panic_with_hook17h9c5ff0e4f1740e9eE($2,112,$1);
  // unreachable;
 }
}
function __ZN3std9panicking20rust_panic_with_hook17h9c5ff0e4f1740e9eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre22 = 0, $$sink$in$phi$trans$insert = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0;
 var $_23$sroa$0$0$$sroa_idx = 0, $_23$sroa$4$0$$sroa_idx8 = 0, $_23$sroa$5$0$$sroa_idx10 = 0, $_42 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i12 = 0, $eh$lpad$body20$index2Z2D = 0, $eh$lpad$body20$indexZ2D = 0, $info = 0, $not$ = 0, $phitmp = 0, $switch = 0, $switch$i$i = 0, $switch2tmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_12 = sp + 48|0;
 $info = sp + 24|0;
 $_42 = sp;
 $3 = $0;
 $4 = $1;
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __THREW__ = 0;
 $10 = (invoke_i(311)|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if ($12) {
   label = 6;
  } else {
   $switch2tmp$i$i$i = ($10|0)==(0|0);
   if ($switch2tmp$i$i$i) {
    __THREW__ = 0;
    invoke_vii(202,(7951|0),57);
    $13 = __THREW__; __THREW__ = 0;
    label = 6;
    break;
   }
   $14 = HEAP32[$10>>2]|0;
   $switch$i$i = ($14|0)==(1);
   if ($switch$i$i) {
    $$sink$in$phi$trans$insert = ((($10)) + 4|0);
    $$pre = HEAP32[$$sink$in$phi$trans$insert>>2]|0;
    $phitmp = (($$pre) + 1)|0;
    HEAP32[$$sink$in$phi$trans$insert>>2] = $phitmp;
    $21 = ($phitmp>>>0)>(2);
    if ($21) {
     HEAP32[$_12>>2] = 2792;
     $28 = ((($_12)) + 4|0);
     HEAP32[$28>>2] = 1;
     $_6$sroa$0$0$$sroa_idx$i12 = ((($_12)) + 8|0);
     HEAP32[$_6$sroa$0$0$$sroa_idx$i12>>2] = 0;
     $29 = ((($_12)) + 16|0);
     HEAP32[$29>>2] = 16064;
     $30 = ((($_12)) + 20|0);
     HEAP32[$30>>2] = 0;
     __THREW__ = 0;
     invoke_vi(313,($_12|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      _llvm_trap();
      // unreachable;
     }
    } else {
     $45 = $phitmp;
     label = 9;
    }
   } else {
    $15 = $10;
    $16 = $15;
    HEAP32[$16>>2] = 1;
    $17 = (($15) + 4)|0;
    $18 = $17;
    HEAP32[$18>>2] = 0;
    $$pre22 = ((($10)) + 4|0);
    HEAP32[$$pre22>>2] = 1;
    $45 = 1;
    label = 9;
   }
   L11: do {
    if ((label|0) == 9) {
     HEAP32[$info>>2] = $3;
     $22 = ((($info)) + 4|0);
     HEAP32[$22>>2] = $4;
     $_23$sroa$0$0$$sroa_idx = ((($info)) + 8|0);
     HEAP32[$_23$sroa$0$0$$sroa_idx>>2] = $5;
     $_23$sroa$4$0$$sroa_idx8 = ((($info)) + 12|0);
     HEAP32[$_23$sroa$4$0$$sroa_idx8>>2] = $7;
     $_23$sroa$5$0$$sroa_idx10 = ((($info)) + 16|0);
     HEAP32[$_23$sroa$5$0$$sroa_idx10>>2] = $9;
     $23 = (_pthread_rwlock_rdlock(((15792)|0))|0);
     switch ($23|0) {
     case 11:  {
      __THREW__ = 0;
      invoke_viii(312,(8008|0),36,(2520|0));
      $24 = __THREW__; __THREW__ = 0;
      break L11;
      break;
     }
     case 35:  {
      break;
     }
     default: {
      label = 11;
     }
     }
     do {
      if ((label|0) == 11) {
       $25 = HEAP8[(15828)>>0]|0;
       $not$ = ($25<<24>>24)==(0);
       if (!($not$)) {
        $26 = ($23|0)==(0);
        if (!($26)) {
         break;
        }
        (_pthread_rwlock_unlock(((15792)|0))|0);
        break;
       }
       $33 = HEAP32[(15824)>>2]|0;HEAP32[(15824)>>2] = (($33+1)|0);
       $34 = HEAP32[4008]|0;
       $switch = ($34|0)==(1);
       if ($switch) {
        $37 = HEAP32[(16036)>>2]|0;
        $38 = HEAP32[(16040)>>2]|0;
        $39 = ((($38)) + 12|0);
        $40 = HEAP32[$39>>2]|0;
        __THREW__ = 0;
        invoke_vii($40|0,($37|0),($info|0));
        $41 = __THREW__; __THREW__ = 0;
        $42 = $41&1;
        if ($42) {
         break L11;
        }
       } else {
        __THREW__ = 0;
        invoke_vi(314,($info|0));
        $35 = __THREW__; __THREW__ = 0;
        $36 = $35&1;
        if ($36) {
         break L11;
        }
       }
       $43 = HEAP32[(15824)>>2]|0;HEAP32[(15824)>>2] = (($43-1)|0);
       (_pthread_rwlock_unlock(((15792)|0))|0);
       $44 = ($45>>>0)>(1);
       if (!($44)) {
        _rust_panic($0,$1);
        // unreachable;
       }
       HEAP32[$_42>>2] = 2800;
       $46 = ((($_42)) + 4|0);
       HEAP32[$46>>2] = 1;
       $_6$sroa$0$0$$sroa_idx$i = ((($_42)) + 8|0);
       HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
       $47 = ((($_42)) + 16|0);
       HEAP32[$47>>2] = 16064;
       $48 = ((($_42)) + 20|0);
       HEAP32[$48>>2] = 0;
       __THREW__ = 0;
       invoke_vi(313,($_42|0));
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        break L11;
       }
       _llvm_trap();
       // unreachable;
      }
     } while(0);
     __THREW__ = 0;
     invoke_viii(312,(8044|0),41,(2532|0));
     $27 = __THREW__; __THREW__ = 0;
    }
   } while(0);
   $57 = ___cxa_find_matching_catch_2()|0;
   $58 = tempRet0;
   $eh$lpad$body20$index2Z2D = $58;$eh$lpad$body20$indexZ2D = $57;
  }
 } while(0);
 if ((label|0) == 6) {
  $19 = ___cxa_find_matching_catch_2()|0;
  $20 = tempRet0;
  $eh$lpad$body20$index2Z2D = $20;$eh$lpad$body20$indexZ2D = $19;
 }
 $51 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$51 & 511]($0);
 $52 = ((($1)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0);
 if ($54) {
  ___resumeException($eh$lpad$body20$indexZ2D|0);
  // unreachable;
 }
 $55 = ((($1)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 ___rust_deallocate($0,$53,$56);
 ___resumeException($eh$lpad$body20$indexZ2D|0);
 // unreachable;
}
function __ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17hadbbbfd8ce4ffa28E() {
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i$i = 0, $_0$0$i$i3$i = 0, $cond$i$i$i = 0;
 var $cond$i$i1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[636]|0;
 $cond$i$i$i = ($0|0)==(0);
 if ($cond$i$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h99fc4ab166ab9497E(2544)|0);
  $_0$0$i$i$i = $1;
 } else {
  $_0$0$i$i$i = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i$i|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$$i = $4 ? 0 : $5;
  $15 = $$$i;
  return ($15|0);
 }
 $6 = (___rust_allocate(12,4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 HEAP32[$6>>2] = 2544;
 $8 = ((($6)) + 4|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[636]|0;
 $cond$i$i1$i = ($13|0)==(0);
 if ($cond$i$i1$i) {
  $14 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h99fc4ab166ab9497E(2544)|0);
  $_0$0$i$i3$i = $14;
 } else {
  $_0$0$i$i3$i = $13;
 }
 (_pthread_setspecific(($_0$0$i$i3$i|0),($6|0))|0);
 $15 = $8;
 return ($15|0);
}
function __ZN3std10sys_common4util10dumb_print17hb72d10ffb0bc3ffbE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$sroa$12$4$$sroa_idx18 = 0, $_3$sroa$12$4$copyload = 0, $_3$sroa$5$4$copyload = 0, $_3$sroa$9$4$$sroa_idx15 = 0, $_3$sroa$9$4$copyload = 0, $_3$sroa$9$sroa$0$0$extract$trunc = 0, $_5$i$i = 0, $_7$i = 0, $cond$i$i = 0;
 var $cond$i$i$i$i = 0, $or$cond = 0, $stderr$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $stderr$i$i = sp + 40|0;
 $_5$i$i = sp + 16|0;
 $_7$i = sp;
 ;HEAP32[$_5$i$i>>2]=HEAP32[$0>>2]|0;HEAP32[$_5$i$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_5$i$i+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_5$i$i+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_5$i$i+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_5$i$i+20>>2]=HEAP32[$0+20>>2]|0;
 __ZN3std2io5Write9write_fmt17h76814ab1b8b64625E($_7$i,$stderr$i$i,$_5$i$i);
 $_3$sroa$5$4$copyload = HEAP32[$_7$i>>2]|0;
 $_3$sroa$9$4$$sroa_idx15 = ((($_7$i)) + 4|0);
 $_3$sroa$9$4$copyload = HEAP32[$_3$sroa$9$4$$sroa_idx15>>2]|0;
 $_3$sroa$9$sroa$0$0$extract$trunc = $_3$sroa$9$4$copyload&255;
 $_3$sroa$12$4$$sroa_idx18 = ((($_7$i)) + 8|0);
 $_3$sroa$12$4$copyload = HEAP32[$_3$sroa$12$4$$sroa_idx18>>2]|0;
 $cond$i$i = ($_3$sroa$5$4$copyload|0)==(1);
 $cond$i$i$i$i = ($_3$sroa$9$sroa$0$0$extract$trunc<<24>>24)==(2);
 $or$cond = $cond$i$i & $cond$i$i$i$i;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $1 = ((($_3$sroa$12$4$copyload)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($_3$sroa$12$4$copyload)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($2);
 $6 = HEAP32[$3>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($6)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  ___rust_deallocate($2,$8,$11);
 }
 ___rust_deallocate($_3$sroa$12$4$copyload,12,4);
 STACKTOP = sp;return;
}
function __ZN3std9panicking12default_hook17he64268e81ff8a2c0E($0) {
 $0 = $0|0;
 var $$fca$0$extract15245274 = 0, $$fca$0$extract27365 = 0, $$fca$1$extract17246275 = 0, $$fca$1$extract29366 = 0, $$fca$1$gep = 0, $$in = 0, $$pre = 0, $$pre$i$i = 0, $$pre352 = 0, $$pre354 = 0, $$sink$in$phi$trans$insert = 0, $$sroa_idx = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $_0$0$i71 = 0, $_0$sroa$0$0$i = 0, $_0$sroa$3$0$i = 0, $_12$sroa$4$0$$sroa_idx$i$i = 0, $_12$sroa$4$0$$sroa_idx$i$i132 = 0, $_14$0$i147$in356 = 0, $_17$sroa$0$0 = 0, $_17$sroa$5$0 = 0, $_29$sroa$0$0 = 0, $_29$sroa$6$0 = 0, $_44 = 0, $_6$i = 0, $_68$0$off0 = 0, $_68$0$off0$not = 0, $_68$1270 = 0, $_68$1271 = 0, $_68$2$off0234 = 0;
 var $brmerge = 0, $cond$i$i$i$i$i = 0, $cond$i$i$i$i$i148 = 0, $err = 0, $extract$t = 0, $file = 0, $lhsc$i$i = 0, $line = 0, $log_backtrace = 0, $msg = 0, $name = 0, $not$$i$i$i$i$i$i23$i = 0, $or$cond = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$0$2 = 0, $personalityslot$sroa$0$3236 = 0, $personalityslot$sroa$9$0 = 0, $personalityslot$sroa$9$2 = 0, $personalityslot$sroa$9$3235 = 0, $src$i$sroa$5$0$$sroa_idx24$i$i = 0;
 var $src$i$sroa$5$0$$sroa_idx24$i$i127 = 0, $storemerge = 0, $switch$i = 0, $switch$i108 = 0, $switch$i122 = 0, $switch$i178 = 0, $switch1tmp$i = 0, $switch2tmp$i$i = 0, $switch2tmp$i$i117 = 0, $switch2tmp$i$i173 = 0, $switch4tmp$i = 0, $switch7tmp = 0, $switch8tmp = 0, $switch9tmp = 0, $switchtmp = 0, $switchtmp$i = 0, $switchtmp$i$i = 0, $switchtmp$i$i$i$i$i = 0, $switchtmp$i22$i$i = 0, $switchtmp$i266 = 0;
 var $switchtmp$i79 = 0, $thread = 0, $val$0$i$ph = 0, $write = 0, $x$i$sroa$5$0$$sroa_idx222 = 0, $x$i$sroa$5$0$copyload = 0, $x$i$sroa$6$0$$sroa_idx224 = 0, $x$i$sroa$6$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_6$i = sp + 80|0;
 $log_backtrace = sp + 96|0;
 $file = sp + 72|0;
 $line = sp + 92|0;
 $msg = sp + 64|0;
 $err = sp + 56|0;
 $thread = sp + 48|0;
 $name = sp + 40|0;
 $write = sp + 16|0;
 $_44 = sp;
 $1 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17hadbbbfd8ce4ffa28E()|0);
 $switch2tmp$i$i173 = ($1|0)==(0|0);
 if ($switch2tmp$i$i173) {
  __ZN4core6option13expect_failed17he4838b1eef3c5645E(7951,57);
  // unreachable;
 }
 $2 = HEAP32[$1>>2]|0;
 $switch$i178 = ($2|0)==(1);
 if ($switch$i178) {
  $$sink$in$phi$trans$insert = ((($1)) + 4|0);
  $$pre = HEAP32[$$sink$in$phi$trans$insert>>2]|0;
  $7 = ($$pre>>>0)>(1);
  if ($7) {
   $storemerge = 1;
  } else {
   label = 6;
  }
 } else {
  $3 = $1;
  $4 = $3;
  HEAP32[$4>>2] = 1;
  $5 = (($3) + 4)|0;
  $6 = $5;
  HEAP32[$6>>2] = 0;
  label = 6;
 }
 L7: do {
  if ((label|0) == 6) {
   $8 = HEAP32[4013]|0;
   switch ($8|0) {
   case 1:  {
    $storemerge = 0;
    break L7;
    break;
   }
   case 2:  {
    break;
   }
   default: {
    __ZN3std3env7_var_os17h1f8bb017ed7aa0b5E($_6$i,8182,14);
    $9 = HEAP32[$_6$i>>2]|0;
    $switch4tmp$i = ($9|0)==(0|0);
    if ($switch4tmp$i) {
     HEAP32[4013] = 1;
     $storemerge = 0;
     break L7;
    }
    $x$i$sroa$5$0$$sroa_idx222 = ((($_6$i)) + 4|0);
    $x$i$sroa$5$0$copyload = HEAP32[$x$i$sroa$5$0$$sroa_idx222>>2]|0;
    $x$i$sroa$6$0$$sroa_idx224 = ((($_6$i)) + 8|0);
    $x$i$sroa$6$0$copyload = HEAP32[$x$i$sroa$6$0$$sroa_idx224>>2]|0;
    $10 = ($x$i$sroa$6$0$copyload|0)==(1);
    do {
     if ($10) {
      $11 = ($9|0)==(8196|0);
      if (!($11)) {
       $lhsc$i$i = HEAP8[$9>>0]|0;
       $12 = ($lhsc$i$i<<24>>24)==(48);
       if (!($12)) {
        $val$0$i$ph = 2;
        break;
       }
      }
      $val$0$i$ph = 1;
     } else {
      $val$0$i$ph = 2;
     }
    } while(0);
    $not$$i$i$i$i$i$i23$i = ($x$i$sroa$5$0$copyload|0)==(0);
    if (!($not$$i$i$i$i$i$i23$i)) {
     ___rust_deallocate($9,$x$i$sroa$5$0$copyload,1);
    }
    HEAP32[4013] = $val$0$i$ph;
    $13 = ($val$0$i$ph|0)==(2);
    if (!($13)) {
     $storemerge = 0;
     break L7;
    }
   }
   }
   $storemerge = 1;
  }
 } while(0);
 HEAP8[$log_backtrace>>0] = $storemerge;
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$file>>2] = $15;
 $18 = ((($file)) + 4|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($0)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$line>>2] = $20;
 $21 = HEAP32[$0>>2]|0;
 $22 = ((($0)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_ii[$25 & 511]($21)|0);
 $27 = tempRet0;
 $28 = ($26|0)==(1134809956);
 $29 = ($27|0)==(609022445);
 $30 = $28 & $29;
 if ($30) {
  $37 = HEAP32[$21>>2]|0;
  $38 = ((($21)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$msg>>2] = $37;
  $40 = ((($msg)) + 4|0);
  HEAP32[$40>>2] = $39;
 } else {
  $31 = HEAP32[$24>>2]|0;
  $32 = (FUNCTION_TABLE_ii[$31 & 511]($21)|0);
  $33 = tempRet0;
  $34 = ($32|0)==(1745231425);
  $35 = ($33|0)==(42518155);
  $36 = $34 & $35;
  if ($36) {
   $41 = HEAP32[$21>>2]|0;
   $42 = ((($21)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $_17$sroa$0$0 = $41;$_17$sroa$5$0 = $43;
  } else {
   $_17$sroa$0$0 = 8197;$_17$sroa$5$0 = 8;
  }
  HEAP32[$msg>>2] = $_17$sroa$0$0;
  $44 = ((($msg)) + 4|0);
  HEAP32[$44>>2] = $_17$sroa$5$0;
 }
 HEAP8[$err>>0] = 1;
 __THREW__ = 0;
 $45 = (invoke_i(315)|0);
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 do {
  if (!($47)) {
   $switchtmp$i$i = ($45|0)==(0|0);
   if ($switchtmp$i$i) {
    HEAP32[$thread>>2] = 0;
    $191 = $name;$94 = 0;$_29$sroa$0$0 = 0;$_29$sroa$6$0 = 0;$switchtmp$i266 = 1;
    label = 31;
   } else {
    __THREW__ = 0;
    $48 = (invoke_i(316)|0);
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     break;
    }
    HEAP32[$thread>>2] = $48;
    $switchtmp$i = ($48|0)==(0);
    $51 = $48;
    if ($switchtmp$i) {
     $191 = $name;$94 = $51;$_29$sroa$0$0 = 0;$_29$sroa$6$0 = 0;$switchtmp$i266 = 1;
     label = 31;
    } else {
     $52 = ((($51)) + 16|0);
     $53 = HEAP32[$52>>2]|0;
     $switchtmp$i$i$i$i$i = ($53|0)==(0|0);
     if ($switchtmp$i$i$i$i$i) {
      $191 = $name;$94 = $51;$_29$sroa$0$0 = 0;$_29$sroa$6$0 = 0;$switchtmp$i266 = 0;
      label = 31;
     } else {
      $54 = ((($51)) + 20|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = (($55) + -1)|0;
      $57 = ($55|0)==(0);
      if ($57) {
       __THREW__ = 0;
       invoke_vii(317,($56|0),0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = ___cxa_find_matching_catch_2()|0;
       $60 = tempRet0;
       $$fca$0$extract15245274 = $59;$$fca$1$extract17246275 = $60;$148 = $51;
      } else {
       $191 = $name;$94 = $51;$_29$sroa$0$0 = $53;$_29$sroa$6$0 = $56;$switchtmp$i266 = 0;
       label = 31;
      }
     }
    }
   }
   L41: do {
    if ((label|0) == 31) {
     $switch1tmp$i = ($_29$sroa$0$0|0)==(0|0);
     $_0$sroa$0$0$i = $switch1tmp$i ? 8205 : $_29$sroa$0$0;
     $_0$sroa$3$0$i = $switch1tmp$i ? 9 : $_29$sroa$6$0;
     HEAP32[$name>>2] = $_0$sroa$0$0$i;
     $$fca$1$gep = ((($name)) + 4|0);
     HEAP32[$$fca$1$gep>>2] = $_0$sroa$3$0$i;
     HEAP32[$write>>2] = $name;
     $61 = ((($write)) + 4|0);
     HEAP32[$61>>2] = $msg;
     $62 = ((($write)) + 8|0);
     HEAP32[$62>>2] = $file;
     $63 = ((($write)) + 12|0);
     HEAP32[$63>>2] = $line;
     $64 = ((($write)) + 16|0);
     HEAP32[$64>>2] = $log_backtrace;
     __THREW__ = 0;
     $65 = (invoke_ii(318,(2552|0))|0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     do {
      if (!($67)) {
       $switch2tmp$i$i117 = ($65|0)==(0|0);
       if ($switch2tmp$i$i117) {
        __THREW__ = 0;
        invoke_vii(202,(7951|0),57);
        $68 = __THREW__; __THREW__ = 0;
        break;
       }
       $69 = HEAP32[$65>>2]|0;
       $switch$i122 = ($69|0)==(1);
       if ($switch$i122) {
        $74 = ((($65)) + 4|0);
        $$pre352 = HEAP32[$74>>2]|0;
        $cond$i$i$i$i$i148 = ($$pre352|0)==(0);
        if ($cond$i$i$i$i$i148) {
         $_14$0$i147$in356 = $74;
        } else {
         __THREW__ = 0;
         invoke_v(319);
         $75 = __THREW__; __THREW__ = 0;
         $76 = ___cxa_find_matching_catch_2()|0;
         $77 = tempRet0;
         if ($switchtmp$i266) {
          $personalityslot$sroa$0$0 = $76;$personalityslot$sroa$9$0 = $77;
         } else {
          $$fca$0$extract15245274 = $76;$$fca$1$extract17246275 = $77;$148 = $94;
          break L41;
         }
         ___resumeException($personalityslot$sroa$0$0|0);
         // unreachable;
        }
       } else {
        $src$i$sroa$5$0$$sroa_idx24$i$i127 = ((($65)) + 8|0);
        HEAP32[$65>>2] = 1;
        $_12$sroa$4$0$$sroa_idx$i$i132 = ((($65)) + 4|0);
        HEAP32[$_12$sroa$4$0$$sroa_idx$i$i132>>2] = 0;
        $70 = $src$i$sroa$5$0$$sroa_idx24$i$i127;
        $71 = $70;
        HEAP32[$71>>2] = 0;
        $72 = (($70) + 4)|0;
        $73 = $72;
        HEAP32[$73>>2] = 0;
        $_14$0$i147$in356 = $_12$sroa$4$0$$sroa_idx$i$i132;
       }
       $80 = ((($65)) + 8|0);
       $81 = $80;
       $82 = $81;
       $83 = HEAP32[$82>>2]|0;
       $84 = (($81) + 4)|0;
       $85 = $84;
       $86 = HEAP32[$85>>2]|0;
       HEAP32[$80>>2] = 0;
       HEAP32[$_14$0$i147$in356>>2] = 0;
       $87 = HEAP8[$err>>0]|0;
       $switch$i = ($87<<24>>24)==(1);
       $88 = ((($err)) + 1|0);
       $_0$0$i71 = $switch$i ? $88 : 0;
       HEAP32[$_44>>2] = $83;
       $$sroa_idx = ((($_44)) + 4|0);
       HEAP32[$$sroa_idx>>2] = $86;
       $89 = ((($_44)) + 8|0);
       HEAP32[$89>>2] = $_0$0$i71;
       $90 = $83;
       $switchtmp = ($83|0)==(0);
       $91 = $86;
       L54: do {
        if ($switchtmp) {
         $switch8tmp = ($_0$0$i71|0)==(0|0);
         if (!($switch8tmp)) {
          __THREW__ = 0;
          invoke_viii(320,($write|0),($89|0),(128|0));
          $98 = __THREW__; __THREW__ = 0;
          $99 = $98&1;
          if ($99) {
           $166 = ___cxa_find_matching_catch_2()|0;
           $167 = tempRet0;
           $_68$2$off0234 = 1;$personalityslot$sroa$0$3236 = $166;$personalityslot$sroa$9$3235 = $167;
           label = 41;
           break;
          }
         }
         if ($switchtmp$i266) {
          $_68$1271 = 1;
         } else {
          $_68$1270 = 1;
          label = 48;
         }
        } else {
         __THREW__ = 0;
         invoke_viii(320,($write|0),($90|0),($91|0));
         $96 = __THREW__; __THREW__ = 0;
         $97 = $96&1;
         if ($97) {
          $158 = ___cxa_find_matching_catch_2()|0;
          $159 = tempRet0;
          $160 = HEAP32[$91>>2]|0;
          FUNCTION_TABLE_vi[$160 & 511]($90);
          $161 = ((($91)) + 4|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0);
          if ($163) {
           $_68$2$off0234 = 0;$personalityslot$sroa$0$3236 = $158;$personalityslot$sroa$9$3235 = $159;
           label = 41;
           break;
          }
          $164 = ((($91)) + 8|0);
          $165 = HEAP32[$164>>2]|0;
          ___rust_deallocate($90,$162,$165);
          $_68$2$off0234 = 0;$personalityslot$sroa$0$3236 = $158;$personalityslot$sroa$9$3235 = $159;
          label = 41;
          break;
         }
         __THREW__ = 0;
         $104 = (invoke_ii(318,(2552|0))|0);
         $105 = __THREW__; __THREW__ = 0;
         $106 = $105&1;
         do {
          if ($106) {
           $107 = ___cxa_find_matching_catch_2()|0;
           $108 = tempRet0;
           $$fca$0$extract27365 = $107;$$fca$1$extract29366 = $108;
          } else {
           $switch2tmp$i$i = ($104|0)==(0|0);
           if ($switch2tmp$i$i) {
            __THREW__ = 0;
            invoke_vii(202,(7951|0),57);
            $109 = __THREW__; __THREW__ = 0;
            $110 = ___cxa_find_matching_catch_2()|0;
            $111 = tempRet0;
            $switchtmp$i79 = ($83|0)==(0);
            if ($switchtmp$i79) {
             $_68$2$off0234 = 0;$personalityslot$sroa$0$3236 = $110;$personalityslot$sroa$9$3235 = $111;
             label = 41;
             break L54;
            } else {
             $$fca$0$extract27365 = $110;$$fca$1$extract29366 = $111;
             break;
            }
           }
           $112 = HEAP32[$104>>2]|0;
           $switch$i108 = ($112|0)==(1);
           if ($switch$i108) {
            $117 = ((($104)) + 4|0);
            $$pre354 = HEAP32[$117>>2]|0;
            $cond$i$i$i$i$i = ($$pre354|0)==(0);
            if ($cond$i$i$i$i$i) {
             $$in = $117;
            } else {
             __THREW__ = 0;
             invoke_v(319);
             $118 = __THREW__; __THREW__ = 0;
             $119 = ___cxa_find_matching_catch_2()|0;
             $120 = tempRet0;
             $121 = HEAP32[$91>>2]|0;
             __THREW__ = 0;
             invoke_vi($121|0,($90|0));
             $122 = __THREW__; __THREW__ = 0;
             $123 = $122&1;
             if ($123) {
              $143 = ___cxa_find_matching_catch_2()|0;
              $144 = tempRet0;
              $_68$2$off0234 = 0;$personalityslot$sroa$0$3236 = $143;$personalityslot$sroa$9$3235 = $144;
              label = 41;
              break L54;
             }
             $136 = ((($91)) + 4|0);
             $137 = HEAP32[$136>>2]|0;
             $138 = ($137|0)==(0);
             if ($138) {
              $_68$2$off0234 = 0;$personalityslot$sroa$0$3236 = $119;$personalityslot$sroa$9$3235 = $120;
              label = 41;
              break L54;
             }
             $139 = ((($91)) + 8|0);
             $140 = HEAP32[$139>>2]|0;
             ___rust_deallocate($90,$137,$140);
             $_68$2$off0234 = 0;$personalityslot$sroa$0$3236 = $119;$personalityslot$sroa$9$3235 = $120;
             label = 41;
             break L54;
            }
           } else {
            $src$i$sroa$5$0$$sroa_idx24$i$i = ((($104)) + 8|0);
            HEAP32[$104>>2] = 1;
            $_12$sroa$4$0$$sroa_idx$i$i = ((($104)) + 4|0);
            HEAP32[$_12$sroa$4$0$$sroa_idx$i$i>>2] = 0;
            $113 = $src$i$sroa$5$0$$sroa_idx24$i$i;
            $114 = $113;
            HEAP32[$114>>2] = 0;
            $115 = (($113) + 4)|0;
            $116 = $115;
            HEAP32[$116>>2] = 0;
            $$in = $_12$sroa$4$0$$sroa_idx$i$i;
           }
           HEAP32[$$in>>2] = -1;
           $124 = ((($104)) + 8|0);
           $125 = HEAP32[$124>>2]|0;
           $switchtmp$i22$i$i = ($125|0)==(0|0);
           $$pre$i$i = ((($104)) + 12|0);
           do {
            if (!($switchtmp$i22$i$i)) {
             $126 = HEAP32[$$pre$i$i>>2]|0;
             $127 = HEAP32[$126>>2]|0;
             __THREW__ = 0;
             invoke_vi($127|0,($125|0));
             $128 = __THREW__; __THREW__ = 0;
             $129 = $128&1;
             if ($129) {
              $141 = ___cxa_find_matching_catch_2()|0;
              $142 = tempRet0;
              HEAP32[$124>>2] = $83;
              HEAP32[$$pre$i$i>>2] = $86;
              HEAP32[$$in>>2] = 0;
              $_68$2$off0234 = 0;$personalityslot$sroa$0$3236 = $141;$personalityslot$sroa$9$3235 = $142;
              label = 41;
              break L54;
             }
             $130 = HEAP32[$$pre$i$i>>2]|0;
             $131 = ((($130)) + 4|0);
             $132 = HEAP32[$131>>2]|0;
             $133 = ($132|0)==(0);
             if ($133) {
              break;
             }
             $134 = ((($130)) + 8|0);
             $135 = HEAP32[$134>>2]|0;
             ___rust_deallocate($125,$132,$135);
            }
           } while(0);
           HEAP32[$124>>2] = $83;
           HEAP32[$$pre$i$i>>2] = $86;
           HEAP32[$$in>>2] = 0;
           if ($switchtmp$i266) {
            $_68$1271 = 0;
            break L54;
           } else {
            $_68$1270 = 0;
            label = 48;
            break L54;
           }
          }
         } while(0);
         $182 = $83;
         $183 = HEAP32[$91>>2]|0;
         FUNCTION_TABLE_vi[$183 & 511]($182);
         $184 = ((($91)) + 4|0);
         $185 = HEAP32[$184>>2]|0;
         $186 = ($185|0)==(0);
         if ($186) {
          $_68$2$off0234 = 0;$personalityslot$sroa$0$3236 = $$fca$0$extract27365;$personalityslot$sroa$9$3235 = $$fca$1$extract29366;
          label = 41;
         } else {
          $187 = ((($91)) + 8|0);
          $188 = HEAP32[$187>>2]|0;
          ___rust_deallocate($182,$185,$188);
          $_68$2$off0234 = 0;$personalityslot$sroa$0$3236 = $$fca$0$extract27365;$personalityslot$sroa$9$3235 = $$fca$1$extract29366;
          label = 41;
         }
        }
       } while(0);
       if ((label|0) == 41) {
        if ($switchtmp$i266) {
         $_68$0$off0 = $_68$2$off0234;$personalityslot$sroa$0$2 = $personalityslot$sroa$0$3236;$personalityslot$sroa$9$2 = $personalityslot$sroa$9$3235;
         label = 40;
        } else {
         $93 = HEAP32[$94>>2]|0;HEAP32[$94>>2] = (($93-1)|0);
         $95 = ($93|0)==(1);
         if ($95) {
          /* fence */;
          __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($thread);
          $_68$0$off0 = $_68$2$off0234;$personalityslot$sroa$0$2 = $personalityslot$sroa$0$3236;$personalityslot$sroa$9$2 = $personalityslot$sroa$9$3235;
          label = 40;
         } else {
          $_68$0$off0 = $_68$2$off0234;$personalityslot$sroa$0$2 = $personalityslot$sroa$0$3236;$personalityslot$sroa$9$2 = $personalityslot$sroa$9$3235;
          label = 40;
         }
        }
       }
       else if ((label|0) == 48) {
        $100 = HEAP32[$94>>2]|0;HEAP32[$94>>2] = (($100-1)|0);
        $101 = ($100|0)==(1);
        if ($101) {
         /* fence */;
         __THREW__ = 0;
         invoke_vi(321,($thread|0));
         $102 = __THREW__; __THREW__ = 0;
         $103 = $102&1;
         if ($103) {
          $189 = ___cxa_find_matching_catch_2()|0;
          $190 = tempRet0;
          $extract$t = ($_68$1270<<24>>24)!=(0);
          $_68$0$off0 = $extract$t;$personalityslot$sroa$0$2 = $189;$personalityslot$sroa$9$2 = $190;
          label = 40;
         } else {
          $_68$1271 = $_68$1270;
         }
        } else {
         $_68$1271 = $_68$1270;
        }
       }
       if ((label|0) == 40) {
        $92 = HEAP32[$_44>>2]|0;
        $switch7tmp = ($92|0)==(0|0);
        $_68$0$off0$not = $_68$0$off0 ^ 1;
        $brmerge = $switch7tmp | $_68$0$off0$not;
        if ($brmerge) {
         $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$9$0 = $personalityslot$sroa$9$2;
         ___resumeException($personalityslot$sroa$0$0|0);
         // unreachable;
        }
        $150 = HEAP32[$$sroa_idx>>2]|0;
        $151 = HEAP32[$150>>2]|0;
        FUNCTION_TABLE_vi[$151 & 511]($92);
        $152 = HEAP32[$$sroa_idx>>2]|0;
        $153 = ((($152)) + 4|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = ($154|0)==(0);
        if ($155) {
         $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$9$0 = $personalityslot$sroa$9$2;
         ___resumeException($personalityslot$sroa$0$0|0);
         // unreachable;
        }
        $156 = ((($152)) + 8|0);
        $157 = HEAP32[$156>>2]|0;
        ___rust_deallocate($92,$154,$157);
        $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$9$0 = $personalityslot$sroa$9$2;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
       $145 = HEAP32[$_44>>2]|0;
       $switch9tmp = ($145|0)==(0|0);
       $146 = ($_68$1271<<24>>24)==(0);
       $or$cond = $146 | $switch9tmp;
       if ($or$cond) {
        STACKTOP = sp;return;
       }
       $168 = HEAP32[$$sroa_idx>>2]|0;
       $169 = HEAP32[$168>>2]|0;
       __THREW__ = 0;
       invoke_vi($169|0,($145|0));
       $170 = __THREW__; __THREW__ = 0;
       $171 = $170&1;
       if ($171) {
        $178 = ___cxa_find_matching_catch_2()|0;
        $179 = tempRet0;
        $personalityslot$sroa$0$0 = $178;$personalityslot$sroa$9$0 = $179;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
       $172 = HEAP32[$$sroa_idx>>2]|0;
       $173 = ((($172)) + 4|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0);
       if ($175) {
        STACKTOP = sp;return;
       }
       $176 = ((($172)) + 8|0);
       $177 = HEAP32[$176>>2]|0;
       ___rust_deallocate($145,$174,$177);
       STACKTOP = sp;return;
      }
     } while(0);
     $78 = ___cxa_find_matching_catch_2()|0;
     $79 = tempRet0;
     if ($switchtmp$i266) {
      $personalityslot$sroa$0$0 = $78;$personalityslot$sroa$9$0 = $79;
      ___resumeException($personalityslot$sroa$0$0|0);
      // unreachable;
     } else {
      $$fca$0$extract15245274 = $78;$$fca$1$extract17246275 = $79;$148 = $94;
     }
    }
   } while(0);
   $147 = HEAP32[$148>>2]|0;HEAP32[$148>>2] = (($147-1)|0);
   $149 = ($147|0)==(1);
   if (!($149)) {
    $personalityslot$sroa$0$0 = $$fca$0$extract15245274;$personalityslot$sroa$9$0 = $$fca$1$extract17246275;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   /* fence */;
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($thread);
   $personalityslot$sroa$0$0 = $$fca$0$extract15245274;$personalityslot$sroa$9$0 = $$fca$1$extract17246275;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 $180 = ___cxa_find_matching_catch_2()|0;
 $181 = tempRet0;
 $personalityslot$sroa$0$0 = $180;$personalityslot$sroa$9$0 = $181;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function _rust_panic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$sroa$3$0$$sroa_idx5 = 0, $_10$sroa$4$0$$sroa_idx6 = 0, $_10$sroa$58$0$$sroa_idx9 = 0, $_10$sroa$6$0$$sroa_idx10 = 0, $_15 = 0, $_4$i = 0, $_6$sroa$0$0$$sroa_idx$i$i = 0, $_9$i = 0, $args$i = 0, $code = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $args$i = sp + 40|0;
 $_4$i = sp + 16|0;
 $_9$i = sp + 8|0;
 $code = sp + 64|0;
 $_15 = sp;
 $2 = $0;
 $3 = $1;
 $4 = (___rust_start_panic($2,$3)|0);
 HEAP32[$code>>2] = $4;
 $5 = $code;
 HEAP32[$_15>>2] = $5;
 $6 = ((($_15)) + 4|0);
 HEAP32[$6>>2] = (322);
 HEAP32[$args$i>>2] = 2808;
 $_10$sroa$3$0$$sroa_idx5 = ((($args$i)) + 4|0);
 HEAP32[$_10$sroa$3$0$$sroa_idx5>>2] = 1;
 $_10$sroa$4$0$$sroa_idx6 = ((($args$i)) + 8|0);
 HEAP32[$_10$sroa$4$0$$sroa_idx6>>2] = 0;
 $_10$sroa$58$0$$sroa_idx9 = ((($args$i)) + 16|0);
 HEAP32[$_10$sroa$58$0$$sroa_idx9>>2] = $_15;
 $_10$sroa$6$0$$sroa_idx10 = ((($args$i)) + 20|0);
 HEAP32[$_10$sroa$6$0$$sroa_idx10>>2] = 1;
 $7 = $args$i;
 HEAP32[$_9$i>>2] = $7;
 $8 = ((($_9$i)) + 4|0);
 HEAP32[$8>>2] = (323);
 HEAP32[$_4$i>>2] = 2816;
 $9 = ((($_4$i)) + 4|0);
 HEAP32[$9>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i$i = ((($_4$i)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i$i>>2] = 0;
 $10 = ((($_4$i)) + 16|0);
 HEAP32[$10>>2] = $_9$i;
 $11 = ((($_4$i)) + 20|0);
 HEAP32[$11>>2] = 1;
 __ZN3std10sys_common4util10dumb_print17hb72d10ffb0bc3ffbE($_4$i);
 __ZN3std3sys3imp14abort_internal17h7709c7e1e54fb4baE();
 // unreachable;
}
function __ZN3std3sys3imp14abort_internal17h7709c7e1e54fb4baE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZN3std3env7_var_os17h1f8bb017ed7aa0b5E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_10$i = 0, $_10$i$sroa_raw_idx = 0, $_11$i = 0, $_26$sroa$4$0$copyload$i = 0, $_5$i = 0, $_7$sroa$0$i$sroa$4$0$_7$sroa$0$0$$sroa_cast29$i$sroa_idx81 = 0, $_7$sroa$0$i$sroa$5$0$_7$sroa$0$0$$sroa_cast29$i$sroa_idx83 = 0, $_9$i = 0, $_9$i$sroa_raw_idx = 0, $eh$lpad$body$i$index3Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $err$sroa$5$0$$sroa_idx144$i = 0, $err$sroa$6$0$$sroa_idx147$i = 0, $err$sroa$7$0$$sroa_idx150$i = 0, $key = 0, $not$$i$i$i$i$i$i$i = 0, $personalityslot$sroa$0$1171$i = 0, $personalityslot$sroa$7$1170$i = 0;
 var $phitmp = 0, $ptr$0$i$i$i$i$i = 0, $ret$sroa$0$0$i = 0, $ret$sroa$6$0$i = 0, $ret$sroa$7$0$i = 0, $self$sroa$0$0$copyload$i$i = 0, $self$sroa$11$0$$sroa_idx42$i$i = 0, $self$sroa$11$0$copyload$i$i = 0, $self$sroa$16$0$$sroa_idx49$i$i = 0, $self$sroa$16$0$copyload$i$i = 0, $self$sroa$18$0$$sroa_idx53$i$i = 0, $self$sroa$18$0$copyload$i$i = 0, $self$sroa$5$0$$sroa_idx36$i$i = 0, $self$sroa$5$0$copyload$i$i = 0, $switch3$i$i = 0, $vector$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_9$i = sp + 72|0;
 $vector$i$i$i = sp + 56|0;
 $_5$i = sp + 32|0;
 $_10$i = sp + 24|0;
 $_11$i = sp + 8|0;
 $key = sp;
 HEAP32[$key>>2] = $1;
 $3 = ((($key)) + 4|0);
 HEAP32[$3>>2] = $2;
 __THREW__ = 0;
 invoke_viii(324,($_5$i|0),($1|0),($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $37 = ___cxa_find_matching_catch_2()|0;
  $38 = tempRet0;
  $personalityslot$sroa$0$1171$i = $37;$personalityslot$sroa$7$1170$i = $38;
  ___resumeException($personalityslot$sroa$0$1171$i|0);
  // unreachable;
 }
 $self$sroa$0$0$copyload$i$i = HEAP32[$_5$i>>2]|0;
 $self$sroa$5$0$$sroa_idx36$i$i = ((($_5$i)) + 4|0);
 $self$sroa$5$0$copyload$i$i = HEAP32[$self$sroa$5$0$$sroa_idx36$i$i>>2]|0;
 $self$sroa$11$0$$sroa_idx42$i$i = ((($_5$i)) + 8|0);
 $self$sroa$11$0$copyload$i$i = HEAP32[$self$sroa$11$0$$sroa_idx42$i$i>>2]|0;
 $switch3$i$i = ($self$sroa$0$0$copyload$i$i|0)==(1);
 if ($switch3$i$i) {
  $self$sroa$18$0$$sroa_idx53$i$i = ((($_5$i)) + 16|0);
  $self$sroa$18$0$copyload$i$i = HEAP32[$self$sroa$18$0$$sroa_idx53$i$i>>2]|0;
  $self$sroa$16$0$$sroa_idx49$i$i = ((($_5$i)) + 12|0);
  $self$sroa$16$0$copyload$i$i = HEAP32[$self$sroa$16$0$$sroa_idx49$i$i>>2]|0;
  HEAP32[$_11$i>>2] = $self$sroa$5$0$copyload$i$i;
  $err$sroa$5$0$$sroa_idx144$i = ((($_11$i)) + 4|0);
  HEAP32[$err$sroa$5$0$$sroa_idx144$i>>2] = $self$sroa$11$0$copyload$i$i;
  $err$sroa$6$0$$sroa_idx147$i = ((($_11$i)) + 8|0);
  HEAP32[$err$sroa$6$0$$sroa_idx147$i>>2] = $self$sroa$16$0$copyload$i$i;
  $err$sroa$7$0$$sroa_idx150$i = ((($_11$i)) + 12|0);
  HEAP32[$err$sroa$7$0$$sroa_idx150$i>>2] = $self$sroa$18$0$copyload$i$i;
  __THREW__ = 0;
  invoke_vii(325,($_10$i|0),($_11$i|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $39 = ___cxa_find_matching_catch_2()|0;
   $40 = tempRet0;
   $personalityslot$sroa$0$1171$i = $39;$personalityslot$sroa$7$1170$i = $40;
   ___resumeException($personalityslot$sroa$0$1171$i|0);
   // unreachable;
  } else {
   $43 = HEAP32[$_10$i>>2]|0;
   $_10$i$sroa_raw_idx = ((($_10$i)) + 4|0);
   $44 = HEAP32[$_10$i$sroa_raw_idx>>2]|0;
   HEAP32[$_9$i>>2] = $43;
   $_9$i$sroa_raw_idx = ((($_9$i)) + 4|0);
   HEAP32[$_9$i$sroa_raw_idx>>2] = $44;
   __ZN3std3env7_var_os28__u7b__u7b_closure_u7d__u7d_17h914ceefd6412b54dE($key,$_9$i);
   STACKTOP = sp;return;
  }
 }
 (_pthread_mutex_lock(((15832)|0))|0);
 $8 = $self$sroa$5$0$copyload$i$i;
 $9 = (_getenv(($8|0))|0);
 $10 = ($9|0)==(0|0);
 L13: do {
  if ($10) {
   $ret$sroa$0$0$i = 0;$ret$sroa$6$0$i = 0;$ret$sroa$7$0$i = 0;
  } else {
   $11 = (_strlen($9)|0);
   $12 = ($11|0)==(-1);
   do {
    if ($12) {
     __THREW__ = 0;
     invoke_vii(317,-1,0);
     $13 = __THREW__; __THREW__ = 0;
     label = 23;
    } else {
     $14 = ($11|0)<(0);
     if ($14) {
      __THREW__ = 0;
      invoke_vi(86,(3200|0));
      $15 = __THREW__; __THREW__ = 0;
      label = 23;
      break;
     }
     $16 = ($11|0)==(0);
     if ($16) {
      $ptr$0$i$i$i$i$i = (1);
     } else {
      $17 = (___rust_allocate($11,1)|0);
      $18 = ($17|0)==(0|0);
      if ($18) {
       __THREW__ = 0;
       invoke_v(326);
       $19 = __THREW__; __THREW__ = 0;
       label = 23;
       break;
      } else {
       $ptr$0$i$i$i$i$i = $17;
      }
     }
     $20 = $ptr$0$i$i$i$i$i;
     HEAP32[$vector$i$i$i>>2] = $20;
     $21 = ((($vector$i$i$i)) + 4|0);
     HEAP32[$21>>2] = $11;
     $22 = ((($vector$i$i$i)) + 8|0);
     HEAP32[$22>>2] = 0;
     __THREW__ = 0;
     invoke_vii(327,($vector$i$i$i|0),($11|0));
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $29 = HEAP32[$22>>2]|0;
      $30 = (($29) + ($11))|0;
      HEAP32[$22>>2] = $30;
      $31 = HEAP32[$vector$i$i$i>>2]|0;
      $32 = (($31) + ($29)|0);
      _memcpy(($32|0),($9|0),($11|0))|0;
      $_26$sroa$4$0$copyload$i = HEAP32[$21>>2]|0;
      $phitmp = $31;
      $ret$sroa$0$0$i = $phitmp;$ret$sroa$6$0$i = $_26$sroa$4$0$copyload$i;$ret$sroa$7$0$i = $30;
      break L13;
     }
     $25 = ___cxa_find_matching_catch_2()|0;
     $26 = tempRet0;
     $27 = HEAP32[$21>>2]|0;
     $not$$i$i$i$i$i$i$i = ($27|0)==(0);
     if ($not$$i$i$i$i$i$i$i) {
      $eh$lpad$body$i$index3Z2D = $26;$eh$lpad$body$i$indexZ2D = $25;
     } else {
      $28 = HEAP32[$vector$i$i$i>>2]|0;
      ___rust_deallocate($28,$27,1);
      $eh$lpad$body$i$index3Z2D = $26;$eh$lpad$body$i$indexZ2D = $25;
     }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = ___cxa_find_matching_catch_2()|0;
    $42 = tempRet0;
    $eh$lpad$body$i$index3Z2D = $42;$eh$lpad$body$i$indexZ2D = $41;
   }
   $35 = $self$sroa$5$0$copyload$i$i;
   HEAP8[$35>>0] = 0;
   $36 = ($self$sroa$11$0$copyload$i$i|0)==(0);
   if ($36) {
    $personalityslot$sroa$0$1171$i = $eh$lpad$body$i$indexZ2D;$personalityslot$sroa$7$1170$i = $eh$lpad$body$i$index3Z2D;
    ___resumeException($personalityslot$sroa$0$1171$i|0);
    // unreachable;
   }
   ___rust_deallocate($35,$self$sroa$11$0$copyload$i$i,1);
   $personalityslot$sroa$0$1171$i = $eh$lpad$body$i$indexZ2D;$personalityslot$sroa$7$1170$i = $eh$lpad$body$i$index3Z2D;
   ___resumeException($personalityslot$sroa$0$1171$i|0);
   // unreachable;
  }
 } while(0);
 (_pthread_mutex_unlock(((15832)|0))|0);
 $33 = $self$sroa$5$0$copyload$i$i;
 HEAP8[$33>>0] = 0;
 $34 = ($self$sroa$11$0$copyload$i$i|0)==(0);
 if (!($34)) {
  ___rust_deallocate($33,$self$sroa$11$0$copyload$i$i,1);
 }
 HEAP32[$0>>2] = $ret$sroa$0$0$i;
 $_7$sroa$0$i$sroa$4$0$_7$sroa$0$0$$sroa_cast29$i$sroa_idx81 = ((($0)) + 4|0);
 HEAP32[$_7$sroa$0$i$sroa$4$0$_7$sroa$0$0$$sroa_cast29$i$sroa_idx81>>2] = $ret$sroa$6$0$i;
 $_7$sroa$0$i$sroa$5$0$_7$sroa$0$0$$sroa_cast29$i$sroa_idx83 = ((($0)) + 8|0);
 HEAP32[$_7$sroa$0$i$sroa$5$0$_7$sroa$0$0$$sroa_cast29$i$sroa_idx83>>2] = $ret$sroa$7$0$i;
 STACKTOP = sp;return;
}
function __ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h362dce70d8816be7E() {
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i3 = 0, $_20$sroa$0$0$$sroa_idx = 0, $cond$i$i = 0, $cond$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[667]|0;
 $cond$i$i1 = ($0|0)==(0);
 if ($cond$i$i1) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h99fc4ab166ab9497E(2668)|0);
  $_0$0$i$i3 = $1;
 } else {
  $_0$0$i$i3 = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i3|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$ = $4 ? 0 : $5;
  return ($$|0);
 }
 $6 = (___rust_allocate(24,4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 HEAP32[$6>>2] = 2668;
 $_20$sroa$0$0$$sroa_idx = ((($6)) + 4|0);
 HEAP32[$_20$sroa$0$0$$sroa_idx>>2] = 0;
 $8 = HEAP32[667]|0;
 $cond$i$i = ($8|0)==(0);
 if (!($cond$i$i)) {
  $_0$0$i$i = $8;
  (_pthread_setspecific(($_0$0$i$i|0),($6|0))|0);
  return ($_20$sroa$0$0$$sroa_idx|0);
 }
 $9 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h99fc4ab166ab9497E(2668)|0);
 $_0$0$i$i = $9;
 (_pthread_setspecific(($_0$0$i$i|0),($6|0))|0);
 return ($_20$sroa$0$0$$sroa_idx|0);
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17haf50d21ee5154093E() {
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11$i = 0, $_12$sroa$5$0$$sroa_idx52$i = 0, $_3$i = 0, $_9$i = 0, $cond$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i54$i = 0, $cond$i$i$i59$i = 0, $not$switch$i$i = 0, $personalityslot$sroa$0$1$i = 0, $personalityslot$sroa$10$1$i = 0, $switch = 0, $switch2tmp$i = 0;
 var $switchtmp$i$i = 0, $switchtmp$i$i$i$i$i = 0, $switchtmp$i64$i = 0, $switchtmp$i66$i = 0, $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx = 0, $value$i$sroa$415$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_3$i = sp + 40|0;
 $_11$i = sp + 24|0;
 $_9$i = sp;
 $0 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h362dce70d8816be7E()|0);
 $switch2tmp$i = ($0|0)==(0|0);
 if ($switch2tmp$i) {
  __ZN4core6option13expect_failed17he4838b1eef3c5645E(7951,57);
  // unreachable;
 }
 $1 = HEAP32[$0>>2]|0;
 $switch = ($1|0)==(1);
 do {
  if ($switch) {
   $$pre = ((($0)) + 4|0);
   $$pre$phiZ2D = $$pre;
  } else {
   ;HEAP32[$_9$i>>2]=HEAP32[$0>>2]|0;HEAP32[$_9$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_9$i+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_9$i+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_9$i+16>>2]=HEAP32[$0+16>>2]|0;
   HEAP32[$0>>2] = 1;
   $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx = ((($0)) + 4|0);
   HEAP32[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx>>2] = 0;
   $value$i$sroa$415$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx = ((($0)) + 16|0);
   HEAP32[$value$i$sroa$415$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx>>2] = 0;
   $2 = HEAP32[$_9$i>>2]|0;
   $cond$i$i = ($2|0)==(1);
   if ($cond$i$i) {
    $3 = ((($_9$i)) + 16|0);
    $4 = HEAP32[$3>>2]|0;
    $switchtmp$i$i$i$i$i = ($4|0)==(0|0);
    if (!($switchtmp$i$i$i$i$i)) {
     $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5-1)|0);
     $6 = ($5|0)==(1);
     if ($6) {
      /* fence */;
      __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($3);
     }
    }
   }
   $7 = HEAP32[$0>>2]|0;
   $not$switch$i$i = ($7|0)==(1);
   if ($not$switch$i$i) {
    $$pre$phiZ2D = $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx;
    break;
   } else {
    __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3288);
    // unreachable;
   }
  }
 } while(0);
 $8 = HEAP32[$$pre$phiZ2D>>2]|0;
 $cond$i$i$i$i = ($8|0)==(-1);
 L16: do {
  if ($cond$i$i$i$i) {
   __THREW__ = 0;
   invoke_v(328);
   $9 = __THREW__; __THREW__ = 0;
  } else {
   $10 = (($8) + 1)|0;
   HEAP32[$$pre$phiZ2D>>2] = $10;
   $11 = ((($0)) + 8|0);
   $12 = ((($0)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   HEAP32[$$pre$phiZ2D>>2] = $8;
   do {
    if ($14) {
     HEAP32[$_3$i>>2] = 0;
     __THREW__ = 0;
     $15 = (invoke_ii(329,($_3$i|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      break L16;
     }
     $18 = $15;
     HEAP32[$_11$i>>2] = 0;
     $_12$sroa$5$0$$sroa_idx52$i = ((($_11$i)) + 8|0);
     HEAP32[$_12$sroa$5$0$$sroa_idx52$i>>2] = $18;
     $19 = HEAP32[$$pre$phiZ2D>>2]|0;
     $cond$i$i$i54$i = ($19|0)==(0);
     if ($cond$i$i$i54$i) {
      HEAP32[$$pre$phiZ2D>>2] = -1;
      $23 = HEAP32[$12>>2]|0;
      $switchtmp$i$i = ($23|0)==(0|0);
      if (!($switchtmp$i$i)) {
       $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24-1)|0);
       $25 = ($24|0)==(1);
       if ($25) {
        /* fence */;
        __THREW__ = 0;
        invoke_vi(321,($12|0));
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if ($27) {
         $40 = ___cxa_find_matching_catch_2()|0;
         $41 = tempRet0;
         ;HEAP32[$11>>2]=HEAP32[$_11$i>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_11$i+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$_11$i+8>>2]|0;
         HEAP32[$$pre$phiZ2D>>2] = 0;
         $personalityslot$sroa$0$1$i = $40;$personalityslot$sroa$10$1$i = $41;
         ___resumeException($personalityslot$sroa$0$1$i|0);
         // unreachable;
        }
       }
      }
      ;HEAP32[$11>>2]=HEAP32[$_11$i>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_11$i+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$_11$i+8>>2]|0;
      HEAP32[$$pre$phiZ2D>>2] = 0;
      break;
     } else {
      __THREW__ = 0;
      invoke_v(319);
      $20 = __THREW__; __THREW__ = 0;
      $21 = ___cxa_find_matching_catch_2()|0;
      $22 = tempRet0;
      $switchtmp$i66$i = ($15|0)==(0);
      if ($switchtmp$i66$i) {
       $personalityslot$sroa$0$1$i = $21;$personalityslot$sroa$10$1$i = $22;
       ___resumeException($personalityslot$sroa$0$1$i|0);
       // unreachable;
      }
      $37 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($37-1)|0);
      $38 = ($37|0)==(1);
      if (!($38)) {
       $personalityslot$sroa$0$1$i = $21;$personalityslot$sroa$10$1$i = $22;
       ___resumeException($personalityslot$sroa$0$1$i|0);
       // unreachable;
      }
      $39 = ((($_11$i)) + 8|0);
      /* fence */;
      __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($39);
      $personalityslot$sroa$0$1$i = $21;$personalityslot$sroa$10$1$i = $22;
      ___resumeException($personalityslot$sroa$0$1$i|0);
      // unreachable;
     }
    } else {
     $cond$i$i$i59$i = ($8|0)==(0);
     if (!($cond$i$i$i59$i)) {
      __THREW__ = 0;
      invoke_v(319);
      $28 = __THREW__; __THREW__ = 0;
      $29 = ___cxa_find_matching_catch_2()|0;
      $30 = tempRet0;
      $personalityslot$sroa$0$1$i = $29;$personalityslot$sroa$10$1$i = $30;
      ___resumeException($personalityslot$sroa$0$1$i|0);
      // unreachable;
     }
    }
   } while(0);
   HEAP32[$$pre$phiZ2D>>2] = -1;
   $31 = HEAP32[$12>>2]|0;
   $switchtmp$i64$i = ($31|0)==(0|0);
   if ($switchtmp$i64$i) {
    __THREW__ = 0;
    invoke_vi(86,(3288|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    HEAP32[$$pre$phiZ2D>>2] = 0;
    $personalityslot$sroa$0$1$i = $33;$personalityslot$sroa$10$1$i = $34;
    ___resumeException($personalityslot$sroa$0$1$i|0);
    // unreachable;
   }
   $35 = HEAP32[$31>>2]|0;HEAP32[$31>>2] = (($35+1)|0);
   $36 = ($35|0)<(0);
   if ($36) {
    _llvm_trap();
    // unreachable;
   } else {
    $44 = $31;
    HEAP32[$$pre$phiZ2D>>2] = 0;
    STACKTOP = sp;return ($44|0);
   }
  }
 } while(0);
 $42 = ___cxa_find_matching_catch_2()|0;
 $43 = tempRet0;
 $personalityslot$sroa$0$1$i = $42;$personalityslot$sroa$10$1$i = $43;
 ___resumeException($personalityslot$sroa$0$1$i|0);
 // unreachable;
 return (0)|0;
}
function __ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17hf8bc393e7f3a9d8cE($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i14 = 0, $_20$sroa$0$0$$sroa_idx = 0, $cond$i$i = 0, $cond$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $cond$i$i12 = ($1|0)==(0);
 if ($cond$i$i12) {
  $2 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h99fc4ab166ab9497E($0)|0);
  $_0$0$i$i14 = $2;
 } else {
  $_0$0$i$i14 = $1;
 }
 $3 = (_pthread_getspecific(($_0$0$i$i14|0))|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ($3|0)==((1)|0);
  $6 = ((($3)) + 4|0);
  $$ = $5 ? 0 : $6;
  return ($$|0);
 }
 $7 = (___rust_allocate(20,4)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 HEAP32[$7>>2] = $0;
 $_20$sroa$0$0$$sroa_idx = ((($7)) + 4|0);
 HEAP32[$_20$sroa$0$0$$sroa_idx>>2] = 0;
 $9 = HEAP32[$0>>2]|0;
 $cond$i$i = ($9|0)==(0);
 if (!($cond$i$i)) {
  $_0$0$i$i = $9;
  (_pthread_setspecific(($_0$0$i$i|0),($7|0))|0);
  return ($_20$sroa$0$0$$sroa_idx|0);
 }
 $10 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h99fc4ab166ab9497E($0)|0);
 $_0$0$i$i = $10;
 (_pthread_setspecific(($_0$0$i$i|0),($7|0))|0);
 return ($_20$sroa$0$0$$sroa_idx|0);
}
function __ZN4core6result13unwrap_failed17h77140d60754f5e94E_240() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $msg = sp + 40|0;
 $_5 = sp + 16|0;
 $_10 = sp;
 HEAP32[$msg>>2] = 8555;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 16;
 $1 = HEAP32[830]|0;
 $2 = HEAP32[(3324)>>2]|0;
 $3 = $msg;
 $4 = $error;
 HEAP32[$_10>>2] = $3;
 $5 = ((($_10)) + 4|0);
 HEAP32[$5>>2] = (308);
 $6 = ((($_10)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($_10)) + 12|0);
 HEAP32[$7>>2] = (98);
 HEAP32[$_5>>2] = $1;
 $8 = ((($_5)) + 4|0);
 HEAP32[$8>>2] = $2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $9 = ((($_5)) + 16|0);
 HEAP32[$9>>2] = $_10;
 $10 = ((($_5)) + 20|0);
 HEAP32[$10>>2] = 2;
 __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_5,3308);
 // unreachable;
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switchtmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $switchtmp$i$i = ($3|0)==(0|0);
 if (!($switchtmp$i$i)) {
  HEAP8[$3>>0] = 0;
  $4 = ((($1)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = HEAP32[$2>>2]|0;
   ___rust_deallocate($7,$5,1);
  }
 }
 $8 = ((($1)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 (_pthread_mutex_destroy(($9|0))|0);
 $10 = HEAP32[$8>>2]|0;
 ___rust_deallocate($10,24,8);
 $11 = ((($1)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 (_pthread_cond_destroy(($12|0))|0);
 $13 = HEAP32[$11>>2]|0;
 ___rust_deallocate($13,48,8);
 $14 = HEAP32[$0>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16-1)|0);
 $17 = ($16|0)==(1);
 if (!($17)) {
  return;
 }
 /* fence */;
 ___rust_deallocate($1,40,8);
 return;
}
function __ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17ha0fddc25ef6604a1E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $_0$sroa$3$0$insert$ext$i$i$i = 0, $_11 = 0;
 var $_34 = 0, $_4 = 0, $_40 = 0, $_42 = 0, $_6 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i12 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i14 = 0, $cond$i$i$i21 = 0, $cond$i13 = 0, $cond$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_4 = sp + 112|0;
 $_6 = sp + 88|0;
 $_11 = sp + 56|0;
 $_34 = sp + 40|0;
 $_40 = sp + 24|0;
 $_42 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$_11>>2] = $3;
 $10 = ((($_11)) + 4|0);
 HEAP32[$10>>2] = (308);
 $11 = ((($_11)) + 8|0);
 HEAP32[$11>>2] = $5;
 $12 = ((($_11)) + 12|0);
 HEAP32[$12>>2] = (308);
 $13 = ((($_11)) + 16|0);
 HEAP32[$13>>2] = $7;
 $14 = ((($_11)) + 20|0);
 HEAP32[$14>>2] = (308);
 $15 = ((($_11)) + 24|0);
 HEAP32[$15>>2] = $9;
 $16 = ((($_11)) + 28|0);
 HEAP32[$16>>2] = (322);
 HEAP32[$_6>>2] = 2832;
 $17 = ((($_6)) + 4|0);
 HEAP32[$17>>2] = 5;
 $_6$sroa$0$0$$sroa_idx$i = ((($_6)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $18 = ((($_6)) + 16|0);
 HEAP32[$18>>2] = $_11;
 $19 = ((($_6)) + 20|0);
 HEAP32[$19>>2] = 4;
 $20 = ((($2)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viii[$21 & 511]($_4,$1,$_6);
 $22 = HEAP32[$_4>>2]|0;
 $cond$i20 = ($22|0)==(1);
 if ($cond$i20) {
  $23 = ((($_4)) + 4|0);
  $24 = HEAP8[$23>>0]|0;
  $cond$i$i$i21 = ($24<<24>>24)==(2);
  if ($cond$i$i$i21) {
   $25 = ((($_4)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($26)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   FUNCTION_TABLE_vi[$31 & 511]($28);
   $32 = HEAP32[$29>>2]|0;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0);
   if (!($35)) {
    $36 = ((($32)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    ___rust_deallocate($28,$34,$37);
   }
   ___rust_deallocate($26,12,4);
  }
 }
 $38 = ((($0)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP8[$39>>0]|0;
 $41 = ($40<<24>>24)==(0);
 if (!($41)) {
  __ZN3std3sys3imp9backtrace7tracing3imp5write17hd9382f7c6c99d71aE($_34,$1,$2);
  $42 = HEAP32[$_34>>2]|0;
  $cond$i13 = ($42|0)==(1);
  if ($cond$i13) {
   $43 = ((($_34)) + 4|0);
   $44 = HEAP8[$43>>0]|0;
   $cond$i$i$i14 = ($44<<24>>24)==(2);
   if ($cond$i$i$i14) {
    $45 = ((($_34)) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($46)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    FUNCTION_TABLE_vi[$51 & 511]($48);
    $52 = HEAP32[$49>>2]|0;
    $53 = ((($52)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)==(0);
    if (!($55)) {
     $56 = ((($52)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     ___rust_deallocate($48,$54,$57);
    }
    ___rust_deallocate($46,12,4);
   }
  }
  STACKTOP = sp;return;
 }
 $58 = HEAP8[7950]|0;if (($58<<24>>24) == 1) HEAP8[7950] = 0;
 $_0$sroa$3$0$insert$ext$i$i$i = $58&255;
 $59 = ($_0$sroa$3$0$insert$ext$i$i$i << 8)&65535;
 $60 = ($59&65535)>(255);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 HEAP32[$_42>>2] = 2872;
 $61 = ((($_42)) + 4|0);
 HEAP32[$61>>2] = 1;
 $_6$sroa$0$0$$sroa_idx$i12 = ((($_42)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i12>>2] = 0;
 $62 = ((($_42)) + 16|0);
 HEAP32[$62>>2] = 16064;
 $63 = ((($_42)) + 20|0);
 HEAP32[$63>>2] = 0;
 $64 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viii[$64 & 511]($_40,$1,$_42);
 $65 = HEAP32[$_40>>2]|0;
 $cond$i = ($65|0)==(1);
 if ($cond$i) {
  $66 = ((($_40)) + 4|0);
  $67 = HEAP8[$66>>0]|0;
  $cond$i$i$i = ($67<<24>>24)==(2);
  if ($cond$i$i$i) {
   $68 = ((($_40)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($69)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($69)) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP32[$73>>2]|0;
   FUNCTION_TABLE_vi[$74 & 511]($71);
   $75 = HEAP32[$72>>2]|0;
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)==(0);
   if (!($78)) {
    $79 = ((($75)) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    ___rust_deallocate($71,$77,$80);
   }
   ___rust_deallocate($69,12,4);
  }
 }
 STACKTOP = sp;return;
}
function __ZN4drop17h528e564b5eb6cac7E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17h4b5ca56cfd27f34aE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$i$sroa$4$0$$sroa_idx2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_write(2,$2,$3)|0);
 $5 = ($4|0)==(-1);
 if ($5) {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $$sink$i$i = 1;$10 = 0;$13 = $7;
 } else {
  $$sink$i$i = 0;$10 = $4;$13 = 0;
 }
 HEAP32[$0>>2] = $$sink$i$i;
 $ret$i$sroa$4$0$$sroa_idx2$i = ((($0)) + 4|0);
 $8 = $ret$i$sroa$4$0$$sroa_idx2$i;
 $9 = $8;
 HEAP32[$9>>2] = $10;
 $11 = (($8) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $13;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17hcb854b32f78cb163E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17h5641c50d2b904642E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 __ZN3std2io5Write9write_all17h8b5957ae11bc0097E($0,$4,$2,$3);
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17h36b6a308d6f94319E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $_6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp;
 $3 = HEAP32[$1>>2]|0;
 ;HEAP32[$_6>>2]=HEAP32[$2>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$_6+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$_6+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$_6+20>>2]=HEAP32[$2+20>>2]|0;
 __ZN3std2io5Write9write_fmt17h76814ab1b8b64625E($0,$3,$_6);
 STACKTOP = sp;return;
}
function __ZN3std2io5Write9write_fmt17h76814ab1b8b64625E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx = 0, $$sroa_idx31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_4$i$i$i = 0, $_7$sroa$0$0$$sroa_idx = 0, $cond$i = 0, $cond$i$i$i = 0;
 var $cond$i$i$i22 = 0, $cond$i21 = 0, $output = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$5$0 = 0, $switch = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $x$i$sroa$4$i = sp + 68|0;
 $x$sroa$0$i$i$i$i$i = sp + 56|0;
 $_4$i$i$i = sp + 40|0;
 $output = sp + 24|0;
 $_13 = sp;
 HEAP32[$output>>2] = $1;
 $_7$sroa$0$0$$sroa_idx = ((($output)) + 4|0);
 HEAP32[$_7$sroa$0$0$$sroa_idx>>2] = 0;
 ;HEAP32[$_13>>2]=HEAP32[$2>>2]|0;HEAP32[$_13+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$_13+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$_13+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$_13+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$_13+20>>2]=HEAP32[$2+20>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_iiii(309,($output|0),(160|0),($_13|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if (!($5)) {
   $switch = ($3<<24>>24)==(0);
   do {
    if ($switch) {
     HEAP32[$0>>2] = 0;
    } else {
     $6 = ((($output)) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ($7|0)==(1);
     if ($8) {
      ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_viii(330,($_4$i$i$i|0),(8214|0),15);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break L1;
     }
     ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
     $11 = (___rust_allocate(12,4)|0);
     $12 = ($11|0)==(0|0);
     if ($12) {
      __THREW__ = 0;
      invoke_v(326);
      $13 = __THREW__; __THREW__ = 0;
      break L1;
     }
     ;HEAP32[$11>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$11+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
     $14 = (___rust_allocate(12,4)|0);
     $15 = ($14|0)==(0|0);
     if ($15) {
      __THREW__ = 0;
      invoke_v(326);
      $16 = __THREW__; __THREW__ = 0;
      break L1;
     } else {
      HEAP8[$14>>0] = 16;
      $x$i$sroa$4$0$$sroa_raw_idx$i = ((($14)) + 1|0);
      ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
      $x$i$sroa$5$0$$sroa_idx$i = ((($14)) + 4|0);
      HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $11;
      $x$i$sroa$6$0$$sroa_idx$i = ((($14)) + 8|0);
      HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 184;
      $17 = $14;
      HEAP32[$0>>2] = 1;
      $$sroa_idx = ((($0)) + 4|0);
      HEAP32[$$sroa_idx>>2] = 2;
      $$sroa_idx31 = ((($0)) + 8|0);
      HEAP32[$$sroa_idx31>>2] = $17;
      break;
     }
    }
   } while(0);
   $18 = HEAP32[$_7$sroa$0$0$$sroa_idx>>2]|0;
   $cond$i21 = ($18|0)==(1);
   if (!($cond$i21)) {
    STACKTOP = sp;return;
   }
   $19 = ((($output)) + 8|0);
   $20 = HEAP8[$19>>0]|0;
   $cond$i$i$i22 = ($20<<24>>24)==(2);
   if (!($cond$i$i$i22)) {
    STACKTOP = sp;return;
   }
   $21 = ((($output)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($22)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   __THREW__ = 0;
   invoke_vi($27|0,($24|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $54 = ___cxa_find_matching_catch_2()|0;
    $55 = tempRet0;
    $personalityslot$sroa$0$0 = $54;$personalityslot$sroa$5$0 = $55;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $30 = HEAP32[$25>>2]|0;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if (!($33)) {
    $34 = ((($30)) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    ___rust_deallocate($24,$32,$35);
   }
   ___rust_deallocate($22,12,4);
   STACKTOP = sp;return;
  }
 } while(0);
 $36 = ___cxa_find_matching_catch_2()|0;
 $37 = tempRet0;
 $38 = HEAP32[$_7$sroa$0$0$$sroa_idx>>2]|0;
 $cond$i = ($38|0)==(1);
 if (!($cond$i)) {
  $personalityslot$sroa$0$0 = $36;$personalityslot$sroa$5$0 = $37;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $39 = ((($output)) + 8|0);
 $40 = HEAP8[$39>>0]|0;
 $cond$i$i$i = ($40<<24>>24)==(2);
 if (!($cond$i$i$i)) {
  $personalityslot$sroa$0$0 = $36;$personalityslot$sroa$5$0 = $37;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $41 = ((($output)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($42)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$46>>2]|0;
 FUNCTION_TABLE_vi[$47 & 511]($44);
 $48 = HEAP32[$45>>2]|0;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0);
 if (!($51)) {
  $52 = ((($48)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  ___rust_deallocate($44,$50,$53);
 }
 ___rust_deallocate($42,12,4);
 $personalityslot$sroa$0$0 = $36;$personalityslot$sroa$5$0 = $37;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN4drop17h214d5866c0ceeae9E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $not$$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $not$$i$i$i$i$i = ($2|0)==(0);
 if ($not$$i$i$i$i$i) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 ___rust_deallocate($3,$2,1);
 return;
}
function __ZN251__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17h80a522282c8c37b8E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$retVal>>2] = $1;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $3;
 return;
}
function __ZN3std5error5Error5cause17he19e4136b76adf6fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std5error5Error7type_id17h916570fb171be5b2E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (1173062557);
 return 2036385609;
}
function __ZN252__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h8034733c7a02f473E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hded13da3919e24b6E($2,$4,$1)|0);
 return ($5|0);
}
function __ZN250__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17hd24d381124ac7156E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_15 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $builder = sp;
 $_15 = sp + 12|0;
 __ZN4core3fmt8builders15debug_tuple_new17hf289acaae08eb593E($builder,$1,8229,11);
 HEAP32[$_15>>2] = $0;
 (__ZN4core3fmt8builders10DebugTuple5field17hfd6be2ee9fdea117E($builder,$_15,216)|0);
 $2 = (__ZN4core3fmt8builders10DebugTuple6finish17hfc15bc664174c0e7E($builder)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h257b9e7f07731cecE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h51cb268862c67feeE($3,$5,$1)|0);
 return ($6|0);
}
function __ZN4drop17he03788aca3a174dbE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $cond$i = ($2|0)==(1);
 if (!($cond$i)) {
  return;
 }
 $3 = ((($0)) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $cond$i$i$i = ($4<<24>>24)==(2);
 if (!($cond$i$i$i)) {
  return;
 }
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 511]($8);
 $12 = HEAP32[$9>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = ((($12)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  ___rust_deallocate($8,$14,$17);
 }
 ___rust_deallocate($6,12,4);
 return;
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hde6a377d6898c273E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$060 = 0, $_5 = 0, $cond$i = 0;
 var $cond$i$i$i = 0, $e$sroa$0$0$$sroa_idx32 = 0, $switch3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5 = sp;
 $3 = HEAP32[$0>>2]|0;
 __ZN3std2io5Write9write_all17h8b5957ae11bc0097E($_5,$3,$1,$2);
 $4 = HEAP32[$_5>>2]|0;
 $switch3 = ($4|0)==(1);
 if (!($switch3)) {
  $_0$sroa$0$060 = 0;
  STACKTOP = sp;return ($_0$sroa$0$060|0);
 }
 $e$sroa$0$0$$sroa_idx32 = ((($_5)) + 4|0);
 $5 = $e$sroa$0$0$$sroa_idx32;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $cond$i = ($12|0)==(1);
 $13 = ((($0)) + 8|0);
 if ($cond$i) {
  $14 = HEAP8[$13>>0]|0;
  $cond$i$i$i = ($14<<24>>24)==(2);
  if ($cond$i$i$i) {
   $15 = ((($0)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($16)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   invoke_vi($21|0,($18|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $34 = ___cxa_find_matching_catch_2()|0;
    $35 = tempRet0;
    HEAP32[$11>>2] = 1;
    $36 = $13;
    $37 = $36;
    HEAP32[$37>>2] = $7;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $10;
    ___resumeException($34|0);
    // unreachable;
   }
   $24 = HEAP32[$19>>2]|0;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if (!($27)) {
    $28 = ((($24)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    ___rust_deallocate($18,$26,$29);
   }
   ___rust_deallocate($16,12,4);
  }
 }
 HEAP32[$11>>2] = 1;
 $30 = $13;
 $31 = $30;
 HEAP32[$31>>2] = $7;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $10;
 $_0$sroa$0$060 = 1;
 STACKTOP = sp;return ($_0$sroa$0$060|0);
}
function __ZN4core3fmt5Write10write_char17h4e2d8795d1f986b2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $_12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $_12 = sp + 8|0;
 HEAP32[$_12>>2] = 0;
 __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817h6e66fdcf584d84f0E_241($2,$1,$_12);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hde6a377d6898c273E($0,$$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3fmt5Write9write_fmt17h6cb9985944bd383bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_10 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp + 24|0;
 $_10 = sp;
 HEAP32[$_8>>2] = $0;
 ;HEAP32[$_10>>2]=HEAP32[$1>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17he0deec3411c715a1E($_8,232,$_10)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0fcc383b62cf1aa6E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hde6a377d6898c273E($3,$1,$2)|0);
 return ($4|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h84c2d3e20bfbcbb8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i = 0, $len$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_12$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_12$i>>2] = 0;
 $3 = ($1>>>0)<(128);
 do {
  if ($3) {
   $4 = $1&255;
   HEAP8[$_12$i>>0] = $4;
   $len$0$i = 1;
  } else {
   $5 = ($1>>>0)<(2048);
   if ($5) {
    $6 = $1 >>> 6;
    $7 = $6 & 31;
    $8 = $7&255;
    $9 = $8 | -64;
    HEAP8[$_12$i>>0] = $9;
    $10 = $1 & 63;
    $11 = $10&255;
    $12 = ((($_12$i)) + 1|0);
    $13 = $11 | -128;
    HEAP8[$12>>0] = $13;
    $len$0$i = 2;
    break;
   }
   $14 = ($1>>>0)<(65536);
   if ($14) {
    $15 = $1 >>> 12;
    $16 = $15 & 15;
    $17 = $16&255;
    $18 = $17 | -32;
    HEAP8[$_12$i>>0] = $18;
    $19 = $1 >>> 6;
    $20 = $19 & 63;
    $21 = $20&255;
    $22 = ((($_12$i)) + 1|0);
    $23 = $21 | -128;
    HEAP8[$22>>0] = $23;
    $24 = $1 & 63;
    $25 = $24&255;
    $26 = ((($_12$i)) + 2|0);
    $27 = $25 | -128;
    HEAP8[$26>>0] = $27;
    $len$0$i = 3;
    break;
   } else {
    $28 = $1 >>> 18;
    $29 = $28 & 7;
    $30 = $29&255;
    $31 = $30 | -16;
    HEAP8[$_12$i>>0] = $31;
    $32 = $1 >>> 12;
    $33 = $32 & 63;
    $34 = $33&255;
    $35 = ((($_12$i)) + 1|0);
    $36 = $34 | -128;
    HEAP8[$35>>0] = $36;
    $37 = $1 >>> 6;
    $38 = $37 & 63;
    $39 = $38&255;
    $40 = ((($_12$i)) + 2|0);
    $41 = $39 | -128;
    HEAP8[$40>>0] = $41;
    $42 = $1 & 63;
    $43 = $42&255;
    $44 = ((($_12$i)) + 3|0);
    $45 = $43 | -128;
    HEAP8[$44>>0] = $45;
    $len$0$i = 4;
    break;
   }
  }
 } while(0);
 $46 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hde6a377d6898c273E($2,$_12$i,$len$0$i)|0);
 STACKTOP = sp;return ($46|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hd464ffff0aa9e12fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 24|0;
 $_10$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17he0deec3411c715a1E($_8$i,232,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817h6e66fdcf584d84f0E_241($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $len$0 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(128);
 do {
  if ($2) {
   $3 = $0&255;
   HEAP8[$1>>0] = $3;
   $len$0 = 1;
  } else {
   $4 = ($0>>>0)<(2048);
   if ($4) {
    $5 = $0 >>> 6;
    $6 = $5 & 31;
    $7 = $6&255;
    $8 = $7 | -64;
    HEAP8[$1>>0] = $8;
    $9 = $0 & 63;
    $10 = $9&255;
    $11 = ((($1)) + 1|0);
    $12 = $10 | -128;
    HEAP8[$11>>0] = $12;
    $len$0 = 2;
    break;
   }
   $13 = ($0>>>0)<(65536);
   if ($13) {
    $14 = $0 >>> 12;
    $15 = $14 & 15;
    $16 = $15&255;
    $17 = $16 | -32;
    HEAP8[$1>>0] = $17;
    $18 = $0 >>> 6;
    $19 = $18 & 63;
    $20 = $19&255;
    $21 = ((($1)) + 1|0);
    $22 = $20 | -128;
    HEAP8[$21>>0] = $22;
    $23 = $0 & 63;
    $24 = $23&255;
    $25 = ((($1)) + 2|0);
    $26 = $24 | -128;
    HEAP8[$25>>0] = $26;
    $len$0 = 3;
    break;
   } else {
    $27 = $0 >>> 18;
    $28 = $27 & 7;
    $29 = $28&255;
    $30 = $29 | -16;
    HEAP8[$1>>0] = $30;
    $31 = $0 >>> 12;
    $32 = $31 & 63;
    $33 = $32&255;
    $34 = ((($1)) + 1|0);
    $35 = $33 | -128;
    HEAP8[$34>>0] = $35;
    $36 = $0 >>> 6;
    $37 = $36 & 63;
    $38 = $37&255;
    $39 = ((($1)) + 2|0);
    $40 = $38 | -128;
    HEAP8[$39>>0] = $40;
    $41 = $0 & 63;
    $42 = $41&255;
    $43 = ((($1)) + 3|0);
    $44 = $42 | -128;
    HEAP8[$43>>0] = $44;
    $len$0 = 4;
    break;
   }
  }
 } while(0);
 HEAP32[$retVal>>2] = $1;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $len$0;
 return;
}
function __ZN3std2io5Write9write_all17h8b5957ae11bc0097E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sroa_idx = 0, $$sroa_idx69 = 0, $$sroa_idx77 = 0, $$sroa_idx78 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4$i$i$i = 0, $buf$sroa$0$0$ph190 = 0, $buf$sroa$8$0$ph191 = 0;
 var $cond167 = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$i$sroa$4$i = sp + 28|0;
 $x$sroa$0$i$i$i$i$i = sp + 16|0;
 $_4$i$i$i = sp;
 $4 = ($3|0)==(0);
 L1: do {
  if (!($4)) {
   $buf$sroa$0$0$ph190 = $2;$buf$sroa$8$0$ph191 = $3;
   L2: while(1) {
    L4: while(1) {
     $5 = (_write(2,$buf$sroa$0$0$ph190,$buf$sroa$8$0$ph191)|0);
     switch ($5|0) {
     case 0:  {
      label = 5;
      break L2;
      break;
     }
     case -1:  {
      break;
     }
     default: {
      break L4;
     }
     }
     $10 = (___errno_location()|0);
     $11 = HEAP32[$10>>2]|0;
     $cond167 = ($11|0)==(4);
     if (!($cond167)) {
      label = 14;
      break L2;
     }
    }
    $12 = ($buf$sroa$8$0$ph191>>>0)<($5>>>0);
    if ($12) {
     label = 11;
     break;
    }
    $14 = (($buf$sroa$0$0$ph190) + ($5)|0);
    $15 = (($buf$sroa$8$0$ph191) - ($5))|0;
    $16 = ($15|0)==(0);
    if ($16) {
     break L1;
    } else {
     $buf$sroa$0$0$ph190 = $14;$buf$sroa$8$0$ph191 = $15;
    }
   }
   if ((label|0) == 5) {
    __ZN93__LT_collections__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17he1798c51f55475c1E($_4$i$i$i,8240,28);
    ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
    $6 = (___rust_allocate(12,4)|0);
    $7 = ($6|0)==(0|0);
    if ($7) {
     __ZN5alloc3oom3oom17h9c08827c36eab673E();
     // unreachable;
    }
    ;HEAP32[$6>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$6+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
    $8 = (___rust_allocate(12,4)|0);
    $9 = ($8|0)==(0|0);
    if ($9) {
     __ZN5alloc3oom3oom17h9c08827c36eab673E();
     // unreachable;
    }
    HEAP8[$8>>0] = 14;
    $x$i$sroa$4$0$$sroa_raw_idx$i = ((($8)) + 1|0);
    ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
    $x$i$sroa$5$0$$sroa_idx$i = ((($8)) + 4|0);
    HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $6;
    $x$i$sroa$6$0$$sroa_idx$i = ((($8)) + 8|0);
    HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 184;
    $13 = $8;
    HEAP32[$0>>2] = 1;
    $$sroa_idx = ((($0)) + 4|0);
    HEAP32[$$sroa_idx>>2] = 2;
    $$sroa_idx69 = ((($0)) + 8|0);
    HEAP32[$$sroa_idx69>>2] = $13;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 11) {
    __ZN4core5slice22slice_index_order_fail17hba8ec71a2aed226bE($5,$buf$sroa$8$0$ph191);
    // unreachable;
   }
   else if ((label|0) == 14) {
    HEAP32[$0>>2] = 1;
    $$sroa_idx77 = ((($0)) + 4|0);
    HEAP32[$$sroa_idx77>>2] = 0;
    $$sroa_idx78 = ((($0)) + 8|0);
    HEAP32[$$sroa_idx78>>2] = $11;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17ha3b8a98364490850E_242($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hded13da3919e24b6E($2,$4,$1)|0);
 return ($5|0);
}
function __ZN3std3sys3imp9backtrace7tracing3imp5write17hd9382f7c6c99d71aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_23$sroa$0$0$$sroa_idx = 0, $_23$sroa$4$0$$sroa_idx = 0;
 var $_3$sroa$0$0$$sroa_idx3$i = 0, $_38$sroa$4$0$$sroa_idx95 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_7 = 0, $_9 = 0, $brmerge = 0, $cond = 0, $cond$i$i = 0, $cx = 0, $or$cond = 0, $ret$sroa$0$0 = 0, $self$i$sroa$0$0$copyload = 0, $self$i$sroa$4$0$$sroa_idx131 = 0, $self$i$sroa$4$0$copyload = 0, $self$i$sroa$5$0$$sroa_idx133 = 0, $self$i$sroa$5$0$copyload = 0, $switch3$i = 0, $switch6 = 0, $switch7$not = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_7 = sp + 48|0;
 $_9 = sp + 24|0;
 $cx = sp;
 (_pthread_mutex_lock(((15856)|0))|0);
 HEAP32[$_9>>2] = 2880;
 $3 = ((($_9)) + 4|0);
 HEAP32[$3>>2] = 1;
 $_6$sroa$0$0$$sroa_idx$i = ((($_9)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $4 = ((($_9)) + 16|0);
 HEAP32[$4>>2] = 16064;
 $5 = ((($_9)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_viii[$7 & 511]($_7,$1,$_9);
 $self$i$sroa$0$0$copyload = HEAP32[$_7>>2]|0;
 $switch3$i = ($self$i$sroa$0$0$copyload|0)==(1);
 if ($switch3$i) {
  $self$i$sroa$4$0$$sroa_idx131 = ((($_7)) + 4|0);
  $self$i$sroa$4$0$copyload = HEAP32[$self$i$sroa$4$0$$sroa_idx131>>2]|0;
  $self$i$sroa$5$0$$sroa_idx133 = ((($_7)) + 8|0);
  $self$i$sroa$5$0$copyload = HEAP32[$self$i$sroa$5$0$$sroa_idx133>>2]|0;
  HEAP32[$0>>2] = 1;
  $_3$sroa$0$0$$sroa_idx3$i = ((($0)) + 4|0);
  $8 = $_3$sroa$0$0$$sroa_idx3$i;
  $9 = $8;
  HEAP32[$9>>2] = $self$i$sroa$4$0$copyload;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $self$i$sroa$5$0$copyload;
  STACKTOP = sp;return;
 }
 HEAP32[$cx>>2] = 0;
 $12 = ((($cx)) + 4|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($cx)) + 8|0);
 HEAP32[$13>>2] = $2;
 $_23$sroa$0$0$$sroa_idx = ((($cx)) + 12|0);
 HEAP32[$_23$sroa$0$0$$sroa_idx>>2] = 0;
 $_23$sroa$4$0$$sroa_idx = ((($cx)) + 16|0);
 $14 = (__Unwind_Backtrace((331|0),($cx|0))|0);
 $cond = ($14|0)==(0);
 $15 = HEAP32[$_23$sroa$0$0$$sroa_idx>>2]|0;
 $switch6 = ($15|0)==(1);
 $or$cond = $cond & $switch6;
 $16 = $_23$sroa$4$0$$sroa_idx;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $ret$sroa$0$0 = $or$cond&1;
 (_pthread_mutex_unlock(((15856)|0))|0);
 HEAP32[$0>>2] = $ret$sroa$0$0;
 $_38$sroa$4$0$$sroa_idx95 = ((($0)) + 4|0);
 $22 = $_38$sroa$4$0$$sroa_idx95;
 $23 = $22;
 HEAP32[$23>>2] = $18;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = HEAP32[$_23$sroa$0$0$$sroa_idx>>2]|0;
 $switch7$not = ($26|0)!=(1);
 $brmerge = $or$cond | $switch7$not;
 if (!($brmerge)) {
  $27 = HEAP8[$_23$sroa$4$0$$sroa_idx>>0]|0;
  $cond$i$i = ($27<<24>>24)==(2);
  if ($cond$i$i) {
   $28 = ((($cx)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($29)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   FUNCTION_TABLE_vi[$34 & 511]($31);
   $35 = HEAP32[$32>>2]|0;
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $39 = ((($35)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    ___rust_deallocate($31,$37,$40);
   }
   ___rust_deallocate($29,12,4);
  }
 }
 STACKTOP = sp;return;
}
function __ZN3std3sys3imp9backtrace7tracing3imp5write8trace_fn17hf8110a1e5164afc5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $_0$0 = 0, $_0$1 = 0, $_21$i = 0, $_26$i = 0, $_36 = 0, $_38 = 0, $_51 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i89 = 0, $cond$i88 = 0, $e$sroa$0$0$$sroa_idx70 = 0, $e1$sroa$0$0$$sroa_idx43 = 0, $info$i = 0, $ip$0 = 0, $ip$0$v = 0, $ip_before_insn = 0;
 var $or$cond = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$6$0 = 0, $switch$i = 0, $switch8 = 0, $switch9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $info$i = sp + 72|0;
 $_21$i = sp + 64|0;
 $_26$i = sp + 56|0;
 $ip_before_insn = sp + 88|0;
 $_36 = sp + 40|0;
 $_38 = sp + 16|0;
 $_51 = sp;
 HEAP32[$ip_before_insn>>2] = 0;
 $2 = (__Unwind_GetIPInfo(($0|0),($ip_before_insn|0))|0);
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$ip_before_insn>>2]|0;
 $5 = ($4|0)==(0);
 $or$cond = $3 & $5;
 $6 = $or$cond << 31 >> 31;
 $ip$0$v = (($6) + ($2))|0;
 $ip$0 = $ip$0$v;
 (__Unwind_FindEnclosingFunction(($ip$0|0))|0);
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$1>>2] = $8;
 $9 = ($8|0)<(1);
 do {
  if ($9) {
   $_0$1 = 0;
  } else {
   $10 = ($8|0)>(100);
   if ($10) {
    $11 = ((($1)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    HEAP32[$_38>>2] = 2888;
    $15 = ((($_38)) + 4|0);
    HEAP32[$15>>2] = 1;
    $_6$sroa$0$0$$sroa_idx$i = ((($_38)) + 8|0);
    HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
    $16 = ((($_38)) + 16|0);
    HEAP32[$16>>2] = 16064;
    $17 = ((($_38)) + 20|0);
    HEAP32[$17>>2] = 0;
    $18 = ((($14)) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_viii[$19 & 511]($_36,$12,$_38);
    $20 = HEAP32[$_36>>2]|0;
    $switch8 = ($20|0)==(1);
    if ($switch8) {
     $e$sroa$0$0$$sroa_idx70 = ((($_36)) + 4|0);
     $23 = $e$sroa$0$0$$sroa_idx70;
     $24 = $23;
     $25 = HEAP32[$24>>2]|0;
     $26 = (($23) + 4)|0;
     $27 = $26;
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($1)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $cond$i = ($30|0)==(1);
     $31 = ((($1)) + 16|0);
     if ($cond$i) {
      $32 = HEAP8[$31>>0]|0;
      $cond$i$i$i = ($32<<24>>24)==(2);
      if ($cond$i$i$i) {
       $33 = ((($1)) + 20|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ((($34)) + 4|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ((($34)) + 8|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = HEAP32[$38>>2]|0;
       __THREW__ = 0;
       invoke_vi($39|0,($36|0));
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if ($41) {
        $98 = ___cxa_find_matching_catch_2()|0;
        $99 = tempRet0;
        HEAP32[$29>>2] = 1;
        $100 = $31;
        $101 = $100;
        HEAP32[$101>>2] = $25;
        $102 = (($100) + 4)|0;
        $103 = $102;
        HEAP32[$103>>2] = $28;
        $personalityslot$sroa$0$0 = $98;$personalityslot$sroa$6$0 = $99;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
       $42 = HEAP32[$37>>2]|0;
       $43 = ((($42)) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = ($44|0)==(0);
       if (!($45)) {
        $46 = ((($42)) + 8|0);
        $47 = HEAP32[$46>>2]|0;
        ___rust_deallocate($36,$44,$47);
       }
       ___rust_deallocate($34,12,4);
      }
     }
     HEAP32[$29>>2] = 1;
     $48 = $31;
     $49 = $48;
     HEAP32[$49>>2] = $25;
     $50 = (($48) + 4)|0;
     $51 = $50;
     HEAP32[$51>>2] = $28;
    }
    $_0$1 = 9;
    break;
   }
   $21 = ((($1)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $switch$i = ($22|0)==(1);
   if ($switch$i) {
    $_0$1 = 9;
   } else {
    $52 = ((($1)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($1)) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    ;HEAP32[$info$i>>2]=0|0;HEAP32[$info$i+4>>2]=0|0;HEAP32[$info$i+8>>2]=0|0;HEAP32[$info$i+12>>2]=0|0;
    $56 = (_dladdr(($ip$0|0),($info$i|0))|0);
    $57 = ($56|0)==(0);
    do {
     if ($57) {
      HEAP32[$_21$i>>2] = 0;
      __ZN3std10sys_common9backtrace6output17hdb215d9dbd047ad7E($_51,$53,$55,$8,$ip$0,$_21$i);
     } else {
      $58 = ((($info$i)) + 8|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (_strlen($59)|0);
      $61 = ($60|0)==(-1);
      if ($61) {
       __ZN4core5slice20slice_index_len_fail17h94caf57088443fc0E(-1,0);
       // unreachable;
      } else {
       HEAP32[$_26$i>>2] = $59;
       $62 = ((($_26$i)) + 4|0);
       HEAP32[$62>>2] = $60;
       __ZN3std10sys_common9backtrace6output17hdb215d9dbd047ad7E($_51,$53,$55,$8,$ip$0,$_26$i);
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$_51>>2]|0;
    $switch9 = ($63|0)==(1);
    if ($switch9) {
     $e1$sroa$0$0$$sroa_idx43 = ((($_51)) + 4|0);
     $64 = $e1$sroa$0$0$$sroa_idx43;
     $65 = $64;
     $66 = HEAP32[$65>>2]|0;
     $67 = (($64) + 4)|0;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $70 = HEAP32[$21>>2]|0;
     $cond$i88 = ($70|0)==(1);
     $71 = ((($1)) + 16|0);
     if ($cond$i88) {
      $72 = HEAP8[$71>>0]|0;
      $cond$i$i$i89 = ($72<<24>>24)==(2);
      if ($cond$i$i$i89) {
       $73 = ((($1)) + 20|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ((($74)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ((($74)) + 8|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = HEAP32[$78>>2]|0;
       __THREW__ = 0;
       invoke_vi($79|0,($76|0));
       $80 = __THREW__; __THREW__ = 0;
       $81 = $80&1;
       if ($81) {
        $92 = ___cxa_find_matching_catch_2()|0;
        $93 = tempRet0;
        HEAP32[$21>>2] = 1;
        $94 = $71;
        $95 = $94;
        HEAP32[$95>>2] = $66;
        $96 = (($94) + 4)|0;
        $97 = $96;
        HEAP32[$97>>2] = $69;
        $personalityslot$sroa$0$0 = $92;$personalityslot$sroa$6$0 = $93;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
       $82 = HEAP32[$77>>2]|0;
       $83 = ((($82)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($84|0)==(0);
       if (!($85)) {
        $86 = ((($82)) + 8|0);
        $87 = HEAP32[$86>>2]|0;
        ___rust_deallocate($76,$84,$87);
       }
       ___rust_deallocate($74,12,4);
      }
     }
     HEAP32[$21>>2] = 1;
     $88 = $71;
     $89 = $88;
     HEAP32[$89>>2] = $66;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $69;
    }
    $_0$0 = 0;
    STACKTOP = sp;return ($_0$0|0);
   }
  }
 } while(0);
 $_0$0 = $_0$1;
 STACKTOP = sp;return ($_0$0|0);
}
function __ZN3std10sys_common9backtrace6output17hdb215d9dbd047ad7E($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$4931$i = 0, $$cast$i$i$i$i = 0, $$lcssa1261 = 0, $$off$i$i = 0, $$off$i971$i = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert4424$i = 0, $$phi$trans$insert4426$i = 0, $$phi$trans$insert4428$i = 0, $$phi$trans$insert4430$i = 0, $$phi$trans$insert4432$i = 0, $$phi$trans$insert4434$i = 0, $$phi$trans$insert4436$i = 0, $$phi$trans$insert4438$i = 0, $$phi$trans$insert4440$i = 0, $$phi$trans$insert4442$i = 0, $$phi$trans$insert4444$i = 0, $$phi$trans$insert4446$i = 0, $$phi$trans$insert4448$i = 0, $$phi$trans$insert4450$i = 0;
 var $$phi$trans$insert4452$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i1040$ptr$i = 0, $$pre$i1196$i = 0, $$pre$i1222$i = 0, $$pre$i1248$i = 0, $$pre$i1274$i = 0, $$pre$i1308$i = 0, $$pre$i1349$i = 0, $$pre$i1391$i = 0, $$pre$i1425$i = 0, $$pre$i1466$i = 0, $$pre$i1508$i = 0, $$pre$i1542$i = 0, $$pre$i1583$i = 0, $$pre$i1625$i = 0, $$pre$i1659$i = 0, $$pre$i1700$i = 0;
 var $$pre$i1742$i = 0, $$pre$i1776$i = 0, $$pre$i1825$i = 0, $$pre$i1875$i = 0, $$pre$phi$i$i$i$i$iZ2D = 0, $$pre$phi$i$i$i$i845$iZ2D = 0, $$pre$phi$i1430$iZ2D = 0, $$pre$phi$i1471$iZ2D = 0, $$pre$phi$i1513$iZ2D = 0, $$pre$phi$i1547$iZ2D = 0, $$pre$phi$i1588$iZ2D = 0, $$pre$phi$i1630$iZ2D = 0, $$pre$phi$i1664$iZ2D = 0, $$pre$phi$i1705$iZ2D = 0, $$pre$phi$i1747$iZ2D = 0, $$pre$phi$i1781$iZ2D = 0, $$pre$phi$i1830$iZ2D = 0, $$pre$phi$i1880$iZ2D = 0, $$pre$phi$i3040$iZ2D = 0, $$pre4425$i = 0;
 var $$pre4427$i = 0, $$pre4429$i = 0, $$pre4431$i = 0, $$pre4433$i = 0, $$pre4435$i = 0, $$pre4437$i = 0, $$pre4439$i = 0, $$pre4441$i = 0, $$pre4443$i = 0, $$pre4445$i = 0, $$pre4447$i = 0, $$pre4449$i = 0, $$pre4451$i = 0, $$pre4453$i = 0, $$ptr$i = 0, $$sink$i$index = 0, $$sink$i$index2 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i15$i$i$i$i = 0, $_0$0$i15$i$i$i$i$i$i = 0, $_0$0$i15$i$i1062$i = 0, $_0$0$i15$i$i958$i = 0, $_0$0$i22$i$i$i$i = 0, $_0$0$i22$i$i$i$i$i$i = 0, $_0$0$i22$i$i1057$i = 0, $_0$0$i22$i$i953$i = 0, $_0$0$i9$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i = 0, $_0$0$i9$i$i1067$i = 0, $_0$0$i9$i$i963$i = 0, $_107$i = 0, $_11 = 0, $_122$sroa$4$2$ph$i = 0, $_13 = 0;
 var $_131$i = 0, $_163$sroa$5$2$ph$i = 0, $_172$i = 0, $_18 = 0, $_188$i = 0, $_208$i = 0, $_229$i = 0, $_250$i = 0, $_271$i = 0, $_292$i = 0, $_3$sroa$0$0$$sroa_idx3$i = 0, $_3$sroa$0$0$$sroa_idx3$i120 = 0, $_3$sroa$0$0$$sroa_idx3$i129 = 0, $_313$i = 0, $_334$i = 0, $_355$i = 0, $_376$i = 0, $_397$i = 0, $_4$i$i = 0, $_418$i = 0;
 var $_439$i = 0, $_46$sroa$29$0$ph$off0 = 0, $_46$sroa$29$0$ph$off32 = 0, $_460$i = 0, $_481$i = 0, $_502$i = 0, $_523$i = 0, $_54$sroa$5$2$ph$i = 0, $_544$i = 0, $_56 = 0, $_565$i = 0, $_58 = 0, $_584$i = 0, $_597$sroa$0$0$i = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_605$i = 0, $_8$sroa$0$0$$sroa_idx$i = 0, $_8$sroa$4$0$$sroa_idx2$i = 0, $_88$i = 0, $accum$0$lcssa$i$i$i = 0;
 var $accum$010$i$i$i = 0, $addr = 0, $cond$i104 = 0, $first$0$off03866$i = 0, $i$0$lcssa$i = 0, $i$03869$i = 0, $idx = 0, $idx$0$i = 0, $inner$sroa$0$0$i = 0, $inner$sroa$0$13867$i = 0, $inner$sroa$12$0$i = 0, $inner$sroa$12$0$in$i = 0, $inner$sroa$12$13868$i = 0, $iter$sroa$4$09$i$i$i = 0, $not$$i$i$i$i1006$i = 0, $not$$i$i$i$i1139$i = 0, $not$$i$i$i$i1408$i = 0, $not$$i$i$i$i1449$i = 0, $not$$i$i$i$i1483$i = 0, $not$$i$i$i$i1525$i = 0;
 var $not$$i$i$i$i1566$i = 0, $not$$i$i$i$i1600$i = 0, $not$$i$i$i$i1642$i = 0, $not$$i$i$i$i1683$i = 0, $not$$i$i$i$i1717$i = 0, $not$$i$i$i$i1759$i = 0, $not$$i$i1427$i = 0, $not$$i$i1468$i = 0, $not$$i$i1510$i = 0, $not$$i$i1544$i = 0, $not$$i$i1585$i = 0, $not$$i$i1627$i = 0, $not$$i$i1661$i = 0, $not$$i$i1702$i = 0, $not$$i$i1744$i = 0, $not$$i$i1778$i = 0, $not$$i$i1827$i = 0, $not$$i$i1844$i = 0, $not$$i$i1877$i = 0, $not$$i$i984$i = 0;
 var $not$$i$i994$i = 0, $or$cond = 0, $or$cond$i$i1843$i = 0, $or$cond$i$i905$i = 0, $or$cond$i$i983$i = 0, $or$cond$i$i993$i = 0, $or$cond14$i$i$i = 0, $phitmp$i$i$i$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i1055$i = 0, $phitmp$i$i951$i = 0, $phitmp31$i$i$i$i = 0, $phitmp31$i$i$i$i$i$i = 0, $phitmp31$i$i1060$i = 0, $phitmp31$i$i956$i = 0, $phitmp32$i$i$i$i = 0, $phitmp32$i$i$i$i$i$i = 0, $phitmp32$i$i1065$i = 0, $phitmp32$i$i961$i = 0, $rest$sroa$0$03779$i = 0;
 var $rest$sroa$0$1$be$i = 0, $rest$sroa$0$13789$i = 0, $rest$sroa$82$03780$i = 0, $rest$sroa$82$03780$lcssa3930$i = 0, $rest$sroa$82$1$be$i = 0, $rest$sroa$82$13826$i = 0, $rhsc$i$i$i$i = 0, $rhsc$i$i$i847$i = 0, $rhsc3196$i = 0, $self$i$sroa$0$0$copyload = 0, $self$i$sroa$0$0$copyload$i = 0, $self$i$sroa$4$0$$sroa_idx278 = 0, $self$i$sroa$4$0$$sroa_idx2902$i = 0, $self$i$sroa$4$0$copyload = 0, $self$i$sroa$4$0$copyload$i = 0, $self$i$sroa$5$0$$sroa_idx280 = 0, $self$i$sroa$5$0$$sroa_idx2904$i = 0, $self$i$sroa$5$0$copyload = 0, $self$i$sroa$5$0$copyload$i = 0, $self$i1089$sroa$0$0$copyload$i = 0;
 var $self$i1089$sroa$4$0$$sroa_idx2912$i = 0, $self$i1089$sroa$4$0$copyload$i = 0, $self$i1089$sroa$5$0$$sroa_idx2914$i = 0, $self$i1089$sroa$5$0$copyload$i = 0, $self$i1096$sroa$0$0$copyload$i = 0, $self$i1096$sroa$4$0$$sroa_idx2917$i = 0, $self$i1096$sroa$4$0$copyload$i = 0, $self$i1096$sroa$5$0$$sroa_idx2919$i = 0, $self$i1096$sroa$5$0$copyload$i = 0, $self$i1163$sroa$0$0$copyload$i = 0, $self$i1163$sroa$4$0$$sroa_idx2922$i = 0, $self$i1163$sroa$4$0$copyload$i = 0, $self$i1163$sroa$5$0$$sroa_idx2924$i = 0, $self$i1163$sroa$5$0$copyload$i = 0, $self$i1205$sroa$0$0$copyload$i = 0, $self$i1205$sroa$4$0$$sroa_idx2927$i = 0, $self$i1205$sroa$4$0$copyload$i = 0, $self$i1205$sroa$5$0$$sroa_idx2929$i = 0, $self$i1205$sroa$5$0$copyload$i = 0, $self$i1231$sroa$0$0$copyload$i = 0;
 var $self$i1231$sroa$4$0$$sroa_idx2932$i = 0, $self$i1231$sroa$4$0$copyload$i = 0, $self$i1231$sroa$5$0$$sroa_idx2934$i = 0, $self$i1231$sroa$5$0$copyload$i = 0, $self$i1257$sroa$0$0$copyload$i = 0, $self$i1257$sroa$4$0$$sroa_idx2937$i = 0, $self$i1257$sroa$4$0$copyload$i = 0, $self$i1257$sroa$5$0$$sroa_idx2939$i = 0, $self$i1257$sroa$5$0$copyload$i = 0, $self$i1283$sroa$0$0$copyload$i = 0, $self$i1283$sroa$4$0$$sroa_idx2942$i = 0, $self$i1283$sroa$4$0$copyload$i = 0, $self$i1283$sroa$5$0$$sroa_idx2944$i = 0, $self$i1283$sroa$5$0$copyload$i = 0, $self$i1317$sroa$0$0$copyload$i = 0, $self$i1317$sroa$4$0$$sroa_idx2947$i = 0, $self$i1317$sroa$4$0$copyload$i = 0, $self$i1317$sroa$5$0$$sroa_idx2949$i = 0, $self$i1317$sroa$5$0$copyload$i = 0, $self$i1358$sroa$0$0$copyload$i = 0;
 var $self$i1358$sroa$4$0$$sroa_idx2952$i = 0, $self$i1358$sroa$4$0$copyload$i = 0, $self$i1358$sroa$5$0$$sroa_idx2954$i = 0, $self$i1358$sroa$5$0$copyload$i = 0, $self$i1400$sroa$0$0$copyload$i = 0, $self$i1400$sroa$4$0$$sroa_idx2957$i = 0, $self$i1400$sroa$4$0$copyload$i = 0, $self$i1400$sroa$5$0$$sroa_idx2959$i = 0, $self$i1400$sroa$5$0$copyload$i = 0, $self$i1434$sroa$0$0$copyload$i = 0, $self$i1434$sroa$4$0$$sroa_idx2962$i = 0, $self$i1434$sroa$4$0$copyload$i = 0, $self$i1434$sroa$5$0$$sroa_idx2964$i = 0, $self$i1434$sroa$5$0$copyload$i = 0, $self$i1475$sroa$0$0$copyload$i = 0, $self$i1475$sroa$4$0$$sroa_idx2967$i = 0, $self$i1475$sroa$4$0$copyload$i = 0, $self$i1475$sroa$5$0$$sroa_idx2969$i = 0, $self$i1475$sroa$5$0$copyload$i = 0, $self$i1517$sroa$0$0$copyload$i = 0;
 var $self$i1517$sroa$4$0$$sroa_idx2972$i = 0, $self$i1517$sroa$4$0$copyload$i = 0, $self$i1517$sroa$5$0$$sroa_idx2974$i = 0, $self$i1517$sroa$5$0$copyload$i = 0, $self$i1551$sroa$0$0$copyload$i = 0, $self$i1551$sroa$4$0$$sroa_idx2977$i = 0, $self$i1551$sroa$4$0$copyload$i = 0, $self$i1551$sroa$5$0$$sroa_idx2979$i = 0, $self$i1551$sroa$5$0$copyload$i = 0, $self$i1592$sroa$0$0$copyload$i = 0, $self$i1592$sroa$4$0$$sroa_idx2982$i = 0, $self$i1592$sroa$4$0$copyload$i = 0, $self$i1592$sroa$5$0$$sroa_idx2984$i = 0, $self$i1592$sroa$5$0$copyload$i = 0, $self$i1634$sroa$0$0$copyload$i = 0, $self$i1634$sroa$4$0$$sroa_idx2987$i = 0, $self$i1634$sroa$4$0$copyload$i = 0, $self$i1634$sroa$5$0$$sroa_idx2989$i = 0, $self$i1634$sroa$5$0$copyload$i = 0, $self$i1668$sroa$0$0$copyload$i = 0;
 var $self$i1668$sroa$4$0$$sroa_idx2992$i = 0, $self$i1668$sroa$4$0$copyload$i = 0, $self$i1668$sroa$5$0$$sroa_idx2994$i = 0, $self$i1668$sroa$5$0$copyload$i = 0, $self$i1709$sroa$0$0$copyload$i = 0, $self$i1709$sroa$4$0$$sroa_idx2997$i = 0, $self$i1709$sroa$4$0$copyload$i = 0, $self$i1709$sroa$5$0$$sroa_idx2999$i = 0, $self$i1709$sroa$5$0$copyload$i = 0, $self$i1751$sroa$0$0$copyload$i = 0, $self$i1751$sroa$4$0$$sroa_idx3002$i = 0, $self$i1751$sroa$4$0$copyload$i = 0, $self$i1751$sroa$5$0$$sroa_idx3004$i = 0, $self$i1751$sroa$5$0$copyload$i = 0, $self$i1785$sroa$0$0$copyload$i = 0, $self$i1785$sroa$4$0$$sroa_idx3007$i = 0, $self$i1785$sroa$4$0$copyload$i = 0, $self$i1785$sroa$5$0$$sroa_idx3009$i = 0, $self$i1785$sroa$5$0$copyload$i = 0, $self$i1800$sroa$0$0$copyload$i = 0;
 var $self$i1800$sroa$4$0$$sroa_idx3012$i = 0, $self$i1800$sroa$4$0$copyload$i = 0, $self$i1800$sroa$5$0$$sroa_idx3014$i = 0, $self$i1800$sroa$5$0$copyload$i = 0, $self$i1850$sroa$0$0$copyload$i = 0, $self$i1850$sroa$4$0$$sroa_idx3017$i = 0, $self$i1850$sroa$4$0$copyload$i = 0, $self$i1850$sroa$5$0$$sroa_idx3019$i = 0, $self$i1850$sroa$5$0$copyload$i = 0, $self$i921$sroa$0$0$copyload$i = 0, $self$i921$sroa$4$0$$sroa_idx2907$i = 0, $self$i921$sroa$4$0$copyload$i = 0, $self$i921$sroa$5$0$$sroa_idx2909$i = 0, $self$i921$sroa$5$0$copyload$i = 0, $self$i96$sroa$0$0$copyload = 0, $self$i96$sroa$4$0$$sroa_idx283 = 0, $self$i96$sroa$4$0$copyload = 0, $self$i96$sroa$5$0$$sroa_idx285 = 0, $self$i96$sroa$5$0$copyload = 0, $self$sroa$0$0$copyload$i$i$i = 0;
 var $self$sroa$0$0$copyload$i989$i = 0, $self$sroa$5$0$copyload9$i$i$i = 0, $self$sroa$6$0$$sroa_idx7$i$i$i = 0, $self$sroa$6$0$copyload$i$i$i = 0, $self$sroa$720$0$$sroa_idx21$i$i = 0, $self$sroa$720$0$copyload$i$i = 0, $switch1$i$i$i = 0, $switch16tmp = 0, $switch2$i990$i = 0, $switch2tmp$i = 0, $switch3$i = 0, $switch3$i$i = 0, $switch3$i1090$i = 0, $switch3$i1097$i = 0, $switch3$i1164$i = 0, $switch3$i1206$i = 0, $switch3$i1232$i = 0, $switch3$i1258$i = 0, $switch3$i1284$i = 0, $switch3$i1318$i = 0;
 var $switch3$i1359$i = 0, $switch3$i1401$i = 0, $switch3$i1435$i = 0, $switch3$i1476$i = 0, $switch3$i1518$i = 0, $switch3$i1552$i = 0, $switch3$i1593$i = 0, $switch3$i1635$i = 0, $switch3$i1669$i = 0, $switch3$i1710$i = 0, $switch3$i1752$i = 0, $switch3$i1786$i = 0, $switch3$i1801$i = 0, $switch3$i1851$i = 0, $switch3$i922$i = 0, $switch3$i97 = 0, $tmp_ret4 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $_88$i = sp + 504|0;
 $_107$i = sp + 488|0;
 $_131$i = sp + 480|0;
 $_172$i = sp + 464|0;
 $_188$i = sp + 448|0;
 $_208$i = sp + 432|0;
 $_229$i = sp + 416|0;
 $_250$i = sp + 400|0;
 $_271$i = sp + 384|0;
 $_292$i = sp + 368|0;
 $_313$i = sp + 352|0;
 $_334$i = sp + 336|0;
 $_355$i = sp + 320|0;
 $_376$i = sp + 304|0;
 $_397$i = sp + 288|0;
 $_418$i = sp + 272|0;
 $_439$i = sp + 256|0;
 $_460$i = sp + 240|0;
 $_481$i = sp + 224|0;
 $_502$i = sp + 208|0;
 $_523$i = sp + 192|0;
 $_544$i = sp + 176|0;
 $_565$i = sp + 160|0;
 $_584$i = sp + 144|0;
 $_605$i = sp + 128|0;
 $_4$i$i = sp + 112|0;
 $idx = sp + 520|0;
 $addr = sp + 516|0;
 $_11 = sp + 96|0;
 $_13 = sp + 72|0;
 $_18 = sp + 48|0;
 $_56 = sp + 32|0;
 $_58 = sp + 8|0;
 $tmp_ret4 = sp;
 HEAP32[$idx>>2] = $3;
 HEAP32[$addr>>2] = $4;
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $idx;
 $13 = $addr;
 __ZN4core3fmt10ArgumentV110from_usize17h347264f94481e409E($tmp_ret4,2896);
 $14 = ((($tmp_ret4)) + 4|0);
 $15 = HEAP32[$tmp_ret4>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$_18>>2] = $12;
 $17 = ((($_18)) + 4|0);
 HEAP32[$17>>2] = (332);
 $18 = ((($_18)) + 8|0);
 HEAP32[$18>>2] = $13;
 $19 = ((($_18)) + 12|0);
 HEAP32[$19>>2] = (333);
 $20 = ((($_18)) + 16|0);
 HEAP32[$20>>2] = $15;
 $21 = ((($_18)) + 20|0);
 HEAP32[$21>>2] = $16;
 HEAP32[$_13>>2] = 2900;
 $22 = ((($_13)) + 4|0);
 HEAP32[$22>>2] = 3;
 $_8$sroa$0$0$$sroa_idx$i = ((($_13)) + 8|0);
 HEAP32[$_8$sroa$0$0$$sroa_idx$i>>2] = 2924;
 $_8$sroa$4$0$$sroa_idx2$i = ((($_13)) + 12|0);
 HEAP32[$_8$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $23 = ((($_13)) + 16|0);
 HEAP32[$23>>2] = $_18;
 $24 = ((($_13)) + 20|0);
 HEAP32[$24>>2] = 3;
 $25 = ((($2)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viii[$26 & 511]($_11,$1,$_13);
 $self$i$sroa$0$0$copyload = HEAP32[$_11>>2]|0;
 $switch3$i = ($self$i$sroa$0$0$copyload|0)==(1);
 L1: do {
  if ($switch3$i) {
   $self$i$sroa$4$0$$sroa_idx278 = ((($_11)) + 4|0);
   $self$i$sroa$4$0$copyload = HEAP32[$self$i$sroa$4$0$$sroa_idx278>>2]|0;
   $self$i$sroa$5$0$$sroa_idx280 = ((($_11)) + 8|0);
   $self$i$sroa$5$0$copyload = HEAP32[$self$i$sroa$5$0$$sroa_idx280>>2]|0;
   HEAP32[$0>>2] = 1;
   $_3$sroa$0$0$$sroa_idx3$i = ((($0)) + 4|0);
   $27 = $_3$sroa$0$0$$sroa_idx3$i;
   $28 = $27;
   HEAP32[$28>>2] = $self$i$sroa$4$0$copyload;
   $29 = (($27) + 4)|0;
   $30 = $29;
   HEAP32[$30>>2] = $self$i$sroa$5$0$copyload;
  } else {
   $switch2tmp$i = ($8|0)==(0);
   L4: do {
    if ($switch2tmp$i) {
     label = 8;
    } else {
     $31 = $8;
     __ZN4core3str9from_utf817he0e1c9036739d488E($_4$i$i,$31,$11);
     $self$sroa$0$0$copyload$i$i$i = HEAP32[$_4$i$i>>2]|0;
     $switch1$i$i$i = ($self$sroa$0$0$copyload$i$i$i|0)==(0);
     $self$sroa$6$0$$sroa_idx7$i$i$i = ((($_4$i$i)) + 8|0);
     $self$sroa$6$0$copyload$i$i$i = HEAP32[$self$sroa$6$0$$sroa_idx7$i$i$i>>2]|0;
     $32 = ((($_4$i$i)) + 4|0);
     $self$sroa$5$0$copyload9$i$i$i = HEAP32[$32>>2]|0;
     if ($switch1$i$i$i) {
      $33 = $self$sroa$5$0$copyload9$i$i$i;
      $switch16tmp = ($self$sroa$5$0$copyload9$i$i$i|0)==(0);
      if ($switch16tmp) {
       label = 8;
      } else {
       $38 = ($self$sroa$6$0$copyload$i$i$i>>>0)>(4);
       do {
        if ($38) {
         $46 = ((($33)) + 3|0);
         $47 = HEAP8[$46>>0]|0;
         $48 = ($47<<24>>24)>(-65);
         if ($48) {
          $49 = ($33|0)==(8320|0);
          if (!($49)) {
           $50 = (_memcmp(8320,$33,3)|0);
           $51 = ($50|0)==(0);
           if (!($51)) {
            label = 25;
            break;
           }
          }
          $41 = (($self$sroa$6$0$copyload$i$i$i) + -1)|0;
          $42 = ($41|0)==(0);
          if ($42) {
           $$pre$phi$i$i$i$i$iZ2D = $33;
          } else {
           $43 = (($33) + ($41)|0);
           $44 = HEAP8[$43>>0]|0;
           $45 = ($44<<24>>24)>(-65);
           if ($45) {
            $$pre$phi$i$i$i$i$iZ2D = $43;
           } else {
            label = 25;
            break;
           }
          }
          $39 = ($$pre$phi$i$i$i$i$iZ2D|0)==(8319|0);
          if (!($39)) {
           $rhsc$i$i$i$i = HEAP8[$$pre$phi$i$i$i$i$iZ2D>>0]|0;
           $40 = ($rhsc$i$i$i$i<<24>>24)==(69);
           if (!($40)) {
            label = 25;
            break;
           }
          }
          $52 = ($41>>>0)<(3);
          if ($52) {
           __ZN4core3str16slice_error_fail17h8c0c80047367e832E($33,$self$sroa$6$0$copyload$i$i$i,3,$41);
           // unreachable;
          }
          $53 = (($33) + ($41)|0);
          $54 = HEAP8[$53>>0]|0;
          $55 = ($54<<24>>24)>(-65);
          if ($55) {
           $inner$sroa$0$0$i = $46;$inner$sroa$12$0$in$i = $41;
           label = 30;
          } else {
           __ZN4core3str16slice_error_fail17h8c0c80047367e832E($33,$self$sroa$6$0$copyload$i$i$i,3,$41);
           // unreachable;
          }
         } else {
          label = 25;
         }
        } else {
         $56 = ($self$sroa$6$0$copyload$i$i$i|0)==(4);
         if ($56) {
          label = 25;
         } else {
          label = 59;
         }
        }
       } while(0);
       do {
        if ((label|0) == 25) {
         $64 = ((($33)) + 2|0);
         $65 = HEAP8[$64>>0]|0;
         $66 = ($65<<24>>24)>(-65);
         if ($66) {
          $67 = ($33|0)==(8323|0);
          if (!($67)) {
           $68 = (_memcmp(8323,$33,2)|0);
           $69 = ($68|0)==(0);
           if (!($69)) {
            label = 59;
            break;
           }
          }
          $59 = (($self$sroa$6$0$copyload$i$i$i) + -1)|0;
          $60 = ($59|0)==(0);
          if ($60) {
           $$pre$phi$i$i$i$i845$iZ2D = $33;
          } else {
           $61 = (($33) + ($59)|0);
           $62 = HEAP8[$61>>0]|0;
           $63 = ($62<<24>>24)>(-65);
           if ($63) {
            $$pre$phi$i$i$i$i845$iZ2D = $61;
           } else {
            label = 59;
            break;
           }
          }
          $57 = ($$pre$phi$i$i$i$i845$iZ2D|0)==(8319|0);
          if (!($57)) {
           $rhsc$i$i$i847$i = HEAP8[$$pre$phi$i$i$i$i845$iZ2D>>0]|0;
           $58 = ($rhsc$i$i$i847$i<<24>>24)==(69);
           if (!($58)) {
            label = 59;
            break;
           }
          }
          $70 = (($33) + ($59)|0);
          $71 = HEAP8[$70>>0]|0;
          $72 = ($71<<24>>24)>(-65);
          if ($72) {
           $inner$sroa$0$0$i = $64;$inner$sroa$12$0$in$i = $self$sroa$6$0$copyload$i$i$i;
           label = 30;
          } else {
           __ZN4core3str16slice_error_fail17h8c0c80047367e832E($33,$self$sroa$6$0$copyload$i$i$i,2,$59);
           // unreachable;
          }
         } else {
          label = 59;
         }
        }
       } while(0);
       L38: do {
        if ((label|0) == 30) {
         $inner$sroa$12$0$i = (($inner$sroa$12$0$in$i) + -3)|0;
         $73 = (($inner$sroa$0$0$i) + ($inner$sroa$12$0$i)|0);
         $75 = $inner$sroa$0$0$i;
         while(1) {
          $74 = ($75|0)==($73|0);
          if ($74) {
           $120 = $75;
           break;
          } else {
           $79 = $75;$i$03869$i = 0;
          }
          while(1) {
           $78 = ((($79)) + 1|0);
           $77 = HEAP8[$79>>0]|0;
           $80 = ($77<<24>>24)>(-1);
           if ($80) {
            $76 = $77&255;
            $117 = $78;$_54$sroa$5$2$ph$i = $76;
           } else {
            $81 = $77 & 31;
            $82 = $81&255;
            $83 = ($78|0)==($73|0);
            if ($83) {
             $91 = $73;$_0$0$i22$i$i$i$i = 0;
            } else {
             $84 = ((($79)) + 2|0);
             $85 = HEAP8[$78>>0]|0;
             $phitmp$i$i$i$i = $85 & 63;
             $91 = $84;$_0$0$i22$i$i$i$i = $phitmp$i$i$i$i;
            }
            $86 = $82 << 6;
            $87 = $_0$0$i22$i$i$i$i&255;
            $88 = $87 | $86;
            $89 = ($77&255)>(223);
            if ($89) {
             $90 = ($91|0)==($73|0);
             if ($90) {
              $101 = $73;$_0$0$i15$i$i$i$i = 0;
             } else {
              $92 = ((($91)) + 1|0);
              $93 = HEAP8[$91>>0]|0;
              $phitmp31$i$i$i$i = $93 & 63;
              $101 = $92;$_0$0$i15$i$i$i$i = $phitmp31$i$i$i$i;
             }
             $94 = $87 << 6;
             $95 = $_0$0$i15$i$i$i$i&255;
             $96 = $95 | $94;
             $97 = $82 << 12;
             $98 = $96 | $97;
             $99 = ($77&255)>(239);
             if ($99) {
              $100 = ($101|0)==($73|0);
              if ($100) {
               $495 = $101;$_0$0$i9$i$i$i$i = 0;
              } else {
               $102 = ((($101)) + 1|0);
               $103 = HEAP8[$101>>0]|0;
               $phitmp32$i$i$i$i = $103 & 63;
               $495 = $102;$_0$0$i9$i$i$i$i = $phitmp32$i$i$i$i;
              }
              $104 = $82 << 18;
              $105 = $104 & 1835008;
              $106 = $96 << 6;
              $107 = $_0$0$i9$i$i$i$i&255;
              $108 = $106 | $105;
              $109 = $108 | $107;
              $117 = $495;$_54$sroa$5$2$ph$i = $109;
             } else {
              $117 = $101;$_54$sroa$5$2$ph$i = $98;
             }
            } else {
             $117 = $91;$_54$sroa$5$2$ph$i = $88;
            }
           }
           $$off$i$i = (($_54$sroa$5$2$ph$i) + -48)|0;
           $110 = ($$off$i$i>>>0)<(10);
           if (!($110)) {
            $111 = ($_54$sroa$5$2$ph$i>>>0)>(127);
            if (!($111)) {
             $$lcssa1261 = $117;$i$0$lcssa$i = $i$03869$i;
             break;
            }
            $112 = (__ZN11std_unicode6tables16general_category1N17h656ca9f9f8d41e39E($_54$sroa$5$2$ph$i)|0);
            if (!($112)) {
             $$lcssa1261 = $117;$i$0$lcssa$i = $i$03869$i;
             break;
            }
           }
           $113 = ($i$03869$i*10)|0;
           $114 = (($113) + -48)|0;
           $115 = (($114) + ($_54$sroa$5$2$ph$i))|0;
           $116 = ($117|0)==($73|0);
           if ($116) {
            $$lcssa1261 = $73;$i$0$lcssa$i = $115;
            break;
           } else {
            $79 = $117;$i$03869$i = $115;
           }
          }
          $118 = ($i$0$lcssa$i|0)==(0);
          if ($118) {
           $120 = $$lcssa1261;
           break;
          }
          $121 = (($i$0$lcssa$i) + -1)|0;
          $122 = ($121|0)==(0);
          L65: do {
           if ($122) {
            $496 = $$lcssa1261;$accum$0$lcssa$i$i$i = 0;
           } else {
            $125 = $$lcssa1261;$accum$010$i$i$i = 0;$iter$sroa$4$09$i$i$i = $121;
            while(1) {
             $123 = (($iter$sroa$4$09$i$i$i) + -1)|0;
             $124 = ($125|0)==($73|0);
             if ($124) {
              $496 = $73;$accum$0$lcssa$i$i$i = $accum$010$i$i$i;
              break L65;
             }
             $126 = ((($125)) + 1|0);
             $127 = HEAP8[$125>>0]|0;
             $128 = ($127<<24>>24)>(-1);
             if ($128) {
              $497 = $126;
             } else {
              $129 = ($126|0)==($73|0);
              if ($129) {
               $497 = $73;
              } else {
               $130 = ((($125)) + 2|0);
               $131 = ($127&255)<(224);
               $132 = ($130|0)==($73|0);
               $or$cond14$i$i$i = $132 | $131;
               if ($or$cond14$i$i$i) {
                $497 = $130;
               } else {
                $133 = ((($125)) + 3|0);
                $134 = ($127&255)<(240);
                $135 = ($133|0)==($73|0);
                $or$cond$i$i905$i = $135 | $134;
                $136 = ((($125)) + 4|0);
                $$4931$i = $or$cond$i$i905$i ? $133 : $136;
                $497 = $$4931$i;
               }
              }
             }
             $137 = (($accum$010$i$i$i) + 1)|0;
             $138 = ($123|0)==(0);
             if ($138) {
              $496 = $497;$accum$0$lcssa$i$i$i = $137;
              break;
             } else {
              $125 = $497;$accum$010$i$i$i = $137;$iter$sroa$4$09$i$i$i = $123;
             }
            }
           }
          } while(0);
          $139 = ($accum$0$lcssa$i$i$i|0)==($121|0);
          if ($139) {
           $75 = $496;
          } else {
           label = 59;
           break L38;
          }
         }
         $119 = ($120|0)==($73|0);
         if ($119) {
          $140 = ($inner$sroa$12$0$i|0)==(0);
          if ($140) {
           break L4;
          }
          $141 = ((($2)) + 20|0);
          $self$sroa$720$0$$sroa_idx21$i$i = ((($_131$i)) + 4|0);
          $first$0$off03866$i = 1;$inner$sroa$0$13867$i = $inner$sroa$0$0$i;$inner$sroa$12$13868$i = $inner$sroa$12$0$i;
          L78: while(1) {
           if (!($first$0$off03866$i)) {
            $144 = HEAP32[$141>>2]|0;
            FUNCTION_TABLE_viiii[$144 & 511]($_107$i,$1,8325,2);
            $self$i921$sroa$0$0$copyload$i = HEAP32[$_107$i>>2]|0;
            $switch3$i922$i = ($self$i921$sroa$0$0$copyload$i|0)==(1);
            if ($switch3$i922$i) {
             label = 64;
             break;
            }
           }
           $145 = (($inner$sroa$0$13867$i) + ($inner$sroa$12$13868$i)|0);
           $$pre = HEAP8[$inner$sroa$0$13867$i>>0]|0;
           $147 = $$pre;$161 = $145;$rest$sroa$0$03779$i = $inner$sroa$0$13867$i;$rest$sroa$82$03780$i = $inner$sroa$12$13868$i;
           while(1) {
            $148 = ((($rest$sroa$0$03779$i)) + 1|0);
            $149 = ($147<<24>>24)>(-1);
            if ($149) {
             $146 = $147&255;
             $_122$sroa$4$2$ph$i = $146;
            } else {
             $150 = $147 & 31;
             $151 = $150&255;
             $152 = ($rest$sroa$82$03780$i|0)==(1);
             if ($152) {
              $160 = $161;$_0$0$i22$i$i953$i = 0;
             } else {
              $153 = ((($rest$sroa$0$03779$i)) + 2|0);
              $154 = HEAP8[$148>>0]|0;
              $phitmp$i$i951$i = $154 & 63;
              $160 = $153;$_0$0$i22$i$i953$i = $phitmp$i$i951$i;
             }
             $155 = $151 << 6;
             $156 = $_0$0$i22$i$i953$i&255;
             $157 = $156 | $155;
             $158 = ($147&255)>(223);
             if ($158) {
              $159 = ($160|0)==($161|0);
              if ($159) {
               $171 = $161;$_0$0$i15$i$i958$i = 0;
              } else {
               $162 = ((($160)) + 1|0);
               $163 = HEAP8[$160>>0]|0;
               $phitmp31$i$i956$i = $163 & 63;
               $171 = $162;$_0$0$i15$i$i958$i = $phitmp31$i$i956$i;
              }
              $164 = $156 << 6;
              $165 = $_0$0$i15$i$i958$i&255;
              $166 = $165 | $164;
              $167 = $151 << 12;
              $168 = $166 | $167;
              $169 = ($147&255)>(239);
              if ($169) {
               $170 = ($171|0)==($161|0);
               if ($170) {
                $_0$0$i9$i$i963$i = 0;
               } else {
                $172 = HEAP8[$171>>0]|0;
                $phitmp32$i$i961$i = $172 & 63;
                $_0$0$i9$i$i963$i = $phitmp32$i$i961$i;
               }
               $173 = $151 << 18;
               $174 = $173 & 1835008;
               $175 = $166 << 6;
               $176 = $_0$0$i9$i$i963$i&255;
               $177 = $175 | $174;
               $178 = $177 | $176;
               $_122$sroa$4$2$ph$i = $178;
              } else {
               $_122$sroa$4$2$ph$i = $168;
              }
             } else {
              $_122$sroa$4$2$ph$i = $157;
             }
            }
            $$off$i971$i = (($_122$sroa$4$2$ph$i) + -48)|0;
            $179 = ($$off$i971$i>>>0)<(10);
            if (!($179)) {
             $180 = ($_122$sroa$4$2$ph$i>>>0)>(127);
             if (!($180)) {
              break;
             }
             $181 = (__ZN11std_unicode6tables16general_category1N17h656ca9f9f8d41e39E($_122$sroa$4$2$ph$i)|0);
             if (!($181)) {
              break;
             }
            }
            switch ($rest$sroa$82$03780$i|0) {
            case 1:  {
             label = 78;
             break L78;
             break;
            }
            case 0:  {
             $rest$sroa$82$03780$lcssa3930$i = 0;
             label = 100;
             break L78;
             break;
            }
            default: {
            }
            }
            $204 = HEAP8[$148>>0]|0;
            $205 = ($204<<24>>24)>(-65);
            if (!($205)) {
             $rest$sroa$82$03780$lcssa3930$i = $rest$sroa$82$03780$i;
             label = 100;
             break L78;
            }
            $206 = (($rest$sroa$82$03780$i) + -1)|0;
            $207 = (($148) + ($206)|0);
            $208 = ($206|0)==(0);
            if ($208) {
             label = 78;
             break L78;
            } else {
             $147 = $204;$161 = $207;$rest$sroa$0$03779$i = $148;$rest$sroa$82$03780$i = $206;
            }
           }
           $182 = (($inner$sroa$12$13868$i) - ($rest$sroa$82$03780$i))|0;
           $183 = ($182|0)==(0);
           $184 = ($rest$sroa$82$03780$i|0)==(0);
           $or$cond$i$i983$i = $184 | $183;
           if (!($or$cond$i$i983$i)) {
            $not$$i$i984$i = ($inner$sroa$12$13868$i>>>0)>($182>>>0);
            if (!($not$$i$i984$i)) {
             label = 85;
             break;
            }
            $185 = (($inner$sroa$0$13867$i) + ($182)|0);
            $186 = HEAP8[$185>>0]|0;
            $187 = ($186<<24>>24)>(-65);
            if (!($187)) {
             label = 85;
             break;
            }
           }
           __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17ha76c0deb91486095E($_131$i,$inner$sroa$0$13867$i,$182);
           $self$sroa$0$0$copyload$i989$i = HEAP16[$_131$i>>1]|0;
           $188 = $self$sroa$0$0$copyload$i989$i&255;
           $switch2$i990$i = ($188<<24>>24)==(0);
           if (!($switch2$i990$i)) {
            label = 87;
            break;
           }
           $self$sroa$720$0$copyload$i$i = HEAP32[$self$sroa$720$0$$sroa_idx21$i$i>>2]|0;
           $191 = ($self$sroa$720$0$copyload$i$i|0)==(0);
           $192 = ($rest$sroa$82$03780$i|0)==($self$sroa$720$0$copyload$i$i|0);
           $or$cond$i$i993$i = $191 | $192;
           if ($or$cond$i$i993$i) {
            $$pre$i$i = (($rest$sroa$0$03779$i) + ($self$sroa$720$0$copyload$i$i)|0);
            $$pre$phi$i3040$iZ2D = $$pre$i$i;
           } else {
            $not$$i$i994$i = ($rest$sroa$82$03780$i>>>0)>($self$sroa$720$0$copyload$i$i>>>0);
            if (!($not$$i$i994$i)) {
             label = 92;
             break;
            }
            $193 = (($rest$sroa$0$03779$i) + ($self$sroa$720$0$copyload$i$i)|0);
            $194 = HEAP8[$193>>0]|0;
            $195 = ($194<<24>>24)>(-65);
            if ($195) {
             $$pre$phi$i3040$iZ2D = $193;
            } else {
             label = 92;
             break;
            }
           }
           $196 = (($rest$sroa$82$03780$i) - ($self$sroa$720$0$copyload$i$i))|0;
           $197 = ($self$sroa$720$0$copyload$i$i|0)==(2);
           do {
            if ($197) {
             label = 96;
            } else {
             $not$$i$i$i$i1006$i = ($self$sroa$720$0$copyload$i$i>>>0)>(2);
             if ($not$$i$i$i$i1006$i) {
              $198 = ((($rest$sroa$0$03779$i)) + 2|0);
              $199 = HEAP8[$198>>0]|0;
              $200 = ($199<<24>>24)>(-65);
              if ($200) {
               label = 96;
               break;
              } else {
               $rest$sroa$0$13789$i = $rest$sroa$0$03779$i;$rest$sroa$82$13826$i = $self$sroa$720$0$copyload$i$i;
               label = 106;
               break;
              }
             } else {
              if ($191) {
               break;
              } else {
               $rest$sroa$0$13789$i = $rest$sroa$0$03779$i;$rest$sroa$82$13826$i = 1;
               label = 106;
               break;
              }
             }
            }
           } while(0);
           do {
            if ((label|0) == 96) {
             label = 0;
             $201 = ($rest$sroa$0$03779$i|0)==(8327|0);
             if (!($201)) {
              $202 = (_memcmp(8327,$rest$sroa$0$03779$i,2)|0);
              $203 = ($202|0)==(0);
              if (!($203)) {
               $rest$sroa$0$13789$i = $rest$sroa$0$03779$i;$rest$sroa$82$13826$i = $self$sroa$720$0$copyload$i$i;
               label = 106;
               break;
              }
             }
             $209 = HEAP8[$148>>0]|0;
             $210 = ($209<<24>>24)>(-65);
             if (!($210)) {
              label = 103;
              break L78;
             }
             $211 = (($self$sroa$720$0$copyload$i$i) + -1)|0;
             $rest$sroa$0$13789$i = $148;$rest$sroa$82$13826$i = $211;
             label = 106;
            }
           } while(0);
           L129: do {
            if ((label|0) == 106) {
             L130: while(1) {
              label = 0;
              $212 = ($rest$sroa$82$13826$i|0)==(1);
              if ($212) {
               label = 108;
              } else {
               $213 = ((($rest$sroa$0$13789$i)) + 1|0);
               $214 = HEAP8[$213>>0]|0;
               $215 = ($214<<24>>24)>(-65);
               if ($215) {
                label = 108;
               } else {
                label = 147;
               }
              }
              L134: do {
               if ((label|0) == 108) {
                label = 0;
                $216 = ($rest$sroa$0$13789$i|0)==(8329|0);
                do {
                 if (!($216)) {
                  $rhsc3196$i = HEAP8[$rest$sroa$0$13789$i>>0]|0;
                  $217 = ($rhsc3196$i<<24>>24)==(46);
                  if ($217) {
                   break;
                  }
                  if (!($212)) {
                   $$phi$trans$insert$i = ((($rest$sroa$0$13789$i)) + 1|0);
                   $$pre$i = HEAP8[$$phi$trans$insert$i>>0]|0;
                   $253 = ($$pre$i<<24>>24)>(-65);
                   if (!($253)) {
                    label = 147;
                    break L134;
                   }
                  }
                  $254 = ($rest$sroa$0$13789$i|0)==(8330|0);
                  $255 = ($rhsc3196$i<<24>>24)==(36);
                  $or$cond = $254 | $255;
                  if (!($or$cond)) {
                   label = 147;
                   break L134;
                  }
                  $264 = ($rest$sroa$82$13826$i|0)==(4);
                  do {
                   if ($264) {
                    label = 145;
                   } else {
                    $not$$i$i$i$i1139$i = ($rest$sroa$82$13826$i>>>0)>(4);
                    if ($not$$i$i$i$i1139$i) {
                     $265 = ((($rest$sroa$0$13789$i)) + 4|0);
                     $266 = HEAP8[$265>>0]|0;
                     $267 = ($266<<24>>24)>(-65);
                     if ($267) {
                      label = 145;
                      break;
                     } else {
                      label = 223;
                      break;
                     }
                    } else {
                     $364 = ($rest$sroa$82$13826$i|0)==(3);
                     if ($364) {
                      $502 = 1;
                      label = 224;
                      break;
                     } else {
                      break L130;
                     }
                    }
                   }
                  } while(0);
                  L148: do {
                   if ((label|0) == 145) {
                    label = 0;
                    $268 = ($rest$sroa$0$13789$i|0)==(8331|0);
                    do {
                     if (!($268)) {
                      $269 = (_memcmp(8331,$rest$sroa$0$13789$i,4)|0);
                      $270 = ($269|0)==(0);
                      if ($270) {
                       break;
                      }
                      if (!($264)) {
                       $$phi$trans$insert4424$i = ((($rest$sroa$0$13789$i)) + 4|0);
                       $$pre4425$i = HEAP8[$$phi$trans$insert4424$i>>0]|0;
                       $316 = ($$pre4425$i<<24>>24)>(-65);
                       if (!($316)) {
                        label = 223;
                        break L148;
                       }
                      }
                      $317 = ($rest$sroa$0$13789$i|0)==(8336|0);
                      do {
                       if (!($317)) {
                        $318 = (_memcmp(8336,$rest$sroa$0$13789$i,4)|0);
                        $319 = ($318|0)==(0);
                        if ($319) {
                         break;
                        }
                        if (!($264)) {
                         $$phi$trans$insert4426$i = ((($rest$sroa$0$13789$i)) + 4|0);
                         $$pre4427$i = HEAP8[$$phi$trans$insert4426$i>>0]|0;
                         $324 = ($$pre4427$i<<24>>24)>(-65);
                         if (!($324)) {
                          label = 223;
                          break L148;
                         }
                        }
                        $325 = ($rest$sroa$0$13789$i|0)==(8341|0);
                        do {
                         if (!($325)) {
                          $326 = (_memcmp(8341,$rest$sroa$0$13789$i,4)|0);
                          $327 = ($326|0)==(0);
                          if ($327) {
                           break;
                          }
                          if (!($264)) {
                           $$phi$trans$insert4428$i = ((($rest$sroa$0$13789$i)) + 4|0);
                           $$pre4429$i = HEAP8[$$phi$trans$insert4428$i>>0]|0;
                           $332 = ($$pre4429$i<<24>>24)>(-65);
                           if (!($332)) {
                            label = 223;
                            break L148;
                           }
                          }
                          $333 = ($rest$sroa$0$13789$i|0)==(8346|0);
                          do {
                           if (!($333)) {
                            $334 = (_memcmp(8346,$rest$sroa$0$13789$i,4)|0);
                            $335 = ($334|0)==(0);
                            if ($335) {
                             break;
                            }
                            if (!($264)) {
                             $$phi$trans$insert4430$i = ((($rest$sroa$0$13789$i)) + 4|0);
                             $$pre4431$i = HEAP8[$$phi$trans$insert4430$i>>0]|0;
                             $340 = ($$pre4431$i<<24>>24)>(-65);
                             if (!($340)) {
                              label = 223;
                              break L148;
                             }
                            }
                            $341 = ($rest$sroa$0$13789$i|0)==(8351|0);
                            do {
                             if (!($341)) {
                              $342 = (_memcmp(8351,$rest$sroa$0$13789$i,4)|0);
                              $343 = ($342|0)==(0);
                              if ($343) {
                               break;
                              }
                              if (!($264)) {
                               $$phi$trans$insert4432$i = ((($rest$sroa$0$13789$i)) + 4|0);
                               $$pre4433$i = HEAP8[$$phi$trans$insert4432$i>>0]|0;
                               $348 = ($$pre4433$i<<24>>24)>(-65);
                               if (!($348)) {
                                label = 223;
                                break L148;
                               }
                              }
                              $349 = ($rest$sroa$0$13789$i|0)==(8356|0);
                              do {
                               if (!($349)) {
                                $350 = (_memcmp(8356,$rest$sroa$0$13789$i,4)|0);
                                $351 = ($350|0)==(0);
                                if ($351) {
                                 break;
                                }
                                if (!($264)) {
                                 $$phi$trans$insert4434$i = ((($rest$sroa$0$13789$i)) + 4|0);
                                 $$pre4435$i = HEAP8[$$phi$trans$insert4434$i>>0]|0;
                                 $356 = ($$pre4435$i<<24>>24)>(-65);
                                 if (!($356)) {
                                  label = 223;
                                  break L148;
                                 }
                                }
                                $357 = ($rest$sroa$0$13789$i|0)==(8361|0);
                                if (!($357)) {
                                 $358 = (_memcmp(8361,$rest$sroa$0$13789$i,4)|0);
                                 $359 = ($358|0)==(0);
                                 if (!($359)) {
                                  label = 223;
                                  break L148;
                                 }
                                }
                                $363 = HEAP32[$141>>2]|0;
                                FUNCTION_TABLE_viiii[$363 & 511]($_334$i,$1,8365,1);
                                $self$i1358$sroa$0$0$copyload$i = HEAP32[$_334$i>>2]|0;
                                $switch3$i1359$i = ($self$i1358$sroa$0$0$copyload$i|0)==(1);
                                if ($switch3$i1359$i) {
                                 label = 226;
                                 break L78;
                                }
                                $$pre$i1391$i = ((($rest$sroa$0$13789$i)) + 4|0);
                                if (!($264)) {
                                 $371 = HEAP8[$$pre$i1391$i>>0]|0;
                                 $372 = ($371<<24>>24)>(-65);
                                 if (!($372)) {
                                  label = 229;
                                  break L78;
                                 }
                                }
                                $373 = (($rest$sroa$82$13826$i) + -4)|0;
                                $rest$sroa$0$1$be$i = $$pre$i1391$i;$rest$sroa$82$1$be$i = $373;
                                break L134;
                               }
                              } while(0);
                              $355 = HEAP32[$141>>2]|0;
                              FUNCTION_TABLE_viiii[$355 & 511]($_313$i,$1,8360,1);
                              $self$i1317$sroa$0$0$copyload$i = HEAP32[$_313$i>>2]|0;
                              $switch3$i1318$i = ($self$i1317$sroa$0$0$copyload$i|0)==(1);
                              if ($switch3$i1318$i) {
                               label = 216;
                               break L78;
                              }
                              $$pre$i1349$i = ((($rest$sroa$0$13789$i)) + 4|0);
                              if (!($264)) {
                               $360 = HEAP8[$$pre$i1349$i>>0]|0;
                               $361 = ($360<<24>>24)>(-65);
                               if (!($361)) {
                                label = 219;
                                break L78;
                               }
                              }
                              $362 = (($rest$sroa$82$13826$i) + -4)|0;
                              $rest$sroa$0$1$be$i = $$pre$i1349$i;$rest$sroa$82$1$be$i = $362;
                              break L134;
                             }
                            } while(0);
                            $347 = HEAP32[$141>>2]|0;
                            FUNCTION_TABLE_viiii[$347 & 511]($_292$i,$1,8355,1);
                            $self$i1283$sroa$0$0$copyload$i = HEAP32[$_292$i>>2]|0;
                            $switch3$i1284$i = ($self$i1283$sroa$0$0$copyload$i|0)==(1);
                            if ($switch3$i1284$i) {
                             label = 206;
                             break L78;
                            }
                            $$pre$i1308$i = ((($rest$sroa$0$13789$i)) + 4|0);
                            if (!($264)) {
                             $352 = HEAP8[$$pre$i1308$i>>0]|0;
                             $353 = ($352<<24>>24)>(-65);
                             if (!($353)) {
                              label = 209;
                              break L78;
                             }
                            }
                            $354 = (($rest$sroa$82$13826$i) + -4)|0;
                            $rest$sroa$0$1$be$i = $$pre$i1308$i;$rest$sroa$82$1$be$i = $354;
                            break L134;
                           }
                          } while(0);
                          $339 = HEAP32[$141>>2]|0;
                          FUNCTION_TABLE_viiii[$339 & 511]($_271$i,$1,8350,1);
                          $self$i1257$sroa$0$0$copyload$i = HEAP32[$_271$i>>2]|0;
                          $switch3$i1258$i = ($self$i1257$sroa$0$0$copyload$i|0)==(1);
                          if ($switch3$i1258$i) {
                           label = 196;
                           break L78;
                          }
                          $$pre$i1274$i = ((($rest$sroa$0$13789$i)) + 4|0);
                          if (!($264)) {
                           $344 = HEAP8[$$pre$i1274$i>>0]|0;
                           $345 = ($344<<24>>24)>(-65);
                           if (!($345)) {
                            label = 199;
                            break L78;
                           }
                          }
                          $346 = (($rest$sroa$82$13826$i) + -4)|0;
                          $rest$sroa$0$1$be$i = $$pre$i1274$i;$rest$sroa$82$1$be$i = $346;
                          break L134;
                         }
                        } while(0);
                        $331 = HEAP32[$141>>2]|0;
                        FUNCTION_TABLE_viiii[$331 & 511]($_250$i,$1,8345,1);
                        $self$i1231$sroa$0$0$copyload$i = HEAP32[$_250$i>>2]|0;
                        $switch3$i1232$i = ($self$i1231$sroa$0$0$copyload$i|0)==(1);
                        if ($switch3$i1232$i) {
                         label = 186;
                         break L78;
                        }
                        $$pre$i1248$i = ((($rest$sroa$0$13789$i)) + 4|0);
                        if (!($264)) {
                         $336 = HEAP8[$$pre$i1248$i>>0]|0;
                         $337 = ($336<<24>>24)>(-65);
                         if (!($337)) {
                          label = 189;
                          break L78;
                         }
                        }
                        $338 = (($rest$sroa$82$13826$i) + -4)|0;
                        $rest$sroa$0$1$be$i = $$pre$i1248$i;$rest$sroa$82$1$be$i = $338;
                        break L134;
                       }
                      } while(0);
                      $323 = HEAP32[$141>>2]|0;
                      FUNCTION_TABLE_viiii[$323 & 511]($_229$i,$1,8340,1);
                      $self$i1205$sroa$0$0$copyload$i = HEAP32[$_229$i>>2]|0;
                      $switch3$i1206$i = ($self$i1205$sroa$0$0$copyload$i|0)==(1);
                      if ($switch3$i1206$i) {
                       label = 176;
                       break L78;
                      }
                      $$pre$i1222$i = ((($rest$sroa$0$13789$i)) + 4|0);
                      if (!($264)) {
                       $328 = HEAP8[$$pre$i1222$i>>0]|0;
                       $329 = ($328<<24>>24)>(-65);
                       if (!($329)) {
                        label = 179;
                        break L78;
                       }
                      }
                      $330 = (($rest$sroa$82$13826$i) + -4)|0;
                      $rest$sroa$0$1$be$i = $$pre$i1222$i;$rest$sroa$82$1$be$i = $330;
                      break L134;
                     }
                    } while(0);
                    $315 = HEAP32[$141>>2]|0;
                    FUNCTION_TABLE_viiii[$315 & 511]($_208$i,$1,8335,1);
                    $self$i1163$sroa$0$0$copyload$i = HEAP32[$_208$i>>2]|0;
                    $switch3$i1164$i = ($self$i1163$sroa$0$0$copyload$i|0)==(1);
                    if ($switch3$i1164$i) {
                     label = 166;
                     break L78;
                    }
                    $$pre$i1196$i = ((($rest$sroa$0$13789$i)) + 4|0);
                    if (!($264)) {
                     $320 = HEAP8[$$pre$i1196$i>>0]|0;
                     $321 = ($320<<24>>24)>(-65);
                     if (!($321)) {
                      label = 169;
                      break L78;
                     }
                    }
                    $322 = (($rest$sroa$82$13826$i) + -4)|0;
                    $rest$sroa$0$1$be$i = $$pre$i1196$i;$rest$sroa$82$1$be$i = $322;
                    break L134;
                   }
                  } while(0);
                  if ((label|0) == 223) {
                   label = 0;
                   $365 = ((($rest$sroa$0$13789$i)) + 3|0);
                   $366 = HEAP8[$365>>0]|0;
                   $367 = ($366<<24>>24)>(-65);
                   if ($367) {
                    $502 = 0;
                    label = 224;
                   }
                  }
                  do {
                   if ((label|0) == 224) {
                    label = 0;
                    $368 = ($rest$sroa$0$13789$i|0)==(8366|0);
                    if (!($368)) {
                     $369 = (_memcmp(8366,$rest$sroa$0$13789$i,3)|0);
                     $370 = ($369|0)==(0);
                     if (!($370)) {
                      break;
                     }
                    }
                    $374 = HEAP32[$141>>2]|0;
                    FUNCTION_TABLE_viiii[$374 & 511]($_355$i,$1,8369,1);
                    $self$i1400$sroa$0$0$copyload$i = HEAP32[$_355$i>>2]|0;
                    $switch3$i1401$i = ($self$i1400$sroa$0$0$copyload$i|0)==(1);
                    if ($switch3$i1401$i) {
                     label = 237;
                     break L78;
                    }
                    if ($502) {
                     $$pre$i1425$i = ((($rest$sroa$0$13789$i)) + 3|0);
                     $$pre$phi$i1430$iZ2D = $$pre$i1425$i;
                    } else {
                     $not$$i$i1427$i = ($rest$sroa$82$13826$i>>>0)>(3);
                     if (!($not$$i$i1427$i)) {
                      label = 242;
                      break L78;
                     }
                     $382 = ((($rest$sroa$0$13789$i)) + 3|0);
                     $383 = HEAP8[$382>>0]|0;
                     $384 = ($383<<24>>24)>(-65);
                     if ($384) {
                      $$pre$phi$i1430$iZ2D = $382;
                     } else {
                      label = 242;
                      break L78;
                     }
                    }
                    $385 = (($rest$sroa$82$13826$i) + -3)|0;
                    $rest$sroa$0$1$be$i = $$pre$phi$i1430$iZ2D;$rest$sroa$82$1$be$i = $385;
                    break L134;
                   }
                  } while(0);
                  $375 = ($rest$sroa$82$13826$i|0)==(5);
                  if ($375) {
                   $503 = 1;
                  } else {
                   $not$$i$i$i$i1408$i = ($rest$sroa$82$13826$i>>>0)>(5);
                   if (!($not$$i$i$i$i1408$i)) {
                    break L130;
                   }
                   $376 = ((($rest$sroa$0$13789$i)) + 5|0);
                   $377 = HEAP8[$376>>0]|0;
                   $378 = ($377<<24>>24)>(-65);
                   if ($378) {
                    $503 = 0;
                   } else {
                    break L130;
                   }
                  }
                  $379 = ($rest$sroa$0$13789$i|0)==(8370|0);
                  do {
                   if (!($379)) {
                    $380 = (_memcmp(8370,$rest$sroa$0$13789$i,5)|0);
                    $381 = ($380|0)==(0);
                    if ($381) {
                     break;
                    }
                    if ($503) {
                     $504 = 1;
                    } else {
                     $not$$i$i$i$i1449$i = ($rest$sroa$82$13826$i>>>0)>(5);
                     if (!($not$$i$i$i$i1449$i)) {
                      break L130;
                     }
                     $$phi$trans$insert4436$i = ((($rest$sroa$0$13789$i)) + 5|0);
                     $$pre4437$i = HEAP8[$$phi$trans$insert4436$i>>0]|0;
                     $387 = ($$pre4437$i<<24>>24)>(-65);
                     if ($387) {
                      $504 = 0;
                     } else {
                      break L130;
                     }
                    }
                    $388 = ($rest$sroa$0$13789$i|0)==(8376|0);
                    do {
                     if (!($388)) {
                      $389 = (_memcmp(8376,$rest$sroa$0$13789$i,5)|0);
                      $390 = ($389|0)==(0);
                      if ($390) {
                       break;
                      }
                      if ($504) {
                       $505 = 1;
                      } else {
                       $not$$i$i$i$i1483$i = ($rest$sroa$82$13826$i>>>0)>(5);
                       if (!($not$$i$i$i$i1483$i)) {
                        break L130;
                       }
                       $$phi$trans$insert4438$i = ((($rest$sroa$0$13789$i)) + 5|0);
                       $$pre4439$i = HEAP8[$$phi$trans$insert4438$i>>0]|0;
                       $396 = ($$pre4439$i<<24>>24)>(-65);
                       if ($396) {
                        $505 = 0;
                       } else {
                        break L130;
                       }
                      }
                      $397 = ($rest$sroa$0$13789$i|0)==(8382|0);
                      do {
                       if (!($397)) {
                        $398 = (_memcmp(8382,$rest$sroa$0$13789$i,5)|0);
                        $399 = ($398|0)==(0);
                        if ($399) {
                         break;
                        }
                        if ($505) {
                         $506 = 1;
                        } else {
                         $not$$i$i$i$i1525$i = ($rest$sroa$82$13826$i>>>0)>(5);
                         if (!($not$$i$i$i$i1525$i)) {
                          break L130;
                         }
                         $$phi$trans$insert4440$i = ((($rest$sroa$0$13789$i)) + 5|0);
                         $$pre4441$i = HEAP8[$$phi$trans$insert4440$i>>0]|0;
                         $405 = ($$pre4441$i<<24>>24)>(-65);
                         if ($405) {
                          $506 = 0;
                         } else {
                          break L130;
                         }
                        }
                        $406 = ($rest$sroa$0$13789$i|0)==(8388|0);
                        do {
                         if (!($406)) {
                          $407 = (_memcmp(8388,$rest$sroa$0$13789$i,5)|0);
                          $408 = ($407|0)==(0);
                          if ($408) {
                           break;
                          }
                          if ($506) {
                           $507 = 1;
                          } else {
                           $not$$i$i$i$i1566$i = ($rest$sroa$82$13826$i>>>0)>(5);
                           if (!($not$$i$i$i$i1566$i)) {
                            break L130;
                           }
                           $$phi$trans$insert4442$i = ((($rest$sroa$0$13789$i)) + 5|0);
                           $$pre4443$i = HEAP8[$$phi$trans$insert4442$i>>0]|0;
                           $414 = ($$pre4443$i<<24>>24)>(-65);
                           if ($414) {
                            $507 = 0;
                           } else {
                            break L130;
                           }
                          }
                          $415 = ($rest$sroa$0$13789$i|0)==(8394|0);
                          do {
                           if (!($415)) {
                            $416 = (_memcmp(8394,$rest$sroa$0$13789$i,5)|0);
                            $417 = ($416|0)==(0);
                            if ($417) {
                             break;
                            }
                            if ($507) {
                             $508 = 1;
                            } else {
                             $not$$i$i$i$i1600$i = ($rest$sroa$82$13826$i>>>0)>(5);
                             if (!($not$$i$i$i$i1600$i)) {
                              break L130;
                             }
                             $$phi$trans$insert4444$i = ((($rest$sroa$0$13789$i)) + 5|0);
                             $$pre4445$i = HEAP8[$$phi$trans$insert4444$i>>0]|0;
                             $423 = ($$pre4445$i<<24>>24)>(-65);
                             if ($423) {
                              $508 = 0;
                             } else {
                              break L130;
                             }
                            }
                            $424 = ($rest$sroa$0$13789$i|0)==(8400|0);
                            do {
                             if (!($424)) {
                              $425 = (_memcmp(8400,$rest$sroa$0$13789$i,5)|0);
                              $426 = ($425|0)==(0);
                              if ($426) {
                               break;
                              }
                              if ($508) {
                               $509 = 1;
                              } else {
                               $not$$i$i$i$i1642$i = ($rest$sroa$82$13826$i>>>0)>(5);
                               if (!($not$$i$i$i$i1642$i)) {
                                break L130;
                               }
                               $$phi$trans$insert4446$i = ((($rest$sroa$0$13789$i)) + 5|0);
                               $$pre4447$i = HEAP8[$$phi$trans$insert4446$i>>0]|0;
                               $432 = ($$pre4447$i<<24>>24)>(-65);
                               if ($432) {
                                $509 = 0;
                               } else {
                                break L130;
                               }
                              }
                              $433 = ($rest$sroa$0$13789$i|0)==(8406|0);
                              do {
                               if (!($433)) {
                                $434 = (_memcmp(8406,$rest$sroa$0$13789$i,5)|0);
                                $435 = ($434|0)==(0);
                                if ($435) {
                                 break;
                                }
                                if ($509) {
                                 $510 = 1;
                                } else {
                                 $not$$i$i$i$i1683$i = ($rest$sroa$82$13826$i>>>0)>(5);
                                 if (!($not$$i$i$i$i1683$i)) {
                                  break L130;
                                 }
                                 $$phi$trans$insert4448$i = ((($rest$sroa$0$13789$i)) + 5|0);
                                 $$pre4449$i = HEAP8[$$phi$trans$insert4448$i>>0]|0;
                                 $441 = ($$pre4449$i<<24>>24)>(-65);
                                 if ($441) {
                                  $510 = 0;
                                 } else {
                                  break L130;
                                 }
                                }
                                $442 = ($rest$sroa$0$13789$i|0)==(8412|0);
                                do {
                                 if (!($442)) {
                                  $443 = (_memcmp(8412,$rest$sroa$0$13789$i,5)|0);
                                  $444 = ($443|0)==(0);
                                  if ($444) {
                                   break;
                                  }
                                  if ($510) {
                                   $511 = 1;
                                  } else {
                                   $not$$i$i$i$i1717$i = ($rest$sroa$82$13826$i>>>0)>(5);
                                   if (!($not$$i$i$i$i1717$i)) {
                                    break L130;
                                   }
                                   $$phi$trans$insert4450$i = ((($rest$sroa$0$13789$i)) + 5|0);
                                   $$pre4451$i = HEAP8[$$phi$trans$insert4450$i>>0]|0;
                                   $450 = ($$pre4451$i<<24>>24)>(-65);
                                   if ($450) {
                                    $511 = 0;
                                   } else {
                                    break L130;
                                   }
                                  }
                                  $451 = ($rest$sroa$0$13789$i|0)==(8418|0);
                                  do {
                                   if (!($451)) {
                                    $452 = (_memcmp(8418,$rest$sroa$0$13789$i,5)|0);
                                    $453 = ($452|0)==(0);
                                    if ($453) {
                                     break;
                                    }
                                    if ($511) {
                                     $512 = 1;
                                    } else {
                                     $not$$i$i$i$i1759$i = ($rest$sroa$82$13826$i>>>0)>(5);
                                     if (!($not$$i$i$i$i1759$i)) {
                                      break L130;
                                     }
                                     $$phi$trans$insert4452$i = ((($rest$sroa$0$13789$i)) + 5|0);
                                     $$pre4453$i = HEAP8[$$phi$trans$insert4452$i>>0]|0;
                                     $459 = ($$pre4453$i<<24>>24)>(-65);
                                     if ($459) {
                                      $512 = 0;
                                     } else {
                                      break L130;
                                     }
                                    }
                                    $460 = ($rest$sroa$0$13789$i|0)==(8424|0);
                                    if (!($460)) {
                                     $461 = (_memcmp(8424,$rest$sroa$0$13789$i,5)|0);
                                     $462 = ($461|0)==(0);
                                     if (!($462)) {
                                      break L130;
                                     }
                                    }
                                    $467 = HEAP32[$141>>2]|0;
                                    FUNCTION_TABLE_viiii[$467 & 511]($_565$i,$1,8429,1);
                                    $self$i1785$sroa$0$0$copyload$i = HEAP32[$_565$i>>2]|0;
                                    $switch3$i1786$i = ($self$i1785$sroa$0$0$copyload$i|0)==(1);
                                    if ($switch3$i1786$i) {
                                     label = 363;
                                     break L78;
                                    }
                                    if ($512) {
                                     $$pre$i1825$i = ((($rest$sroa$0$13789$i)) + 5|0);
                                     $$pre$phi$i1830$iZ2D = $$pre$i1825$i;
                                    } else {
                                     $not$$i$i1827$i = ($rest$sroa$82$13826$i>>>0)>(5);
                                     if (!($not$$i$i1827$i)) {
                                      label = 368;
                                      break L78;
                                     }
                                     $469 = ((($rest$sroa$0$13789$i)) + 5|0);
                                     $470 = HEAP8[$469>>0]|0;
                                     $471 = ($470<<24>>24)>(-65);
                                     if ($471) {
                                      $$pre$phi$i1830$iZ2D = $469;
                                     } else {
                                      label = 368;
                                      break L78;
                                     }
                                    }
                                    $472 = (($rest$sroa$82$13826$i) + -5)|0;
                                    $rest$sroa$0$1$be$i = $$pre$phi$i1830$iZ2D;$rest$sroa$82$1$be$i = $472;
                                    break L134;
                                   }
                                  } while(0);
                                  $458 = HEAP32[$141>>2]|0;
                                  FUNCTION_TABLE_viiii[$458 & 511]($_544$i,$1,8423,1);
                                  $self$i1751$sroa$0$0$copyload$i = HEAP32[$_544$i>>2]|0;
                                  $switch3$i1752$i = ($self$i1751$sroa$0$0$copyload$i|0)==(1);
                                  if ($switch3$i1752$i) {
                                   label = 354;
                                   break L78;
                                  }
                                  if ($511) {
                                   $$pre$i1776$i = ((($rest$sroa$0$13789$i)) + 5|0);
                                   $$pre$phi$i1781$iZ2D = $$pre$i1776$i;
                                  } else {
                                   $not$$i$i1778$i = ($rest$sroa$82$13826$i>>>0)>(5);
                                   if (!($not$$i$i1778$i)) {
                                    label = 359;
                                    break L78;
                                   }
                                   $463 = ((($rest$sroa$0$13789$i)) + 5|0);
                                   $464 = HEAP8[$463>>0]|0;
                                   $465 = ($464<<24>>24)>(-65);
                                   if ($465) {
                                    $$pre$phi$i1781$iZ2D = $463;
                                   } else {
                                    label = 359;
                                    break L78;
                                   }
                                  }
                                  $466 = (($rest$sroa$82$13826$i) + -5)|0;
                                  $rest$sroa$0$1$be$i = $$pre$phi$i1781$iZ2D;$rest$sroa$82$1$be$i = $466;
                                  break L134;
                                 }
                                } while(0);
                                $449 = HEAP32[$141>>2]|0;
                                FUNCTION_TABLE_viiii[$449 & 511]($_523$i,$1,8417,1);
                                $self$i1709$sroa$0$0$copyload$i = HEAP32[$_523$i>>2]|0;
                                $switch3$i1710$i = ($self$i1709$sroa$0$0$copyload$i|0)==(1);
                                if ($switch3$i1710$i) {
                                 label = 341;
                                 break L78;
                                }
                                if ($510) {
                                 $$pre$i1742$i = ((($rest$sroa$0$13789$i)) + 5|0);
                                 $$pre$phi$i1747$iZ2D = $$pre$i1742$i;
                                } else {
                                 $not$$i$i1744$i = ($rest$sroa$82$13826$i>>>0)>(5);
                                 if (!($not$$i$i1744$i)) {
                                  label = 346;
                                  break L78;
                                 }
                                 $454 = ((($rest$sroa$0$13789$i)) + 5|0);
                                 $455 = HEAP8[$454>>0]|0;
                                 $456 = ($455<<24>>24)>(-65);
                                 if ($456) {
                                  $$pre$phi$i1747$iZ2D = $454;
                                 } else {
                                  label = 346;
                                  break L78;
                                 }
                                }
                                $457 = (($rest$sroa$82$13826$i) + -5)|0;
                                $rest$sroa$0$1$be$i = $$pre$phi$i1747$iZ2D;$rest$sroa$82$1$be$i = $457;
                                break L134;
                               }
                              } while(0);
                              $440 = HEAP32[$141>>2]|0;
                              FUNCTION_TABLE_viiii[$440 & 511]($_502$i,$1,8411,1);
                              $self$i1668$sroa$0$0$copyload$i = HEAP32[$_502$i>>2]|0;
                              $switch3$i1669$i = ($self$i1668$sroa$0$0$copyload$i|0)==(1);
                              if ($switch3$i1669$i) {
                               label = 328;
                               break L78;
                              }
                              if ($509) {
                               $$pre$i1700$i = ((($rest$sroa$0$13789$i)) + 5|0);
                               $$pre$phi$i1705$iZ2D = $$pre$i1700$i;
                              } else {
                               $not$$i$i1702$i = ($rest$sroa$82$13826$i>>>0)>(5);
                               if (!($not$$i$i1702$i)) {
                                label = 333;
                                break L78;
                               }
                               $445 = ((($rest$sroa$0$13789$i)) + 5|0);
                               $446 = HEAP8[$445>>0]|0;
                               $447 = ($446<<24>>24)>(-65);
                               if ($447) {
                                $$pre$phi$i1705$iZ2D = $445;
                               } else {
                                label = 333;
                                break L78;
                               }
                              }
                              $448 = (($rest$sroa$82$13826$i) + -5)|0;
                              $rest$sroa$0$1$be$i = $$pre$phi$i1705$iZ2D;$rest$sroa$82$1$be$i = $448;
                              break L134;
                             }
                            } while(0);
                            $431 = HEAP32[$141>>2]|0;
                            FUNCTION_TABLE_viiii[$431 & 511]($_481$i,$1,8405,1);
                            $self$i1634$sroa$0$0$copyload$i = HEAP32[$_481$i>>2]|0;
                            $switch3$i1635$i = ($self$i1634$sroa$0$0$copyload$i|0)==(1);
                            if ($switch3$i1635$i) {
                             label = 315;
                             break L78;
                            }
                            if ($508) {
                             $$pre$i1659$i = ((($rest$sroa$0$13789$i)) + 5|0);
                             $$pre$phi$i1664$iZ2D = $$pre$i1659$i;
                            } else {
                             $not$$i$i1661$i = ($rest$sroa$82$13826$i>>>0)>(5);
                             if (!($not$$i$i1661$i)) {
                              label = 320;
                              break L78;
                             }
                             $436 = ((($rest$sroa$0$13789$i)) + 5|0);
                             $437 = HEAP8[$436>>0]|0;
                             $438 = ($437<<24>>24)>(-65);
                             if ($438) {
                              $$pre$phi$i1664$iZ2D = $436;
                             } else {
                              label = 320;
                              break L78;
                             }
                            }
                            $439 = (($rest$sroa$82$13826$i) + -5)|0;
                            $rest$sroa$0$1$be$i = $$pre$phi$i1664$iZ2D;$rest$sroa$82$1$be$i = $439;
                            break L134;
                           }
                          } while(0);
                          $422 = HEAP32[$141>>2]|0;
                          FUNCTION_TABLE_viiii[$422 & 511]($_460$i,$1,8399,1);
                          $self$i1592$sroa$0$0$copyload$i = HEAP32[$_460$i>>2]|0;
                          $switch3$i1593$i = ($self$i1592$sroa$0$0$copyload$i|0)==(1);
                          if ($switch3$i1593$i) {
                           label = 302;
                           break L78;
                          }
                          if ($507) {
                           $$pre$i1625$i = ((($rest$sroa$0$13789$i)) + 5|0);
                           $$pre$phi$i1630$iZ2D = $$pre$i1625$i;
                          } else {
                           $not$$i$i1627$i = ($rest$sroa$82$13826$i>>>0)>(5);
                           if (!($not$$i$i1627$i)) {
                            label = 307;
                            break L78;
                           }
                           $427 = ((($rest$sroa$0$13789$i)) + 5|0);
                           $428 = HEAP8[$427>>0]|0;
                           $429 = ($428<<24>>24)>(-65);
                           if ($429) {
                            $$pre$phi$i1630$iZ2D = $427;
                           } else {
                            label = 307;
                            break L78;
                           }
                          }
                          $430 = (($rest$sroa$82$13826$i) + -5)|0;
                          $rest$sroa$0$1$be$i = $$pre$phi$i1630$iZ2D;$rest$sroa$82$1$be$i = $430;
                          break L134;
                         }
                        } while(0);
                        $413 = HEAP32[$141>>2]|0;
                        FUNCTION_TABLE_viiii[$413 & 511]($_439$i,$1,8393,1);
                        $self$i1551$sroa$0$0$copyload$i = HEAP32[$_439$i>>2]|0;
                        $switch3$i1552$i = ($self$i1551$sroa$0$0$copyload$i|0)==(1);
                        if ($switch3$i1552$i) {
                         label = 289;
                         break L78;
                        }
                        if ($506) {
                         $$pre$i1583$i = ((($rest$sroa$0$13789$i)) + 5|0);
                         $$pre$phi$i1588$iZ2D = $$pre$i1583$i;
                        } else {
                         $not$$i$i1585$i = ($rest$sroa$82$13826$i>>>0)>(5);
                         if (!($not$$i$i1585$i)) {
                          label = 294;
                          break L78;
                         }
                         $418 = ((($rest$sroa$0$13789$i)) + 5|0);
                         $419 = HEAP8[$418>>0]|0;
                         $420 = ($419<<24>>24)>(-65);
                         if ($420) {
                          $$pre$phi$i1588$iZ2D = $418;
                         } else {
                          label = 294;
                          break L78;
                         }
                        }
                        $421 = (($rest$sroa$82$13826$i) + -5)|0;
                        $rest$sroa$0$1$be$i = $$pre$phi$i1588$iZ2D;$rest$sroa$82$1$be$i = $421;
                        break L134;
                       }
                      } while(0);
                      $404 = HEAP32[$141>>2]|0;
                      FUNCTION_TABLE_viiii[$404 & 511]($_418$i,$1,8387,1);
                      $self$i1517$sroa$0$0$copyload$i = HEAP32[$_418$i>>2]|0;
                      $switch3$i1518$i = ($self$i1517$sroa$0$0$copyload$i|0)==(1);
                      if ($switch3$i1518$i) {
                       label = 276;
                       break L78;
                      }
                      if ($505) {
                       $$pre$i1542$i = ((($rest$sroa$0$13789$i)) + 5|0);
                       $$pre$phi$i1547$iZ2D = $$pre$i1542$i;
                      } else {
                       $not$$i$i1544$i = ($rest$sroa$82$13826$i>>>0)>(5);
                       if (!($not$$i$i1544$i)) {
                        label = 281;
                        break L78;
                       }
                       $409 = ((($rest$sroa$0$13789$i)) + 5|0);
                       $410 = HEAP8[$409>>0]|0;
                       $411 = ($410<<24>>24)>(-65);
                       if ($411) {
                        $$pre$phi$i1547$iZ2D = $409;
                       } else {
                        label = 281;
                        break L78;
                       }
                      }
                      $412 = (($rest$sroa$82$13826$i) + -5)|0;
                      $rest$sroa$0$1$be$i = $$pre$phi$i1547$iZ2D;$rest$sroa$82$1$be$i = $412;
                      break L134;
                     }
                    } while(0);
                    $395 = HEAP32[$141>>2]|0;
                    FUNCTION_TABLE_viiii[$395 & 511]($_397$i,$1,8381,1);
                    $self$i1475$sroa$0$0$copyload$i = HEAP32[$_397$i>>2]|0;
                    $switch3$i1476$i = ($self$i1475$sroa$0$0$copyload$i|0)==(1);
                    if ($switch3$i1476$i) {
                     label = 263;
                     break L78;
                    }
                    if ($504) {
                     $$pre$i1508$i = ((($rest$sroa$0$13789$i)) + 5|0);
                     $$pre$phi$i1513$iZ2D = $$pre$i1508$i;
                    } else {
                     $not$$i$i1510$i = ($rest$sroa$82$13826$i>>>0)>(5);
                     if (!($not$$i$i1510$i)) {
                      label = 268;
                      break L78;
                     }
                     $400 = ((($rest$sroa$0$13789$i)) + 5|0);
                     $401 = HEAP8[$400>>0]|0;
                     $402 = ($401<<24>>24)>(-65);
                     if ($402) {
                      $$pre$phi$i1513$iZ2D = $400;
                     } else {
                      label = 268;
                      break L78;
                     }
                    }
                    $403 = (($rest$sroa$82$13826$i) + -5)|0;
                    $rest$sroa$0$1$be$i = $$pre$phi$i1513$iZ2D;$rest$sroa$82$1$be$i = $403;
                    break L134;
                   }
                  } while(0);
                  $386 = HEAP32[$141>>2]|0;
                  FUNCTION_TABLE_viiii[$386 & 511]($_376$i,$1,8375,1);
                  $self$i1434$sroa$0$0$copyload$i = HEAP32[$_376$i>>2]|0;
                  $switch3$i1435$i = ($self$i1434$sroa$0$0$copyload$i|0)==(1);
                  if ($switch3$i1435$i) {
                   label = 250;
                   break L78;
                  }
                  if ($503) {
                   $$pre$i1466$i = ((($rest$sroa$0$13789$i)) + 5|0);
                   $$pre$phi$i1471$iZ2D = $$pre$i1466$i;
                  } else {
                   $not$$i$i1468$i = ($rest$sroa$82$13826$i>>>0)>(5);
                   if (!($not$$i$i1468$i)) {
                    label = 255;
                    break L78;
                   }
                   $391 = ((($rest$sroa$0$13789$i)) + 5|0);
                   $392 = HEAP8[$391>>0]|0;
                   $393 = ($392<<24>>24)>(-65);
                   if ($393) {
                    $$pre$phi$i1471$iZ2D = $391;
                   } else {
                    label = 255;
                    break L78;
                   }
                  }
                  $394 = (($rest$sroa$82$13826$i) + -5)|0;
                  $rest$sroa$0$1$be$i = $$pre$phi$i1471$iZ2D;$rest$sroa$82$1$be$i = $394;
                  break L134;
                 }
                } while(0);
                $$pre$i1040$ptr$i = ((($rest$sroa$0$13789$i)) + 1|0);
                do {
                 if ($212) {
                  $498 = 0;
                  label = 129;
                 } else {
                  $218 = HEAP8[$$pre$i1040$ptr$i>>0]|0;
                  $219 = ($218<<24>>24)>(-65);
                  if (!($219)) {
                   label = 112;
                   break L78;
                  }
                  $220 = (($rest$sroa$82$13826$i) + -1)|0;
                  $$ptr$i = (($rest$sroa$0$13789$i) + ($rest$sroa$82$13826$i)|0);
                  $221 = ($220|0)==(0);
                  if ($221) {
                   $498 = 0;
                   label = 129;
                   break;
                  }
                  $223 = ((($rest$sroa$0$13789$i)) + 2|0);
                  $224 = ($218<<24>>24)>(-1);
                  do {
                   if ($224) {
                    $222 = $218&255;
                    $_163$sroa$5$2$ph$i = $222;
                   } else {
                    $225 = $218 & 31;
                    $226 = $225&255;
                    $227 = ($rest$sroa$82$13826$i|0)==(2);
                    if ($227) {
                     $235 = $$ptr$i;$_0$0$i22$i$i1057$i = 0;
                    } else {
                     $228 = ((($rest$sroa$0$13789$i)) + 3|0);
                     $229 = HEAP8[$223>>0]|0;
                     $phitmp$i$i1055$i = $229 & 63;
                     $235 = $228;$_0$0$i22$i$i1057$i = $phitmp$i$i1055$i;
                    }
                    $230 = $226 << 6;
                    $231 = $_0$0$i22$i$i1057$i&255;
                    $232 = $231 | $230;
                    $233 = ($218&255)>(223);
                    if (!($233)) {
                     $_163$sroa$5$2$ph$i = $232;
                     break;
                    }
                    $234 = ($235|0)==($$ptr$i|0);
                    if ($234) {
                     $245 = $$ptr$i;$_0$0$i15$i$i1062$i = 0;
                    } else {
                     $236 = ((($235)) + 1|0);
                     $237 = HEAP8[$235>>0]|0;
                     $phitmp31$i$i1060$i = $237 & 63;
                     $245 = $236;$_0$0$i15$i$i1062$i = $phitmp31$i$i1060$i;
                    }
                    $238 = $231 << 6;
                    $239 = $_0$0$i15$i$i1062$i&255;
                    $240 = $239 | $238;
                    $241 = $226 << 12;
                    $242 = $240 | $241;
                    $243 = ($218&255)>(239);
                    if (!($243)) {
                     $_163$sroa$5$2$ph$i = $242;
                     break;
                    }
                    $244 = ($245|0)==($$ptr$i|0);
                    if ($244) {
                     $_0$0$i9$i$i1067$i = 0;
                    } else {
                     $246 = HEAP8[$245>>0]|0;
                     $phitmp32$i$i1065$i = $246 & 63;
                     $_0$0$i9$i$i1067$i = $phitmp32$i$i1065$i;
                    }
                    $247 = $226 << 18;
                    $248 = $247 & 1835008;
                    $249 = $240 << 6;
                    $250 = $_0$0$i9$i$i1067$i&255;
                    $251 = $249 | $248;
                    $252 = $251 | $250;
                    $_163$sroa$5$2$ph$i = $252;
                   }
                  } while(0);
                  $cond$i104 = ($_163$sroa$5$2$ph$i|0)==(46);
                  if (!($cond$i104)) {
                   $498 = $220;
                   label = 129;
                   break;
                  }
                  $256 = HEAP32[$141>>2]|0;
                  FUNCTION_TABLE_viiii[$256 & 511]($_172$i,$1,8325,2);
                  $self$i1089$sroa$0$0$copyload$i = HEAP32[$_172$i>>2]|0;
                  $switch3$i1090$i = ($self$i1089$sroa$0$0$copyload$i|0)==(1);
                  if ($switch3$i1090$i) {
                   label = 132;
                   break L78;
                  }
                  $258 = ($rest$sroa$82$13826$i|0)==(2);
                  if (!($258)) {
                   $259 = HEAP8[$223>>0]|0;
                   $260 = ($259<<24>>24)>(-65);
                   if (!($260)) {
                    label = 135;
                    break L78;
                   }
                  }
                  $261 = (($rest$sroa$82$13826$i) + -2)|0;
                  $$sink$i$index = $223;$$sink$i$index2 = $261;
                 }
                } while(0);
                if ((label|0) == 129) {
                 label = 0;
                 $257 = HEAP32[$141>>2]|0;
                 FUNCTION_TABLE_viiii[$257 & 511]($_188$i,$1,8329,1);
                 $self$i1096$sroa$0$0$copyload$i = HEAP32[$_188$i>>2]|0;
                 $switch3$i1097$i = ($self$i1096$sroa$0$0$copyload$i|0)==(1);
                 if ($switch3$i1097$i) {
                  label = 137;
                  break L78;
                 }
                 if (!($212)) {
                  $262 = HEAP8[$$pre$i1040$ptr$i>>0]|0;
                  $263 = ($262<<24>>24)>(-65);
                  if (!($263)) {
                   label = 140;
                   break L78;
                  }
                 }
                 $$sink$i$index = $$pre$i1040$ptr$i;$$sink$i$index2 = $498;
                }
                $rest$sroa$0$1$be$i = $$sink$i$index;$rest$sroa$82$1$be$i = $$sink$i$index2;
               }
              } while(0);
              if ((label|0) == 147) {
               label = 0;
               $271 = (($rest$sroa$0$13789$i) + ($rest$sroa$82$13826$i)|0);
               $272 = $rest$sroa$0$13789$i;
               $273 = $272;$_597$sroa$0$0$i = 0;
               L410: while(1) {
                $$cast$i$i$i$i = $273;
                $274 = ($$cast$i$i$i$i|0)==($271|0);
                if ($274) {
                 $idx$0$i = $rest$sroa$82$13826$i;
                 break;
                }
                $277 = ((($$cast$i$i$i$i)) + 1|0);
                $276 = HEAP8[$$cast$i$i$i$i>>0]|0;
                $278 = ($276<<24>>24)>(-1);
                $279 = $277;
                do {
                 if ($278) {
                  $275 = $276&255;
                  $314 = $279;$trunc$i$i$i = $275;
                 } else {
                  $280 = $276 & 31;
                  $281 = $280&255;
                  $282 = ($277|0)==($271|0);
                  if ($282) {
                   $291 = $271;$499 = $279;$_0$0$i22$i$i$i$i$i$i = 0;
                  } else {
                   $283 = ((($$cast$i$i$i$i)) + 2|0);
                   $284 = HEAP8[$277>>0]|0;
                   $phitmp$i$i$i$i$i$i = $284 & 63;
                   $285 = $283;
                   $291 = $283;$499 = $285;$_0$0$i22$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i;
                  }
                  $286 = $281 << 6;
                  $287 = $_0$0$i22$i$i$i$i$i$i&255;
                  $288 = $287 | $286;
                  $289 = ($276&255)>(223);
                  if (!($289)) {
                   $314 = $499;$trunc$i$i$i = $288;
                   break;
                  }
                  $290 = ($291|0)==($271|0);
                  if ($290) {
                   $302 = $271;$500 = $499;$_0$0$i15$i$i$i$i$i$i = 0;
                  } else {
                   $292 = ((($291)) + 1|0);
                   $293 = HEAP8[$291>>0]|0;
                   $phitmp31$i$i$i$i$i$i = $293 & 63;
                   $294 = $292;
                   $302 = $292;$500 = $294;$_0$0$i15$i$i$i$i$i$i = $phitmp31$i$i$i$i$i$i;
                  }
                  $295 = $287 << 6;
                  $296 = $_0$0$i15$i$i$i$i$i$i&255;
                  $297 = $296 | $295;
                  $298 = $281 << 12;
                  $299 = $297 | $298;
                  $300 = ($276&255)>(239);
                  if (!($300)) {
                   $314 = $500;$trunc$i$i$i = $299;
                   break;
                  }
                  $301 = ($302|0)==($271|0);
                  if ($301) {
                   $501 = $500;$_0$0$i9$i$i$i$i$i$i = 0;
                  } else {
                   $303 = ((($302)) + 1|0);
                   $304 = HEAP8[$302>>0]|0;
                   $phitmp32$i$i$i$i$i$i = $304 & 63;
                   $305 = $303;
                   $501 = $305;$_0$0$i9$i$i$i$i$i$i = $phitmp32$i$i$i$i$i$i;
                  }
                  $306 = $281 << 18;
                  $307 = $306 & 1835008;
                  $308 = $297 << 6;
                  $309 = $_0$0$i9$i$i$i$i$i$i&255;
                  $310 = $308 | $307;
                  $311 = $310 | $309;
                  $314 = $501;$trunc$i$i$i = $311;
                 }
                } while(0);
                $312 = (($_597$sroa$0$0$i) - ($273))|0;
                $313 = (($312) + ($314))|0;
                $trunc$i$i$i$clear = $trunc$i$i$i & 2097151;
                switch ($trunc$i$i$i$clear|0) {
                case 46: case 36:  {
                 $idx$0$i = $_597$sroa$0$0$i;
                 break L410;
                 break;
                }
                default: {
                 $273 = $314;$_597$sroa$0$0$i = $313;
                }
                }
               }
               $474 = ($idx$0$i|0)==(0);
               $475 = ($rest$sroa$82$13826$i|0)==($idx$0$i|0);
               $or$cond$i$i1843$i = $474 | $475;
               if (!($or$cond$i$i1843$i)) {
                $not$$i$i1844$i = ($rest$sroa$82$13826$i>>>0)>($idx$0$i>>>0);
                if (!($not$$i$i1844$i)) {
                 label = 376;
                 break L78;
                }
                $476 = (($rest$sroa$0$13789$i) + ($idx$0$i)|0);
                $477 = HEAP8[$476>>0]|0;
                $478 = ($477<<24>>24)>(-65);
                if (!($478)) {
                 label = 376;
                 break L78;
                }
               }
               $479 = HEAP32[$141>>2]|0;
               FUNCTION_TABLE_viiii[$479 & 511]($_605$i,$1,$rest$sroa$0$13789$i,$idx$0$i);
               $self$i1850$sroa$0$0$copyload$i = HEAP32[$_605$i>>2]|0;
               $switch3$i1851$i = ($self$i1850$sroa$0$0$copyload$i|0)==(1);
               if ($switch3$i1851$i) {
                label = 378;
                break L78;
               }
               if ($or$cond$i$i1843$i) {
                $$pre$i1875$i = (($rest$sroa$0$13789$i) + ($idx$0$i)|0);
                $$pre$phi$i1880$iZ2D = $$pre$i1875$i;
               } else {
                $not$$i$i1877$i = ($rest$sroa$82$13826$i>>>0)>($idx$0$i>>>0);
                if (!($not$$i$i1877$i)) {
                 label = 383;
                 break L78;
                }
                $480 = (($rest$sroa$0$13789$i) + ($idx$0$i)|0);
                $481 = HEAP8[$480>>0]|0;
                $482 = ($481<<24>>24)>(-65);
                if ($482) {
                 $$pre$phi$i1880$iZ2D = $480;
                } else {
                 label = 383;
                 break L78;
                }
               }
               $483 = (($rest$sroa$82$13826$i) - ($idx$0$i))|0;
               $rest$sroa$0$1$be$i = $$pre$phi$i1880$iZ2D;$rest$sroa$82$1$be$i = $483;
              }
              $484 = ($rest$sroa$82$1$be$i|0)==(0);
              if ($484) {
               break L129;
              } else {
               $rest$sroa$0$13789$i = $rest$sroa$0$1$be$i;$rest$sroa$82$13826$i = $rest$sroa$82$1$be$i;
               label = 106;
              }
             }
             $468 = HEAP32[$141>>2]|0;
             FUNCTION_TABLE_viiii[$468 & 511]($_584$i,$1,$rest$sroa$0$13789$i,$rest$sroa$82$13826$i);
             $self$i1800$sroa$0$0$copyload$i = HEAP32[$_584$i>>2]|0;
             $switch3$i1801$i = ($self$i1800$sroa$0$0$copyload$i|0)==(1);
             if ($switch3$i1801$i) {
              label = 370;
              break L78;
             }
            }
           } while(0);
           $473 = ($196|0)==(0);
           if ($473) {
            break L4;
           } else {
            $first$0$off03866$i = 0;$inner$sroa$0$13867$i = $$pre$phi$i3040$iZ2D;$inner$sroa$12$13868$i = $196;
           }
          }
          switch (label|0) {
           case 64: {
            $self$i921$sroa$4$0$$sroa_idx2907$i = ((($_107$i)) + 4|0);
            $self$i921$sroa$4$0$copyload$i = HEAP32[$self$i921$sroa$4$0$$sroa_idx2907$i>>2]|0;
            $self$i921$sroa$5$0$$sroa_idx2909$i = ((($_107$i)) + 8|0);
            $self$i921$sroa$5$0$copyload$i = HEAP32[$self$i921$sroa$5$0$$sroa_idx2909$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i921$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i921$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 78: {
            __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3288);
            // unreachable;
            break;
           }
           case 85: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($inner$sroa$0$13867$i,$inner$sroa$12$13868$i,0,$182);
            // unreachable;
            break;
           }
           case 87: {
            $189 = ($self$sroa$0$0$copyload$i989$i&65535) >>> 8;
            $190 = $189&255;
            __ZN4core6result13unwrap_failed17h753f171ed007ae4dE($190);
            // unreachable;
            break;
           }
           case 92: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$03779$i,$rest$sroa$82$03780$i,$self$sroa$720$0$copyload$i$i,$rest$sroa$82$03780$i);
            // unreachable;
            break;
           }
           case 100: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$03779$i,$rest$sroa$82$03780$lcssa3930$i,1,$rest$sroa$82$03780$lcssa3930$i);
            // unreachable;
            break;
           }
           case 103: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$03779$i,$self$sroa$720$0$copyload$i$i,1,$self$sroa$720$0$copyload$i$i);
            // unreachable;
            break;
           }
           case 112: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,1,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 132: {
            $self$i1089$sroa$4$0$$sroa_idx2912$i = ((($_172$i)) + 4|0);
            $self$i1089$sroa$4$0$copyload$i = HEAP32[$self$i1089$sroa$4$0$$sroa_idx2912$i>>2]|0;
            $self$i1089$sroa$5$0$$sroa_idx2914$i = ((($_172$i)) + 8|0);
            $self$i1089$sroa$5$0$copyload$i = HEAP32[$self$i1089$sroa$5$0$$sroa_idx2914$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1089$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1089$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 135: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,2,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 137: {
            $self$i1096$sroa$4$0$$sroa_idx2917$i = ((($_188$i)) + 4|0);
            $self$i1096$sroa$4$0$copyload$i = HEAP32[$self$i1096$sroa$4$0$$sroa_idx2917$i>>2]|0;
            $self$i1096$sroa$5$0$$sroa_idx2919$i = ((($_188$i)) + 8|0);
            $self$i1096$sroa$5$0$copyload$i = HEAP32[$self$i1096$sroa$5$0$$sroa_idx2919$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1096$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1096$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 140: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,1,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 166: {
            $self$i1163$sroa$4$0$$sroa_idx2922$i = ((($_208$i)) + 4|0);
            $self$i1163$sroa$4$0$copyload$i = HEAP32[$self$i1163$sroa$4$0$$sroa_idx2922$i>>2]|0;
            $self$i1163$sroa$5$0$$sroa_idx2924$i = ((($_208$i)) + 8|0);
            $self$i1163$sroa$5$0$copyload$i = HEAP32[$self$i1163$sroa$5$0$$sroa_idx2924$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1163$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1163$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 169: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,4,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 176: {
            $self$i1205$sroa$4$0$$sroa_idx2927$i = ((($_229$i)) + 4|0);
            $self$i1205$sroa$4$0$copyload$i = HEAP32[$self$i1205$sroa$4$0$$sroa_idx2927$i>>2]|0;
            $self$i1205$sroa$5$0$$sroa_idx2929$i = ((($_229$i)) + 8|0);
            $self$i1205$sroa$5$0$copyload$i = HEAP32[$self$i1205$sroa$5$0$$sroa_idx2929$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1205$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1205$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 179: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,4,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 186: {
            $self$i1231$sroa$4$0$$sroa_idx2932$i = ((($_250$i)) + 4|0);
            $self$i1231$sroa$4$0$copyload$i = HEAP32[$self$i1231$sroa$4$0$$sroa_idx2932$i>>2]|0;
            $self$i1231$sroa$5$0$$sroa_idx2934$i = ((($_250$i)) + 8|0);
            $self$i1231$sroa$5$0$copyload$i = HEAP32[$self$i1231$sroa$5$0$$sroa_idx2934$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1231$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1231$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 189: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,4,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 196: {
            $self$i1257$sroa$4$0$$sroa_idx2937$i = ((($_271$i)) + 4|0);
            $self$i1257$sroa$4$0$copyload$i = HEAP32[$self$i1257$sroa$4$0$$sroa_idx2937$i>>2]|0;
            $self$i1257$sroa$5$0$$sroa_idx2939$i = ((($_271$i)) + 8|0);
            $self$i1257$sroa$5$0$copyload$i = HEAP32[$self$i1257$sroa$5$0$$sroa_idx2939$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1257$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1257$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 199: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,4,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 206: {
            $self$i1283$sroa$4$0$$sroa_idx2942$i = ((($_292$i)) + 4|0);
            $self$i1283$sroa$4$0$copyload$i = HEAP32[$self$i1283$sroa$4$0$$sroa_idx2942$i>>2]|0;
            $self$i1283$sroa$5$0$$sroa_idx2944$i = ((($_292$i)) + 8|0);
            $self$i1283$sroa$5$0$copyload$i = HEAP32[$self$i1283$sroa$5$0$$sroa_idx2944$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1283$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1283$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 209: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,4,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 216: {
            $self$i1317$sroa$4$0$$sroa_idx2947$i = ((($_313$i)) + 4|0);
            $self$i1317$sroa$4$0$copyload$i = HEAP32[$self$i1317$sroa$4$0$$sroa_idx2947$i>>2]|0;
            $self$i1317$sroa$5$0$$sroa_idx2949$i = ((($_313$i)) + 8|0);
            $self$i1317$sroa$5$0$copyload$i = HEAP32[$self$i1317$sroa$5$0$$sroa_idx2949$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1317$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1317$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 219: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,4,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 226: {
            $self$i1358$sroa$4$0$$sroa_idx2952$i = ((($_334$i)) + 4|0);
            $self$i1358$sroa$4$0$copyload$i = HEAP32[$self$i1358$sroa$4$0$$sroa_idx2952$i>>2]|0;
            $self$i1358$sroa$5$0$$sroa_idx2954$i = ((($_334$i)) + 8|0);
            $self$i1358$sroa$5$0$copyload$i = HEAP32[$self$i1358$sroa$5$0$$sroa_idx2954$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1358$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1358$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 229: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,4,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 237: {
            $self$i1400$sroa$4$0$$sroa_idx2957$i = ((($_355$i)) + 4|0);
            $self$i1400$sroa$4$0$copyload$i = HEAP32[$self$i1400$sroa$4$0$$sroa_idx2957$i>>2]|0;
            $self$i1400$sroa$5$0$$sroa_idx2959$i = ((($_355$i)) + 8|0);
            $self$i1400$sroa$5$0$copyload$i = HEAP32[$self$i1400$sroa$5$0$$sroa_idx2959$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1400$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1400$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 242: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,3,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 250: {
            $self$i1434$sroa$4$0$$sroa_idx2962$i = ((($_376$i)) + 4|0);
            $self$i1434$sroa$4$0$copyload$i = HEAP32[$self$i1434$sroa$4$0$$sroa_idx2962$i>>2]|0;
            $self$i1434$sroa$5$0$$sroa_idx2964$i = ((($_376$i)) + 8|0);
            $self$i1434$sroa$5$0$copyload$i = HEAP32[$self$i1434$sroa$5$0$$sroa_idx2964$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1434$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1434$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 255: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,5,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 263: {
            $self$i1475$sroa$4$0$$sroa_idx2967$i = ((($_397$i)) + 4|0);
            $self$i1475$sroa$4$0$copyload$i = HEAP32[$self$i1475$sroa$4$0$$sroa_idx2967$i>>2]|0;
            $self$i1475$sroa$5$0$$sroa_idx2969$i = ((($_397$i)) + 8|0);
            $self$i1475$sroa$5$0$copyload$i = HEAP32[$self$i1475$sroa$5$0$$sroa_idx2969$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1475$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1475$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 268: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,5,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 276: {
            $self$i1517$sroa$4$0$$sroa_idx2972$i = ((($_418$i)) + 4|0);
            $self$i1517$sroa$4$0$copyload$i = HEAP32[$self$i1517$sroa$4$0$$sroa_idx2972$i>>2]|0;
            $self$i1517$sroa$5$0$$sroa_idx2974$i = ((($_418$i)) + 8|0);
            $self$i1517$sroa$5$0$copyload$i = HEAP32[$self$i1517$sroa$5$0$$sroa_idx2974$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1517$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1517$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 281: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,5,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 289: {
            $self$i1551$sroa$4$0$$sroa_idx2977$i = ((($_439$i)) + 4|0);
            $self$i1551$sroa$4$0$copyload$i = HEAP32[$self$i1551$sroa$4$0$$sroa_idx2977$i>>2]|0;
            $self$i1551$sroa$5$0$$sroa_idx2979$i = ((($_439$i)) + 8|0);
            $self$i1551$sroa$5$0$copyload$i = HEAP32[$self$i1551$sroa$5$0$$sroa_idx2979$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1551$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1551$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 294: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,5,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 302: {
            $self$i1592$sroa$4$0$$sroa_idx2982$i = ((($_460$i)) + 4|0);
            $self$i1592$sroa$4$0$copyload$i = HEAP32[$self$i1592$sroa$4$0$$sroa_idx2982$i>>2]|0;
            $self$i1592$sroa$5$0$$sroa_idx2984$i = ((($_460$i)) + 8|0);
            $self$i1592$sroa$5$0$copyload$i = HEAP32[$self$i1592$sroa$5$0$$sroa_idx2984$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1592$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1592$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 307: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,5,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 315: {
            $self$i1634$sroa$4$0$$sroa_idx2987$i = ((($_481$i)) + 4|0);
            $self$i1634$sroa$4$0$copyload$i = HEAP32[$self$i1634$sroa$4$0$$sroa_idx2987$i>>2]|0;
            $self$i1634$sroa$5$0$$sroa_idx2989$i = ((($_481$i)) + 8|0);
            $self$i1634$sroa$5$0$copyload$i = HEAP32[$self$i1634$sroa$5$0$$sroa_idx2989$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1634$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1634$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 320: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,5,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 328: {
            $self$i1668$sroa$4$0$$sroa_idx2992$i = ((($_502$i)) + 4|0);
            $self$i1668$sroa$4$0$copyload$i = HEAP32[$self$i1668$sroa$4$0$$sroa_idx2992$i>>2]|0;
            $self$i1668$sroa$5$0$$sroa_idx2994$i = ((($_502$i)) + 8|0);
            $self$i1668$sroa$5$0$copyload$i = HEAP32[$self$i1668$sroa$5$0$$sroa_idx2994$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1668$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1668$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 333: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,5,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 341: {
            $self$i1709$sroa$4$0$$sroa_idx2997$i = ((($_523$i)) + 4|0);
            $self$i1709$sroa$4$0$copyload$i = HEAP32[$self$i1709$sroa$4$0$$sroa_idx2997$i>>2]|0;
            $self$i1709$sroa$5$0$$sroa_idx2999$i = ((($_523$i)) + 8|0);
            $self$i1709$sroa$5$0$copyload$i = HEAP32[$self$i1709$sroa$5$0$$sroa_idx2999$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1709$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1709$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 346: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,5,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 354: {
            $self$i1751$sroa$4$0$$sroa_idx3002$i = ((($_544$i)) + 4|0);
            $self$i1751$sroa$4$0$copyload$i = HEAP32[$self$i1751$sroa$4$0$$sroa_idx3002$i>>2]|0;
            $self$i1751$sroa$5$0$$sroa_idx3004$i = ((($_544$i)) + 8|0);
            $self$i1751$sroa$5$0$copyload$i = HEAP32[$self$i1751$sroa$5$0$$sroa_idx3004$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1751$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1751$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 359: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,5,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 363: {
            $self$i1785$sroa$4$0$$sroa_idx3007$i = ((($_565$i)) + 4|0);
            $self$i1785$sroa$4$0$copyload$i = HEAP32[$self$i1785$sroa$4$0$$sroa_idx3007$i>>2]|0;
            $self$i1785$sroa$5$0$$sroa_idx3009$i = ((($_565$i)) + 8|0);
            $self$i1785$sroa$5$0$copyload$i = HEAP32[$self$i1785$sroa$5$0$$sroa_idx3009$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1785$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1785$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 368: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,5,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
           case 370: {
            $self$i1800$sroa$4$0$$sroa_idx3012$i = ((($_584$i)) + 4|0);
            $self$i1800$sroa$4$0$copyload$i = HEAP32[$self$i1800$sroa$4$0$$sroa_idx3012$i>>2]|0;
            $self$i1800$sroa$5$0$$sroa_idx3014$i = ((($_584$i)) + 8|0);
            $self$i1800$sroa$5$0$copyload$i = HEAP32[$self$i1800$sroa$5$0$$sroa_idx3014$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1800$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1800$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 376: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,0,$idx$0$i);
            // unreachable;
            break;
           }
           case 378: {
            $self$i1850$sroa$4$0$$sroa_idx3017$i = ((($_605$i)) + 4|0);
            $self$i1850$sroa$4$0$copyload$i = HEAP32[$self$i1850$sroa$4$0$$sroa_idx3017$i>>2]|0;
            $self$i1850$sroa$5$0$$sroa_idx3019$i = ((($_605$i)) + 8|0);
            $self$i1850$sroa$5$0$copyload$i = HEAP32[$self$i1850$sroa$5$0$$sroa_idx3019$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1850$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1850$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 383: {
            __ZN4core3str16slice_error_fail17h8c0c80047367e832E($rest$sroa$0$13789$i,$rest$sroa$82$13826$i,$idx$0$i,$rest$sroa$82$13826$i);
            // unreachable;
            break;
           }
          }
         } else {
          label = 59;
         }
        }
       } while(0);
       do {
        if ((label|0) == 59) {
         $142 = ((($2)) + 20|0);
         $143 = HEAP32[$142>>2]|0;
         FUNCTION_TABLE_viiii[$143 & 511]($_88$i,$1,$33,$self$sroa$6$0$copyload$i$i$i);
         $self$i$sroa$0$0$copyload$i = HEAP32[$_88$i>>2]|0;
         $switch3$i$i = ($self$i$sroa$0$0$copyload$i|0)==(1);
         if ($switch3$i$i) {
          $self$i$sroa$4$0$$sroa_idx2902$i = ((($_88$i)) + 4|0);
          $self$i$sroa$4$0$copyload$i = HEAP32[$self$i$sroa$4$0$$sroa_idx2902$i>>2]|0;
          $self$i$sroa$5$0$$sroa_idx2904$i = ((($_88$i)) + 8|0);
          $self$i$sroa$5$0$copyload$i = HEAP32[$self$i$sroa$5$0$$sroa_idx2904$i>>2]|0;
          $_46$sroa$29$0$ph$off0 = $self$i$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i$sroa$5$0$copyload$i;
          break;
         } else {
          break L4;
         }
        }
       } while(0);
       HEAP32[$0>>2] = 1;
       $_3$sroa$0$0$$sroa_idx3$i120 = ((($0)) + 4|0);
       $487 = $_3$sroa$0$0$$sroa_idx3$i120;
       $488 = $487;
       HEAP32[$488>>2] = $_46$sroa$29$0$ph$off0;
       $489 = (($487) + 4)|0;
       $490 = $489;
       HEAP32[$490>>2] = $_46$sroa$29$0$ph$off32;
       break L1;
      }
     } else {
      label = 8;
     }
    }
   } while(0);
   do {
    if ((label|0) == 8) {
     HEAP32[$_58>>2] = 2996;
     $34 = ((($_58)) + 4|0);
     HEAP32[$34>>2] = 1;
     $_6$sroa$0$0$$sroa_idx$i = ((($_58)) + 8|0);
     HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
     $35 = ((($_58)) + 16|0);
     HEAP32[$35>>2] = 16064;
     $36 = ((($_58)) + 20|0);
     HEAP32[$36>>2] = 0;
     $37 = HEAP32[$25>>2]|0;
     FUNCTION_TABLE_viii[$37 & 511]($_56,$1,$_58);
     $self$i96$sroa$0$0$copyload = HEAP32[$_56>>2]|0;
     $switch3$i97 = ($self$i96$sroa$0$0$copyload|0)==(1);
     if ($switch3$i97) {
      $self$i96$sroa$4$0$$sroa_idx283 = ((($_56)) + 4|0);
      $self$i96$sroa$4$0$copyload = HEAP32[$self$i96$sroa$4$0$$sroa_idx283>>2]|0;
      $self$i96$sroa$5$0$$sroa_idx285 = ((($_56)) + 8|0);
      $self$i96$sroa$5$0$copyload = HEAP32[$self$i96$sroa$5$0$$sroa_idx285>>2]|0;
      HEAP32[$0>>2] = 1;
      $_3$sroa$0$0$$sroa_idx3$i129 = ((($0)) + 4|0);
      $491 = $_3$sroa$0$0$$sroa_idx3$i129;
      $492 = $491;
      HEAP32[$492>>2] = $self$i96$sroa$4$0$copyload;
      $493 = (($491) + 4)|0;
      $494 = $493;
      HEAP32[$494>>2] = $self$i96$sroa$5$0$copyload;
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $485 = ((($2)) + 20|0);
   $486 = HEAP32[$485>>2]|0;
   FUNCTION_TABLE_viiii[$486 & 511]($0,$1,8149,1);
   STACKTOP = sp;return;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN50__LT__BP_mut_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h7cf7b28774cd666dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_26$i$i = 0, $switch$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_26$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 8|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (__ZN4core3fmt9Formatter9alternate17h9afd1eceb525c669E($1)|0);
 $12 = HEAP32[$1>>2]|0;
 if ($11) {
  $13 = $12 | 8;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$3>>2]|0;
  $switch$i$i = ($14|0)==(1);
  if ($switch$i$i) {
   $17 = $13;
  } else {
   HEAP32[$3>>2] = 1;
   $15 = ((($1)) + 12|0);
   HEAP32[$15>>2] = 10;
   $17 = $13;
  }
 } else {
  $17 = $12;
 }
 $16 = $17 | 4;
 HEAP32[$1>>2] = $16;
 HEAP32[$_26$i$i>>2] = $2;
 $18 = (__ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17hbe31468bb2b3b5d5E($_26$i$i,$1)|0);
 $19 = $3;
 $20 = $19;
 HEAP32[$20>>2] = $6;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $9;
 HEAP32[$1>>2] = $10;
 STACKTOP = sp;return ($18|0);
}
function __ZN4core6result13unwrap_failed17h753f171ed007ae4dE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $msg = sp + 48|0;
 $error = sp + 40|0;
 $_5 = sp + 16|0;
 $_10 = sp;
 HEAP32[$msg>>2] = 8430;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 HEAP8[$error>>0] = $0;
 $2 = HEAP32[830]|0;
 $3 = HEAP32[(3324)>>2]|0;
 $4 = $msg;
 $5 = $error;
 HEAP32[$_10>>2] = $4;
 $6 = ((($_10)) + 4|0);
 HEAP32[$6>>2] = (308);
 $7 = ((($_10)) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($_10)) + 12|0);
 HEAP32[$8>>2] = (334);
 HEAP32[$_5>>2] = $2;
 $9 = ((($_5)) + 4|0);
 HEAP32[$9>>2] = $3;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $10 = ((($_5)) + 16|0);
 HEAP32[$10>>2] = $_10;
 $11 = ((($_5)) + 20|0);
 HEAP32[$11>>2] = 2;
 __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_5,3308);
 // unreachable;
}
function __ZN3std10sys_common12thread_local9StaticKey9lazy_init17h99fc4ab166ab9497E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0, $_22$i = 0, $_22$i13 = 0, $_27$i = 0, $_6$sroa$0$0$$sroa_idx$i$i = 0, $_6$sroa$0$0$$sroa_idx$i$i17 = 0, $_7$i = 0, $_7$i10 = 0, $key$028 = 0, $key$i = 0, $key$i9 = 0, $left_val$i = 0;
 var $left_val$i11 = 0, $right_val$i = 0, $right_val$i12 = 0, $success = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $key$i9 = sp + 92|0;
 $_7$i10 = sp + 88|0;
 $left_val$i11 = sp + 84|0;
 $right_val$i12 = sp + 80|0;
 $_22$i13 = sp + 40|0;
 $key$i = sp + 76|0;
 $_7$i = sp + 72|0;
 $left_val$i = sp + 68|0;
 $right_val$i = sp + 64|0;
 $_22$i = sp + 16|0;
 $_27$i = sp;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$key$i>>2] = 0;
 $3 = (_pthread_key_create(($key$i|0),($2|0))|0);
 HEAP32[$_7$i>>2] = $3;
 HEAP32[$left_val$i>>2] = $_7$i;
 HEAP32[$right_val$i>>2] = 16060;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = $left_val$i;
  $6 = $right_val$i;
  HEAP32[$_27$i>>2] = $5;
  $7 = ((($_27$i)) + 4|0);
  HEAP32[$7>>2] = (335);
  $8 = ((($_27$i)) + 8|0);
  HEAP32[$8>>2] = $6;
  $9 = ((($_27$i)) + 12|0);
  HEAP32[$9>>2] = (335);
  HEAP32[$_22$i>>2] = 2496;
  $10 = ((($_22$i)) + 4|0);
  HEAP32[$10>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i$i = ((($_22$i)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i$i>>2] = 0;
  $11 = ((($_22$i)) + 16|0);
  HEAP32[$11>>2] = $_27$i;
  $12 = ((($_22$i)) + 20|0);
  HEAP32[$12>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17he05914c28470d251E($_22$i,2560);
  // unreachable;
 }
 $13 = HEAP32[$key$i>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = HEAP32[$1>>2]|0;
  HEAP32[$key$i9>>2] = 0;
  $16 = (_pthread_key_create(($key$i9|0),($15|0))|0);
  HEAP32[$_7$i10>>2] = $16;
  HEAP32[$left_val$i11>>2] = $_7$i10;
  HEAP32[$right_val$i12>>2] = 16060;
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = $left_val$i11;
   $19 = $right_val$i12;
   HEAP32[$_27$i>>2] = $18;
   $20 = ((($_27$i)) + 4|0);
   HEAP32[$20>>2] = (335);
   $21 = ((($_27$i)) + 8|0);
   HEAP32[$21>>2] = $19;
   $22 = ((($_27$i)) + 12|0);
   HEAP32[$22>>2] = (335);
   HEAP32[$_22$i13>>2] = 2496;
   $23 = ((($_22$i13)) + 4|0);
   HEAP32[$23>>2] = 3;
   $_6$sroa$0$0$$sroa_idx$i$i17 = ((($_22$i13)) + 8|0);
   HEAP32[$_6$sroa$0$0$$sroa_idx$i$i17>>2] = 0;
   $24 = ((($_22$i13)) + 16|0);
   HEAP32[$24>>2] = $_27$i;
   $25 = ((($_22$i13)) + 20|0);
   HEAP32[$25>>2] = 2;
   __ZN3std9panicking15begin_panic_fmt17he05914c28470d251E($_22$i13,2560);
   // unreachable;
  }
  $26 = HEAP32[$key$i9>>2]|0;
  (_pthread_key_delete(0)|0);
  $27 = ($26|0)==(0);
  if ($27) {
   __ZN3std9panicking11begin_panic17h8e1740626d0f752eE_234(8571,26,2644);
   // unreachable;
  } else {
   $key$028 = $26;
  }
 } else {
  $key$028 = $13;
 }
 $28 = HEAP32[$0>>2]|0;if (($28|0) == 0) HEAP32[$0>>2] = $key$028;
 $success = ($28|0)==(0);
 if ($success) {
  $_0$0 = $key$028;
  STACKTOP = sp;return ($_0$0|0);
 }
 (_pthread_key_delete(($key$028|0))|0);
 $_0$0 = $28;
 STACKTOP = sp;return ($_0$0|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hf9c9a4fd7b979535E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17hcd0b142db1905adfE($2,$1)|0);
 return ($3|0);
}
function __ZN4core6result13unwrap_failed17h3a93777545e30874E() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $msg = sp + 40|0;
 $_5 = sp + 16|0;
 $_10 = sp;
 HEAP32[$msg>>2] = 8724;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 24;
 $1 = HEAP32[830]|0;
 $2 = HEAP32[(3324)>>2]|0;
 $3 = $msg;
 $4 = $error;
 HEAP32[$_10>>2] = $3;
 $5 = ((($_10)) + 4|0);
 HEAP32[$5>>2] = (308);
 $6 = ((($_10)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($_10)) + 12|0);
 HEAP32[$7>>2] = (336);
 HEAP32[$_5>>2] = $1;
 $8 = ((($_5)) + 4|0);
 HEAP32[$8>>2] = $2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $9 = ((($_5)) + 16|0);
 HEAP32[$9>>2] = $_10;
 $10 = ((($_5)) + 20|0);
 HEAP32[$10>>2] = 2;
 __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_5,3308);
 // unreachable;
}
function __ZN3std6thread6Thread3new17ha1e86e68e2b3f796E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i$i$i$i = 0;
 var $_12$i$i$sroa_raw_idx$i$i = 0, $_13$i$i$i$i = 0, $_3$i$i$i = 0, $_3$i$i$i$i = 0, $_8$sroa$0$0$$sroa_idx$i = 0, $_8$sroa$0$sroa$4$0$_8$sroa$0$0$$sroa_cast39$sroa_idx76$i = 0, $_8$sroa$0$sroa$5$0$_8$sroa$0$0$$sroa_cast39$sroa_idx78$i = 0, $_8$sroa$4$0$$sroa_idx$i = 0, $_8$sroa$5$0$$sroa_idx$i = 0, $_8$sroa$6$0$$sroa_idx$i = 0, $_8$sroa$7$0$$sroa_idx$i = 0, $_8$sroa$8$0$$sroa_idx$i = 0, $_8$sroa$9$0$$sroa_idx$i = 0, $_9$i$i$i = 0, $attr$i$i$i = 0, $bytes$sroa$0$0$copyload$i$i$i$i = 0, $bytes$sroa$7$0$$sroa_idx24$i$i$i$i = 0, $bytes$sroa$7$0$$sroa_idx25$i$i$i$i = 0, $bytes$sroa$7$0$copyload$i$i$i$i = 0, $bytes$sroa$8$0$$sroa_idx30$i$i$i$i = 0;
 var $bytes$sroa$8$0$$sroa_idx31$i$i$i$i = 0, $bytes$sroa$8$0$copyload$i$i$i$i = 0, $cname$sroa$0$0 = 0, $cname$sroa$5$0 = 0, $e$sroa$4$0$$sroa_idx23$i$i$i = 0, $e$sroa$5$0$$sroa_idx25$i$i$i = 0, $e$sroa$6$0$$sroa_idx27$i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $name$sroa$0$sroa$0$0$copyload = 0, $name$sroa$0$sroa$4$0$copyload = 0, $name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast21$sroa_idx79 = 0, $name$sroa$0$sroa$5$0$copyload = 0, $name$sroa$0$sroa$5$0$name$sroa$0$0$$sroa_cast21$sroa_idx81 = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$0$1$ph = 0, $personalityslot$sroa$6$0 = 0, $personalityslot$sroa$6$1$ph = 0, $switch3tmp$i = 0, $switchtmp$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $attr$i$i$i = sp + 72|0;
 $_9$i$i$i = sp + 56|0;
 $_12$i$i$i$i = sp + 48|0;
 $_13$i$i$i$i = sp + 32|0;
 $_3$i$i$i$i = sp + 16|0;
 $_3$i$i$i = sp;
 $name$sroa$0$sroa$0$0$copyload = HEAP32[$0>>2]|0;
 $switch3tmp$i = ($name$sroa$0$sroa$0$0$copyload|0)==(0|0);
 L1: do {
  if ($switch3tmp$i) {
   $cname$sroa$0$0 = 0;$cname$sroa$5$0 = 0;
  } else {
   $name$sroa$0$sroa$5$0$name$sroa$0$0$$sroa_cast21$sroa_idx81 = ((($0)) + 8|0);
   $name$sroa$0$sroa$5$0$copyload = HEAP32[$name$sroa$0$sroa$5$0$name$sroa$0$0$$sroa_cast21$sroa_idx81>>2]|0;
   $name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast21$sroa_idx79 = ((($0)) + 4|0);
   $name$sroa$0$sroa$4$0$copyload = HEAP32[$name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast21$sroa_idx79>>2]|0;
   HEAP32[$_3$i$i$i$i>>2] = $name$sroa$0$sroa$0$0$copyload;
   $_8$sroa$0$sroa$4$0$_8$sroa$0$0$$sroa_cast39$sroa_idx76$i = ((($_3$i$i$i$i)) + 4|0);
   HEAP32[$_8$sroa$0$sroa$4$0$_8$sroa$0$0$$sroa_cast39$sroa_idx76$i>>2] = $name$sroa$0$sroa$4$0$copyload;
   $_8$sroa$0$sroa$5$0$_8$sroa$0$0$$sroa_cast39$sroa_idx78$i = ((($_3$i$i$i$i)) + 8|0);
   HEAP32[$_8$sroa$0$sroa$5$0$_8$sroa$0$0$$sroa_cast39$sroa_idx78$i>>2] = $name$sroa$0$sroa$5$0$copyload;
   __THREW__ = 0;
   invoke_vii(337,($_3$i$i$i|0),($_3$i$i$i$i|0));
   $1 = __THREW__; __THREW__ = 0;
   $2 = $1&1;
   do {
    if (!($2)) {
     $bytes$sroa$0$0$copyload$i$i$i$i = HEAP32[$_3$i$i$i>>2]|0;
     $bytes$sroa$7$0$$sroa_idx24$i$i$i$i = ((($_3$i$i$i)) + 4|0);
     $bytes$sroa$7$0$copyload$i$i$i$i = HEAP32[$bytes$sroa$7$0$$sroa_idx24$i$i$i$i>>2]|0;
     $bytes$sroa$8$0$$sroa_idx30$i$i$i$i = ((($_3$i$i$i)) + 8|0);
     $bytes$sroa$8$0$copyload$i$i$i$i = HEAP32[$bytes$sroa$8$0$$sroa_idx30$i$i$i$i>>2]|0;
     $3 = (_memchr($bytes$sroa$0$0$copyload$i$i$i$i,0,$bytes$sroa$8$0$copyload$i$i$i$i)|0);
     $4 = ($3|0)==(0|0);
     if (!($4)) {
      $5 = $3;
      $6 = $bytes$sroa$0$0$copyload$i$i$i$i;
      $7 = (($5) - ($6))|0;
      HEAP32[$_9$i$i$i>>2] = $7;
      $e$sroa$4$0$$sroa_idx23$i$i$i = ((($_9$i$i$i)) + 4|0);
      HEAP32[$e$sroa$4$0$$sroa_idx23$i$i$i>>2] = $6;
      $e$sroa$5$0$$sroa_idx25$i$i$i = ((($_9$i$i$i)) + 8|0);
      HEAP32[$e$sroa$5$0$$sroa_idx25$i$i$i>>2] = $bytes$sroa$7$0$copyload$i$i$i$i;
      $e$sroa$6$0$$sroa_idx27$i$i$i = ((($_9$i$i$i)) + 12|0);
      HEAP32[$e$sroa$6$0$$sroa_idx27$i$i$i>>2] = $bytes$sroa$8$0$copyload$i$i$i$i;
      __THREW__ = 0;
      invoke_viii(338,(8597|0),47,($_9$i$i$i|0));
      $8 = __THREW__; __THREW__ = 0;
      break;
     }
     HEAP32[$_13$i$i$i$i>>2] = $bytes$sroa$0$0$copyload$i$i$i$i;
     $bytes$sroa$7$0$$sroa_idx25$i$i$i$i = ((($_13$i$i$i$i)) + 4|0);
     HEAP32[$bytes$sroa$7$0$$sroa_idx25$i$i$i$i>>2] = $bytes$sroa$7$0$copyload$i$i$i$i;
     $bytes$sroa$8$0$$sroa_idx31$i$i$i$i = ((($_13$i$i$i$i)) + 8|0);
     HEAP32[$bytes$sroa$8$0$$sroa_idx31$i$i$i$i>>2] = $bytes$sroa$8$0$copyload$i$i$i$i;
     __THREW__ = 0;
     invoke_vii(339,($_12$i$i$i$i|0),($_13$i$i$i$i|0));
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if (!($10)) {
      $11 = HEAP32[$_12$i$i$i$i>>2]|0;
      $_12$i$i$sroa_raw_idx$i$i = ((($_12$i$i$i$i)) + 4|0);
      $12 = HEAP32[$_12$i$i$sroa_raw_idx$i$i>>2]|0;
      $cname$sroa$0$0 = $11;$cname$sroa$5$0 = $12;
      break L1;
     }
    }
   } while(0);
   $56 = ___cxa_find_matching_catch_2()|0;
   $57 = tempRet0;
   $personalityslot$sroa$0$0 = $56;$personalityslot$sroa$6$0 = $57;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 (_pthread_mutex_lock(((15936)|0))|0);
 $13 = 15928;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)==(-1);
 $20 = ($18|0)==(-1);
 $21 = $19 & $20;
 do {
  if ($21) {
   (_pthread_mutex_unlock(((15936)|0))|0);
   __THREW__ = 0;
   invoke_viii(312,(8644|0),55,(2780|0));
   $22 = __THREW__; __THREW__ = 0;
   label = 24;
  } else {
   $23 = (_i64Add(($15|0),($18|0),1,0)|0);
   $24 = tempRet0;
   $25 = 15928;
   $26 = $25;
   HEAP32[$26>>2] = $23;
   $27 = (($25) + 4)|0;
   $28 = $27;
   HEAP32[$28>>2] = $24;
   (_pthread_mutex_unlock(((15936)|0))|0);
   $29 = (___rust_allocate(24,8)|0);
   $30 = ($29|0)==(0|0);
   if ($30) {
    __THREW__ = 0;
    invoke_v(326);
    $31 = __THREW__; __THREW__ = 0;
    label = 24;
    break;
   }
   ;HEAP32[$29>>2]=HEAP32[(15960)>>2]|0;HEAP32[$29+4>>2]=HEAP32[(15960)+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[(15960)+8>>2]|0;HEAP32[$29+12>>2]=HEAP32[(15960)+12>>2]|0;HEAP32[$29+16>>2]=HEAP32[(15960)+16>>2]|0;HEAP32[$29+20>>2]=HEAP32[(15960)+20>>2]|0;
   $32 = $29;
   HEAP32[$attr$i$i$i>>2] = 0;
   (_pthread_mutexattr_init(($attr$i$i$i|0))|0);
   (_pthread_mutexattr_settype(($attr$i$i$i|0),0)|0);
   (_pthread_mutex_init(($29|0),($attr$i$i$i|0))|0);
   (_pthread_mutexattr_destroy(($attr$i$i$i|0))|0);
   $33 = (___rust_allocate(48,8)|0);
   $34 = ($33|0)==(0|0);
   do {
    if ($34) {
     __THREW__ = 0;
     invoke_v(326);
     $35 = __THREW__; __THREW__ = 0;
     $36 = ___cxa_find_matching_catch_2()|0;
     $37 = tempRet0;
     $eh$lpad$body$index2Z2D = $37;$eh$lpad$body$indexZ2D = $36;
    } else {
     dest=$33; src=(15984); stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     __THREW__ = 0;
     invoke_vi(340,($33|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $38 = ___cxa_find_matching_catch_2()|0;
      $39 = tempRet0;
      (_pthread_cond_destroy(($33|0))|0);
      ___rust_deallocate($33,48,8);
      $eh$lpad$body$index2Z2D = $39;$eh$lpad$body$indexZ2D = $38;
      break;
     }
     $42 = (___rust_allocate(40,8)|0);
     $43 = ($42|0)==(0|0);
     if (!($43)) {
      $47 = $33;
      HEAP32[$42>>2] = 1;
      $48 = ((($42)) + 4|0);
      HEAP32[$48>>2] = 1;
      $_8$sroa$0$0$$sroa_idx$i = ((($42)) + 8|0);
      $49 = $_8$sroa$0$0$$sroa_idx$i;
      $50 = $49;
      HEAP32[$50>>2] = $15;
      $51 = (($49) + 4)|0;
      $52 = $51;
      HEAP32[$52>>2] = $18;
      $_8$sroa$4$0$$sroa_idx$i = ((($42)) + 16|0);
      HEAP32[$_8$sroa$4$0$$sroa_idx$i>>2] = $cname$sroa$0$0;
      $_8$sroa$5$0$$sroa_idx$i = ((($42)) + 20|0);
      HEAP32[$_8$sroa$5$0$$sroa_idx$i>>2] = $cname$sroa$5$0;
      $_8$sroa$6$0$$sroa_idx$i = ((($42)) + 24|0);
      HEAP32[$_8$sroa$6$0$$sroa_idx$i>>2] = $32;
      $_8$sroa$7$0$$sroa_idx$i = ((($42)) + 28|0);
      HEAP32[$_8$sroa$7$0$$sroa_idx$i>>2] = 0;
      $_8$sroa$8$0$$sroa_idx$i = ((($42)) + 32|0);
      HEAP32[$_8$sroa$8$0$$sroa_idx$i>>2] = $47;
      $_8$sroa$9$0$$sroa_idx$i = ((($42)) + 36|0);
      HEAP32[$_8$sroa$9$0$$sroa_idx$i>>2] = 0;
      $53 = $42;
      STACKTOP = sp;return ($53|0);
     }
     __THREW__ = 0;
     invoke_v(326);
     $44 = __THREW__; __THREW__ = 0;
     $45 = ___cxa_find_matching_catch_2()|0;
     $46 = tempRet0;
     $personalityslot$sroa$0$0 = $45;$personalityslot$sroa$6$0 = $46;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
   } while(0);
   (_pthread_mutex_destroy(($29|0))|0);
   ___rust_deallocate($29,24,8);
   $personalityslot$sroa$0$1$ph = $eh$lpad$body$indexZ2D;$personalityslot$sroa$6$1$ph = $eh$lpad$body$index2Z2D;
  }
 } while(0);
 if ((label|0) == 24) {
  $58 = ___cxa_find_matching_catch_2()|0;
  $59 = tempRet0;
  $personalityslot$sroa$0$1$ph = $58;$personalityslot$sroa$6$1$ph = $59;
 }
 $54 = $cname$sroa$0$0;
 $switchtmp$i = ($cname$sroa$0$0|0)==(0);
 if ($switchtmp$i) {
  $personalityslot$sroa$0$0 = $personalityslot$sroa$0$1$ph;$personalityslot$sroa$6$0 = $personalityslot$sroa$6$1$ph;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 HEAP8[$54>>0] = 0;
 $55 = ($cname$sroa$5$0|0)==(0);
 if ($55) {
  $personalityslot$sroa$0$0 = $personalityslot$sroa$0$1$ph;$personalityslot$sroa$6$0 = $personalityslot$sroa$6$1$ph;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 ___rust_deallocate($54,$cname$sroa$5$0,1);
 $personalityslot$sroa$0$0 = $personalityslot$sroa$0$1$ph;$personalityslot$sroa$6$0 = $personalityslot$sroa$6$1$ph;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
 return (0)|0;
}
function __ZN4core6result13unwrap_failed17hdffd96b76ab17f0aE_245($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0;
 var $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, $not$$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $msg = sp + 56|0;
 $error = sp + 40|0;
 $_5 = sp + 16|0;
 $_10 = sp;
 HEAP32[$msg>>2] = $0;
 $3 = ((($msg)) + 4|0);
 HEAP32[$3>>2] = $1;
 ;HEAP32[$error>>2]=HEAP32[$2>>2]|0;HEAP32[$error+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$error+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$error+12>>2]=HEAP32[$2+12>>2]|0;
 $4 = HEAP32[830]|0;
 $5 = HEAP32[(3324)>>2]|0;
 $6 = $msg;
 $7 = $error;
 HEAP32[$_10>>2] = $6;
 $8 = ((($_10)) + 4|0);
 HEAP32[$8>>2] = (308);
 $9 = ((($_10)) + 8|0);
 HEAP32[$9>>2] = $7;
 $10 = ((($_10)) + 12|0);
 HEAP32[$10>>2] = (284);
 HEAP32[$_5>>2] = $4;
 $11 = ((($_5)) + 4|0);
 HEAP32[$11>>2] = $5;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $12 = ((($_5)) + 16|0);
 HEAP32[$12>>2] = $_10;
 $13 = ((($_5)) + 20|0);
 HEAP32[$13>>2] = 2;
 __THREW__ = 0;
 invoke_vii(100,($_5|0),(3308|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = ___cxa_find_matching_catch_2()|0;
 $16 = tempRet0;
 $17 = ((($error)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $not$$i$i$i$i$i = ($18|0)==(0);
 if ($not$$i$i$i$i$i) {
  ___resumeException($15|0);
  // unreachable;
 }
 $19 = ((($error)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 ___rust_deallocate($20,$18,1);
 ___resumeException($15|0);
 // unreachable;
}
function __ZN3std3ffi5c_str7CString18from_vec_unchecked17haae07d4f9c1dd6deE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_8 = 0, $not$$i$i$i$i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $v = sp + 24|0;
 $_8 = sp + 8|0;
 ;HEAP32[$v>>2]=HEAP32[$1>>2]|0;HEAP32[$v+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$v+8>>2]=HEAP32[$1+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(341,($v|0),1);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $6 = ((($v)) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($v)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7|0)==($9|0);
   if ($10) {
    __THREW__ = 0;
    invoke_vi(342,($v|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     break;
    }
    $$pre$i = HEAP32[$6>>2]|0;
    $15 = $$pre$i;
   } else {
    $15 = $7;
   }
   $13 = HEAP32[$v>>2]|0;
   $14 = (($13) + ($15)|0);
   HEAP8[$14>>0] = 0;
   $16 = (($15) + 1)|0;
   HEAP32[$6>>2] = $16;
   ;HEAP32[$_8>>2]=HEAP32[$v>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$v+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$v+8>>2]|0;
   __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16into_boxed_slice17hc3b8634a4cf5f247E($2,$_8);
   $$sreg$field = HEAP32[$2>>2]|0;
   $$sreg$index1 = ((($2)) + 4|0);
   $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
   HEAP32[$0>>2] = $$sreg$field;
   $17 = ((($0)) + 4|0);
   HEAP32[$17>>2] = $$sreg$field2;
   STACKTOP = sp;return;
  }
 } while(0);
 $5 = ___cxa_find_matching_catch_2()|0;
 $18 = tempRet0;
 $19 = ((($v)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $not$$i$i$i$i = ($20|0)==(0);
 if ($not$$i$i$i$i) {
  ___resumeException($5|0);
  // unreachable;
 }
 $21 = HEAP32[$v>>2]|0;
 ___rust_deallocate($21,$20,1);
 ___resumeException($5|0);
 // unreachable;
}
function __ZN3std3sys3imp7condvar7Condvar4init17h8bd7ed7524ba72fdE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_127 = 0, $_132 = 0, $_20 = 0, $_25 = 0, $_55 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i26 = 0, $_6$sroa$0$0$$sroa_idx$i27 = 0, $_6$sroa$0$0$$sroa_idx$i28 = 0, $_60 = 0, $_92 = 0, $_97 = 0, $attr = 0, $left_val = 0, $left_val2 = 0, $left_val5 = 0, $left_val8 = 0, $r = 0, $r1 = 0, $r4 = 0;
 var $r7 = 0, $right_val = 0, $right_val3 = 0, $right_val6 = 0, $right_val9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $attr = sp + 160|0;
 $r = sp + 208|0;
 $left_val = sp + 204|0;
 $right_val = sp + 200|0;
 $_20 = sp + 136|0;
 $_25 = sp + 120|0;
 $r1 = sp + 196|0;
 $left_val2 = sp + 192|0;
 $right_val3 = sp + 188|0;
 $_55 = sp + 96|0;
 $_60 = sp + 80|0;
 $r4 = sp + 184|0;
 $left_val5 = sp + 180|0;
 $right_val6 = sp + 176|0;
 $_92 = sp + 56|0;
 $_97 = sp + 40|0;
 $r7 = sp + 172|0;
 $left_val8 = sp + 168|0;
 $right_val9 = sp + 164|0;
 $_127 = sp + 16|0;
 $_132 = sp;
 HEAP32[$attr>>2] = 0;
 $1 = (_pthread_condattr_init(($attr|0))|0);
 HEAP32[$r>>2] = $1;
 HEAP32[$left_val>>2] = $r;
 HEAP32[$right_val>>2] = 16060;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = $left_val;
  $4 = $right_val;
  HEAP32[$_25>>2] = $3;
  $5 = ((($_25)) + 4|0);
  HEAP32[$5>>2] = (335);
  $6 = ((($_25)) + 8|0);
  HEAP32[$6>>2] = $4;
  $7 = ((($_25)) + 12|0);
  HEAP32[$7>>2] = (335);
  HEAP32[$_20>>2] = 2496;
  $8 = ((($_20)) + 4|0);
  HEAP32[$8>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i = ((($_20)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $9 = ((($_20)) + 16|0);
  HEAP32[$9>>2] = $_25;
  $10 = ((($_20)) + 20|0);
  HEAP32[$10>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17he05914c28470d251E($_20,2620);
  // unreachable;
 }
 $11 = (_pthread_condattr_setclock(($attr|0),1)|0);
 HEAP32[$r1>>2] = $11;
 HEAP32[$left_val2>>2] = $r1;
 HEAP32[$right_val3>>2] = 16060;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = $left_val2;
  $14 = $right_val3;
  HEAP32[$_60>>2] = $13;
  $15 = ((($_60)) + 4|0);
  HEAP32[$15>>2] = (335);
  $16 = ((($_60)) + 8|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($_60)) + 12|0);
  HEAP32[$17>>2] = (335);
  HEAP32[$_55>>2] = 2496;
  $18 = ((($_55)) + 4|0);
  HEAP32[$18>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i26 = ((($_55)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i26>>2] = 0;
  $19 = ((($_55)) + 16|0);
  HEAP32[$19>>2] = $_60;
  $20 = ((($_55)) + 20|0);
  HEAP32[$20>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17he05914c28470d251E($_55,2608);
  // unreachable;
 }
 $21 = (_pthread_cond_init(($0|0),($attr|0))|0);
 HEAP32[$r4>>2] = $21;
 HEAP32[$left_val5>>2] = $r4;
 HEAP32[$right_val6>>2] = 16060;
 $22 = ($21|0)==(0);
 if (!($22)) {
  $23 = $left_val5;
  $24 = $right_val6;
  HEAP32[$_97>>2] = $23;
  $25 = ((($_97)) + 4|0);
  HEAP32[$25>>2] = (335);
  $26 = ((($_97)) + 8|0);
  HEAP32[$26>>2] = $24;
  $27 = ((($_97)) + 12|0);
  HEAP32[$27>>2] = (335);
  HEAP32[$_92>>2] = 2496;
  $28 = ((($_92)) + 4|0);
  HEAP32[$28>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i27 = ((($_92)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i27>>2] = 0;
  $29 = ((($_92)) + 16|0);
  HEAP32[$29>>2] = $_97;
  $30 = ((($_92)) + 20|0);
  HEAP32[$30>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17he05914c28470d251E($_92,2596);
  // unreachable;
 }
 $31 = (_pthread_condattr_destroy(($attr|0))|0);
 HEAP32[$r7>>2] = $31;
 HEAP32[$left_val8>>2] = $r7;
 HEAP32[$right_val9>>2] = 16060;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 } else {
  $33 = $left_val8;
  $34 = $right_val9;
  HEAP32[$_132>>2] = $33;
  $35 = ((($_132)) + 4|0);
  HEAP32[$35>>2] = (335);
  $36 = ((($_132)) + 8|0);
  HEAP32[$36>>2] = $34;
  $37 = ((($_132)) + 12|0);
  HEAP32[$37>>2] = (335);
  HEAP32[$_127>>2] = 2496;
  $38 = ((($_127)) + 4|0);
  HEAP32[$38>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i28 = ((($_127)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i28>>2] = 0;
  $39 = ((($_127)) + 16|0);
  HEAP32[$39>>2] = $_132;
  $40 = ((($_127)) + 20|0);
  HEAP32[$40>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17he05914c28470d251E($_127,2584);
  // unreachable;
 }
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_13reserve_exact17h51bf2ab77942e360E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17he4838b1eef3c5645E(8699,17);
  // unreachable;
 }
 $8 = ($$arith|0)<(0);
 if ($8) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 }
 $9 = ($5|0)==(0);
 if ($9) {
  $10 = (___rust_allocate($$arith,1)|0);
  $ptr$0$i = $10;
 } else {
  $11 = HEAP32[$0>>2]|0;
  $12 = (___rust_reallocate($11,$5,$$arith,1)|0);
  $ptr$0$i = $12;
 }
 $13 = ($ptr$0$i|0)==(0|0);
 if ($13) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 HEAP32[$0>>2] = $ptr$0$i;
 HEAP32[$4>>2] = $$arith;
 return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17ha8e0a9fbd8b773bdE_246($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13$sroa$0$0 = 0, $_13$sroa$5$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $8 = (___rust_allocate(4,1)|0);
   $_13$sroa$0$0 = 4;$_13$sroa$5$0 = $8;
  } else {
   $4 = $2 << 1;
   $5 = ($4|0)<(0);
   if ($5) {
    __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
    // unreachable;
   } else {
    $6 = HEAP32[$0>>2]|0;
    $7 = (___rust_reallocate($6,$2,$4,1)|0);
    $_13$sroa$0$0 = $4;$_13$sroa$5$0 = $7;
    break;
   }
  }
 } while(0);
 $9 = ($_13$sroa$5$0|0)==(0|0);
 if ($9) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 } else {
  HEAP32[$0>>2] = $_13$sroa$5$0;
  HEAP32[$1>>2] = $_13$sroa$0$0;
  return;
 }
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16into_boxed_slice17hc3b8634a4cf5f247E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i = 0, $not$$i$i$i$i15 = 0, $retVal$index1 = 0, $self$sroa$0$0$$sroa_cast28$sroa_idx = 0, $self$sroa$0$0$copyload46 = 0, $self$sroa$0$0$copyload48 = 0;
 var $self$sroa$0$sroa$0$0 = 0, $self$sroa$0$sroa$10$0 = 0, $self$sroa$13$0$$sroa_idx39 = 0, $self$sroa$13$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $self$sroa$0$0$copyload46 = HEAP32[$0>>2]|0;
 $self$sroa$0$0$$sroa_cast28$sroa_idx = ((($0)) + 4|0);
 $self$sroa$0$0$copyload48 = HEAP32[$self$sroa$0$0$$sroa_cast28$sroa_idx>>2]|0;
 $self$sroa$13$0$$sroa_idx39 = ((($0)) + 8|0);
 $self$sroa$13$0$copyload = HEAP32[$self$sroa$13$0$$sroa_idx39>>2]|0;
 $1 = ($self$sroa$0$0$copyload48>>>0)<($self$sroa$13$0$copyload>>>0);
 L1: do {
  if ($1) {
   __THREW__ = 0;
   invoke_vi(86,(3180|0));
   $2 = __THREW__; __THREW__ = 0;
  } else {
   $3 = ($self$sroa$13$0$copyload|0)==(0);
   do {
    if ($3) {
     $not$$i$i$i$i = ($self$sroa$0$0$copyload48|0)==(0);
     if ($not$$i$i$i$i) {
      $self$sroa$0$sroa$0$0 = 1;$self$sroa$0$sroa$10$0 = 0;
     } else {
      $4 = $self$sroa$0$0$copyload46;
      ___rust_deallocate($4,$self$sroa$0$0$copyload48,1);
      $self$sroa$0$sroa$0$0 = 1;$self$sroa$0$sroa$10$0 = 0;
     }
    } else {
     $5 = ($self$sroa$0$0$copyload48|0)==($self$sroa$13$0$copyload|0);
     if ($5) {
      $self$sroa$0$sroa$0$0 = $self$sroa$0$0$copyload46;$self$sroa$0$sroa$10$0 = $self$sroa$0$0$copyload48;
     } else {
      $6 = $self$sroa$0$0$copyload46;
      $7 = (___rust_reallocate($6,$self$sroa$0$0$copyload48,$self$sroa$13$0$copyload,1)|0);
      $8 = ($7|0)==(0|0);
      if ($8) {
       __THREW__ = 0;
       invoke_v(326);
       $9 = __THREW__; __THREW__ = 0;
       break L1;
      } else {
       $10 = $7;
       $self$sroa$0$sroa$0$0 = $10;$self$sroa$0$sroa$10$0 = $self$sroa$13$0$copyload;
       break;
      }
     }
    }
   } while(0);
   $12 = $self$sroa$0$sroa$0$0;
   HEAP32[$retVal>>2] = $12;
   $retVal$index1 = ((($retVal)) + 4|0);
   HEAP32[$retVal$index1>>2] = $self$sroa$0$sroa$10$0;
   return;
  }
 } while(0);
 $11 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $not$$i$i$i$i15 = ($self$sroa$0$0$copyload48|0)==(0);
 if ($not$$i$i$i$i15) {
  ___resumeException($11|0);
  // unreachable;
 }
 $14 = $self$sroa$0$0$copyload46;
 ___rust_deallocate($14,$self$sroa$0$0$copyload48,1);
 ___resumeException($11|0);
 // unreachable;
}
function __ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17h805872435922bd21E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_16 = 0, $_22 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $builder = sp;
 $_16 = sp + 16|0;
 $_22 = sp + 12|0;
 $2 = ((($0)) + 4|0);
 __ZN4core3fmt8builders15debug_tuple_new17hf289acaae08eb593E($builder,$1,8716,8);
 HEAP32[$_16>>2] = $0;
 (__ZN4core3fmt8builders10DebugTuple5field17hfd6be2ee9fdea117E($builder,$_16,256)|0);
 HEAP32[$_22>>2] = $2;
 (__ZN4core3fmt8builders10DebugTuple5field17hfd6be2ee9fdea117E($builder,$_22,272)|0);
 $3 = (__ZN4core3fmt8builders10DebugTuple6finish17hfc15bc664174c0e7E($builder)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0ae42faa4311fac1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_8$i$i = 0, $entry$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $entry$i$i$i = sp + 8|0;
 $_8$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 __ZN4core3fmt8builders14debug_list_new17hfb5edf4ccfed274fE($_8$i$i,$1);
 $6 = (($3) + ($5)|0);
 $7 = ($5|0)==(0);
 if (!($7)) {
  $9 = $3;
  while(1) {
   $8 = ((($9)) + 1|0);
   HEAP32[$entry$i$i$i>>2] = $9;
   (__ZN4core3fmt8builders9DebugList5entry17h6afdc9252b3c4f64E($_8$i$i,$entry$i$i$i,288)|0);
   $10 = ($8|0)==($6|0);
   if ($10) {
    break;
   } else {
    $9 = $8;
   }
  }
 }
 $11 = (__ZN4core3fmt8builders9DebugList6finish17had71afb3be90762eE($_8$i$i)|0);
 STACKTOP = sp;return ($11|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h4e8077f5d1a454a5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17h2cfb94c942bd9689E($2,$1)|0);
 return ($3|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h9226ae6e0713ead4E_250($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17h3a658edfdb739efbE($2,$1)|0);
 return ($3|0);
}
function __ZN3std3ffi5c_str7CString3new17h3489eb30ab2a7039E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i = 0, $_13$i = 0, $_3$sroa$4$0$copyload = 0, $_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast8$sroa_idx$i = 0, $_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast8$sroa_idx42$i = 0;
 var $_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast8$sroa_idx44$i = 0, $bytes$sroa$7$0$$sroa_idx25$i = 0, $bytes$sroa$8$0$$sroa_idx31$i = 0, $not$$i$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i$i = 0, $vector$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_12$i = sp + 32|0;
 $_13$i = sp + 16|0;
 $vector$i$i$i$i = sp;
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 }
 $5 = ($2|0)==(0);
 if ($5) {
  $ptr$0$i$i$i$i$i$i = (1);
 } else {
  $6 = (___rust_allocate($2,1)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   __ZN5alloc3oom3oom17h9c08827c36eab673E();
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i$i = $6;
  }
 }
 $8 = $ptr$0$i$i$i$i$i$i;
 HEAP32[$vector$i$i$i$i>>2] = $8;
 $9 = ((($vector$i$i$i$i)) + 4|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($vector$i$i$i$i)) + 8|0);
 HEAP32[$10>>2] = 0;
 __THREW__ = 0;
 invoke_vii(327,($vector$i$i$i$i|0),($2|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $13 = tempRet0;
  $14 = HEAP32[$9>>2]|0;
  $not$$i$i$i$i$i$i$i$i = ($14|0)==(0);
  if ($not$$i$i$i$i$i$i$i$i) {
   ___resumeException($4|0);
   // unreachable;
  }
  $15 = HEAP32[$vector$i$i$i$i>>2]|0;
  ___rust_deallocate($15,$14,1);
  ___resumeException($4|0);
  // unreachable;
 }
 $16 = HEAP32[$10>>2]|0;
 $17 = (($16) + ($2))|0;
 HEAP32[$10>>2] = $17;
 $18 = HEAP32[$vector$i$i$i$i>>2]|0;
 $19 = (($18) + ($16)|0);
 _memcpy(($19|0),($1|0),($2|0))|0;
 $_3$sroa$4$0$copyload = HEAP32[$9>>2]|0;
 $20 = (_memchr($18,0,$17)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  HEAP32[$_13$i>>2] = $18;
  $bytes$sroa$7$0$$sroa_idx25$i = ((($_13$i)) + 4|0);
  HEAP32[$bytes$sroa$7$0$$sroa_idx25$i>>2] = $_3$sroa$4$0$copyload;
  $bytes$sroa$8$0$$sroa_idx31$i = ((($_13$i)) + 8|0);
  HEAP32[$bytes$sroa$8$0$$sroa_idx31$i>>2] = $17;
  __ZN3std3ffi5c_str7CString18from_vec_unchecked17haae07d4f9c1dd6deE($_12$i,$_13$i);
  $22 = ((($0)) + 4|0);
  $23 = $_12$i;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $22;
  $30 = $29;
  HEAP32[$30>>2] = $25;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = $28;
  $$sink$i = 0;
  HEAP32[$0>>2] = $$sink$i;
  STACKTOP = sp;return;
 } else {
  $33 = $20;
  $34 = $18;
  $35 = (($33) - ($34))|0;
  $36 = ((($0)) + 4|0);
  HEAP32[$36>>2] = $35;
  $_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast8$sroa_idx$i = ((($0)) + 8|0);
  HEAP32[$_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast8$sroa_idx$i>>2] = $18;
  $_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast8$sroa_idx42$i = ((($0)) + 12|0);
  HEAP32[$_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast8$sroa_idx42$i>>2] = $_3$sroa$4$0$copyload;
  $_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast8$sroa_idx44$i = ((($0)) + 16|0);
  HEAP32[$_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast8$sroa_idx44$i>>2] = $17;
  $$sink$i = 1;
  HEAP32[$0>>2] = $$sink$i;
  STACKTOP = sp;return;
 }
}
function __ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17hdc43db606f8dd8f0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4$i$i$i = 0, $_5$sroa$4$0$$sroa_idx5$i = 0;
 var $_5$sroa$4$i = 0, $_5$sroa$48$0$$sroa_idx9$i = 0, $not$$i$i$i$i$i = 0, $not$$i$i$i$i$i12 = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$i$sroa$4$i = sp + 31|0;
 $_5$sroa$4$i = sp + 28|0;
 $x$sroa$0$i$i$i$i$i = sp + 16|0;
 $_4$i$i$i = sp;
 __THREW__ = 0;
 invoke_viii(330,($_4$i$i$i|0),(8787|0),33);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
   $4 = (___rust_allocate(12,4)|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    __THREW__ = 0;
    invoke_v(326);
    $6 = __THREW__; __THREW__ = 0;
    break;
   }
   ;HEAP32[$4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$4+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
   $7 = (___rust_allocate(12,4)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    __THREW__ = 0;
    invoke_v(326);
    $9 = __THREW__; __THREW__ = 0;
    break;
   }
   HEAP8[$7>>0] = 11;
   $x$i$sroa$4$0$$sroa_raw_idx$i = ((($7)) + 1|0);
   ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
   $x$i$sroa$5$0$$sroa_idx$i = ((($7)) + 4|0);
   HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $4;
   $x$i$sroa$6$0$$sroa_idx$i = ((($7)) + 8|0);
   HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 184;
   HEAP8[$0>>0] = 2;
   $_5$sroa$4$0$$sroa_idx5$i = ((($0)) + 1|0);
   ;HEAP8[$_5$sroa$4$0$$sroa_idx5$i>>0]=HEAP8[$_5$sroa$4$i>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_idx5$i+1>>0]=HEAP8[$_5$sroa$4$i+1>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_idx5$i+2>>0]=HEAP8[$_5$sroa$4$i+2>>0]|0;
   $_5$sroa$48$0$$sroa_idx9$i = ((($0)) + 4|0);
   HEAP32[$_5$sroa$48$0$$sroa_idx9$i>>2] = $7;
   $11 = ((($1)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $not$$i$i$i$i$i = ($12|0)==(0);
   if ($not$$i$i$i$i$i) {
    STACKTOP = sp;return;
   }
   $13 = ((($1)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   ___rust_deallocate($14,$12,1);
   STACKTOP = sp;return;
  }
 } while(0);
 $10 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $not$$i$i$i$i$i12 = ($17|0)==(0);
 if ($not$$i$i$i$i$i12) {
  ___resumeException($10|0);
  // unreachable;
 }
 $18 = ((($1)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 ___rust_deallocate($19,$17,1);
 ___resumeException($10|0);
 // unreachable;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h994e49272e95c367E_252($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i = 0, $ptr$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17he4838b1eef3c5645E(8699,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $_0$0$sroa$speculated$i$i$i = $9 ? $$arith : $8;
 $10 = ($_0$0$sroa$speculated$i$i$i|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_allocate($_0$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $12;
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = (___rust_reallocate($13,$5,$_0$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $14;
 }
 $15 = ($ptr$0$i|0)==(0|0);
 if ($15) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 HEAP32[$0>>2] = $ptr$0$i;
 HEAP32[$4>>2] = $_0$0$sroa$speculated$i$i$i;
 return;
}
function __ZN3std3env7_var_os28__u7b__u7b_closure_u7d__u7d_17h914ceefd6412b54dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_6 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $cond$i$i = 0, $e = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $e = sp + 40|0;
 $_6 = sp + 16|0;
 $_11 = sp;
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $e;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = $0;
 $13 = $e;
 HEAP32[$_11>>2] = $12;
 $14 = ((($_11)) + 4|0);
 HEAP32[$14>>2] = (343);
 $15 = ((($_11)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = ((($_11)) + 12|0);
 HEAP32[$16>>2] = (344);
 HEAP32[$_6>>2] = 3004;
 $17 = ((($_6)) + 4|0);
 HEAP32[$17>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_6)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $18 = ((($_6)) + 16|0);
 HEAP32[$18>>2] = $_11;
 $19 = ((($_6)) + 20|0);
 HEAP32[$19>>2] = 2;
 __THREW__ = 0;
 invoke_vii(345,($_6|0),(2768|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = ___cxa_find_matching_catch_2()|0;
 $22 = tempRet0;
 $23 = HEAP8[$e>>0]|0;
 $cond$i$i = ($23<<24>>24)==(2);
 if (!($cond$i$i)) {
  ___resumeException($21|0);
  // unreachable;
 }
 $24 = ((($e)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($25)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 FUNCTION_TABLE_vi[$30 & 511]($27);
 $31 = HEAP32[$28>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $35 = ((($31)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  ___rust_deallocate($27,$33,$36);
 }
 ___rust_deallocate($25,12,4);
 ___resumeException($21|0);
 // unreachable;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h8770708acb05a58eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN65__LT_std__sys__imp__os_str__Slice_u20_as_u20_core__fmt__Debug_GT_3fmt17he5930b1b9f730dd3E($2,$4,$1)|0);
 return ($5|0);
}
function __ZN65__LT_std__sys__imp__os_str__Slice_u20_as_u20_core__fmt__Debug_GT_3fmt17he5930b1b9f730dd3E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i16 = 0, $_6 = 0, $not$$i$i$i$i$i$i = 0;
 var $not$$i$i$i$i$i$i12 = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_6 = sp;
 __ZN11collections6string6String15from_utf8_lossy17hb29836f0050bfcdeE($_6,$0,$1);
 $3 = HEAP32[$_6>>2]|0;
 $switch$i = ($3|0)==(1);
 $4 = ((($_6)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 if (!($switch$i)) {
  $6 = ((($_6)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h51cb268862c67feeE($5,$7,$2)|0);
  $_0$sroa$0$0$i16 = $8;
  STACKTOP = sp;return ($_0$sroa$0$0$i16|0);
 }
 $9 = ((($_6)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_iiii(346,($5|0),($10|0),($2|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  $18 = ((($_6)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $not$$i$i$i$i$i$i12 = ($19|0)==(0);
  if ($not$$i$i$i$i$i$i12) {
   ___resumeException($14|0);
   // unreachable;
  }
  ___rust_deallocate($5,$19,1);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $15 = ((($_6)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $not$$i$i$i$i$i$i = ($16|0)==(0);
  if ($not$$i$i$i$i$i$i) {
   $_0$sroa$0$0$i16 = $11;
   STACKTOP = sp;return ($_0$sroa$0$0$i16|0);
  }
  ___rust_deallocate($5,$16,1);
  $_0$sroa$0$0$i16 = $11;
  STACKTOP = sp;return ($_0$sroa$0$0$i16|0);
 }
 return (0)|0;
}
function __ZN4drop17he16c838cc426c8f0E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $not$$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $not$$i$i$i$i = ($2|0)==(0);
 if ($not$$i$i$i$i) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 ___rust_deallocate($3,$2,1);
 return;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h9a21139f143928f8E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (42518155);
 return 1745231425;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0f176071ce95e943E_254($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h994e49272e95c367E_252($3,$2);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2))|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$3>>2]|0;
 $8 = (($7) + ($5)|0);
 _memcpy(($8|0),($1|0),($2|0))|0;
 return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h306a512c97fa840aE_255($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_19$i$i = 0, $_19$i$i$1$_19$i$1$$sroa_raw_idx = 0, $_19$i$i$1$_19$i$1$$sroa_raw_idx7 = 0, $_19$i$i$1$_19$i$1$$sroa_raw_idx9 = 0, $_19$i$i$2$_19$i$2$$sroa_raw_idx = 0, $_19$i$i$2$_19$i$2$$sroa_raw_idx11 = 0;
 var $_19$i$i$3$_19$i$3$$sroa_raw_idx = 0, $len$0$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_19$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($1>>>0)<(128);
 if ($3) {
  $4 = $1&255;
  $5 = ((($2)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($2)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)==($8|0);
  if ($9) {
   __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17ha8e0a9fbd8b773bdE_246($2);
   $$pre$i$i$i = HEAP32[$5>>2]|0;
   $12 = $$pre$i$i$i;
  } else {
   $12 = $6;
  }
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($12)|0);
  HEAP8[$11>>0] = $4;
  $13 = HEAP32[$5>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$5>>2] = $14;
  STACKTOP = sp;return 0;
 }
 HEAP32[$_19$i$i>>2] = 0;
 $15 = ($1>>>0)<(2048);
 do {
  if ($15) {
   $16 = $1 >>> 6;
   $17 = $16 & 31;
   $18 = $17&255;
   $19 = $18 | -64;
   HEAP8[$_19$i$i>>0] = $19;
   $20 = $1 & 63;
   $21 = $20&255;
   $22 = $21 | -128;
   $_19$i$i$1$_19$i$1$$sroa_raw_idx9 = ((($_19$i$i)) + 1|0);
   HEAP8[$_19$i$i$1$_19$i$1$$sroa_raw_idx9>>0] = $22;
   $len$0$i$i$i$i = 2;
  } else {
   $23 = ($1>>>0)<(65536);
   if ($23) {
    $24 = $1 >>> 12;
    $25 = $24 & 15;
    $26 = $25&255;
    $27 = $26 | -32;
    HEAP8[$_19$i$i>>0] = $27;
    $28 = $1 >>> 6;
    $29 = $28 & 63;
    $30 = $29&255;
    $31 = $30 | -128;
    $_19$i$i$1$_19$i$1$$sroa_raw_idx7 = ((($_19$i$i)) + 1|0);
    HEAP8[$_19$i$i$1$_19$i$1$$sroa_raw_idx7>>0] = $31;
    $32 = $1 & 63;
    $33 = $32&255;
    $34 = $33 | -128;
    $_19$i$i$2$_19$i$2$$sroa_raw_idx11 = ((($_19$i$i)) + 2|0);
    HEAP8[$_19$i$i$2$_19$i$2$$sroa_raw_idx11>>0] = $34;
    $len$0$i$i$i$i = 3;
    break;
   } else {
    $35 = $1 >>> 18;
    $36 = $35 & 7;
    $37 = $36&255;
    $38 = $37 | -16;
    HEAP8[$_19$i$i>>0] = $38;
    $39 = $1 >>> 12;
    $40 = $39 & 63;
    $41 = $40&255;
    $42 = $41 | -128;
    $_19$i$i$1$_19$i$1$$sroa_raw_idx = ((($_19$i$i)) + 1|0);
    HEAP8[$_19$i$i$1$_19$i$1$$sroa_raw_idx>>0] = $42;
    $43 = $1 >>> 6;
    $44 = $43 & 63;
    $45 = $44&255;
    $46 = $45 | -128;
    $_19$i$i$2$_19$i$2$$sroa_raw_idx = ((($_19$i$i)) + 2|0);
    HEAP8[$_19$i$i$2$_19$i$2$$sroa_raw_idx>>0] = $46;
    $47 = $1 & 63;
    $48 = $47&255;
    $49 = $48 | -128;
    $_19$i$i$3$_19$i$3$$sroa_raw_idx = ((($_19$i$i)) + 3|0);
    HEAP8[$_19$i$i$3$_19$i$3$$sroa_raw_idx>>0] = $49;
    $len$0$i$i$i$i = 4;
    break;
   }
  }
 } while(0);
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h994e49272e95c367E_252($2,$len$0$i$i$i$i);
 $50 = ((($2)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($len$0$i$i$i$i))|0;
 HEAP32[$50>>2] = $52;
 $53 = HEAP32[$2>>2]|0;
 $54 = (($53) + ($51)|0);
 _memcpy(($54|0),($_19$i$i|0),($len$0$i$i$i$i|0))|0;
 STACKTOP = sp;return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h9148321c12e0e9b4E_256($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 24|0;
 $_10$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17he0deec3411c715a1E($_8$i,88,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3std3sys3imp2os12error_string17h8f92c6903d4d3754E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_24 = 0, $buf = 0, $self$sroa$0$0$copyload$i = 0, $self$sroa$6$0$$sroa_idx19$i = 0, $self$sroa$6$0$copyload$i = 0, $self$sroa$8$0$$sroa_idx21$i = 0, $self$sroa$8$0$copyload$i = 0, $switch2$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $buf = sp + 16|0;
 $_24 = sp;
 dest=$buf; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = (_strerror_r($1,$buf,128)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN3std9panicking11begin_panic17h8e1740626d0f752eE_234(9218,18,2572);
  // unreachable;
 }
 $4 = (_strlen($buf)|0);
 $5 = ($4|0)==(-1);
 if ($5) {
  __ZN4core5slice20slice_index_len_fail17h94caf57088443fc0E(-1,0);
  // unreachable;
 }
 __ZN4core3str9from_utf817he0e1c9036739d488E($_24,$buf,$4);
 $self$sroa$0$0$copyload$i = HEAP32[$_24>>2]|0;
 $self$sroa$6$0$$sroa_idx19$i = ((($_24)) + 4|0);
 $self$sroa$6$0$copyload$i = HEAP32[$self$sroa$6$0$$sroa_idx19$i>>2]|0;
 $switch2$i = ($self$sroa$0$0$copyload$i|0)==(0);
 if ($switch2$i) {
  $self$sroa$8$0$$sroa_idx21$i = ((($_24)) + 8|0);
  $self$sroa$8$0$copyload$i = HEAP32[$self$sroa$8$0$$sroa_idx21$i>>2]|0;
  $6 = $self$sroa$6$0$copyload$i;
  __ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h77a7452d11da03e2E($0,$6,$self$sroa$8$0$copyload$i);
  STACKTOP = sp;return;
 } else {
  __ZN4core6result13unwrap_failed17hec8642c937e35d08E_258($self$sroa$6$0$copyload$i);
  // unreachable;
 }
}
function __ZN66__LT_collections__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17h7aa04dea3e23c901E_257($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hded13da3919e24b6E($2,$4,$1)|0);
 return ($5|0);
}
function __ZN4core6result13unwrap_failed17hec8642c937e35d08E_258($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $msg = sp + 48|0;
 $error = sp + 40|0;
 $_5 = sp + 16|0;
 $_10 = sp;
 HEAP32[$msg>>2] = 8430;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 HEAP32[$error>>2] = $0;
 $2 = HEAP32[830]|0;
 $3 = HEAP32[(3324)>>2]|0;
 $4 = $msg;
 $5 = $error;
 HEAP32[$_10>>2] = $4;
 $6 = ((($_10)) + 4|0);
 HEAP32[$6>>2] = (308);
 $7 = ((($_10)) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($_10)) + 12|0);
 HEAP32[$8>>2] = (292);
 HEAP32[$_5>>2] = $2;
 $9 = ((($_5)) + 4|0);
 HEAP32[$9>>2] = $3;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $10 = ((($_5)) + 16|0);
 HEAP32[$10>>2] = $_10;
 $11 = ((($_5)) + 20|0);
 HEAP32[$11>>2] = 2;
 __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_5,3308);
 // unreachable;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h64b5aec550d00294E_259($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (609022445);
 return 1134809956;
}
function __ZN3std2io5stdio6stdout11stdout_init17hd7b29264b5a2db63E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5$sroa$6 = 0, $attr$i$i = 0, $data$i$sroa$0$0$$sroa_idx = 0, $data$i$sroa$4$sroa$0$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx = 0, $data$i$sroa$4$sroa$4$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx = 0, $data$i$sroa$4$sroa$5$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx = 0, $data$i$sroa$4$sroa$6$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx = 0, $data$i$sroa$4$sroa$7$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_raw_idx = 0, $data$i$sroa$4$sroa$8$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_raw_idx = 0, $data$i$sroa$4$sroa$9$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_raw_idx = 0;
 var $data$i$sroa$5$0$$sroa_raw_idx = 0, $data$i$sroa$6 = 0, $data$i$sroa$6$0$$sroa_raw_idx = 0, $mutex$i$sroa$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $attr$i$i = sp;
 $mutex$i$sroa$6 = sp + 10|0;
 $data$i$sroa$6 = sp + 7|0;
 $_5$sroa$6 = sp + 4|0;
 $0 = (___rust_allocate(1024,1)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 $2 = $0;
 $3 = (___rust_allocate(24,8)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 HEAP32[$attr$i$i>>2] = 0;
 (_pthread_mutexattr_init(($attr$i$i|0))|0);
 (_pthread_mutexattr_settype(($attr$i$i|0),1)|0);
 (_pthread_mutex_init(($3|0),($attr$i$i|0))|0);
 (_pthread_mutexattr_destroy(($attr$i$i|0))|0);
 ;HEAP8[$_5$sroa$6>>0]=HEAP8[$mutex$i$sroa$6>>0]|0;HEAP8[$_5$sroa$6+1>>0]=HEAP8[$mutex$i$sroa$6+1>>0]|0;HEAP8[$_5$sroa$6+2>>0]=HEAP8[$mutex$i$sroa$6+2>>0]|0;
 ;HEAP8[$data$i$sroa$6>>0]=HEAP8[$_5$sroa$6>>0]|0;HEAP8[$data$i$sroa$6+1>>0]=HEAP8[$_5$sroa$6+1>>0]|0;HEAP8[$data$i$sroa$6+2>>0]=HEAP8[$_5$sroa$6+2>>0]|0;
 $5 = (___rust_allocate(36,4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 } else {
  $7 = $3;
  HEAP32[$5>>2] = 1;
  $8 = ((($5)) + 4|0);
  HEAP32[$8>>2] = 1;
  $data$i$sroa$0$0$$sroa_idx = ((($5)) + 8|0);
  HEAP32[$data$i$sroa$0$0$$sroa_idx>>2] = $7;
  $data$i$sroa$4$sroa$0$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx = ((($5)) + 12|0);
  HEAP32[$data$i$sroa$4$sroa$0$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx>>2] = 0;
  $data$i$sroa$4$sroa$4$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx = ((($5)) + 16|0);
  HEAP32[$data$i$sroa$4$sroa$4$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx>>2] = $2;
  $data$i$sroa$4$sroa$5$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx = ((($5)) + 20|0);
  HEAP32[$data$i$sroa$4$sroa$5$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx>>2] = 1024;
  $data$i$sroa$4$sroa$6$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx = ((($5)) + 24|0);
  HEAP32[$data$i$sroa$4$sroa$6$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_idx>>2] = 0;
  $data$i$sroa$4$sroa$7$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_raw_idx = ((($5)) + 28|0);
  HEAP8[$data$i$sroa$4$sroa$7$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_raw_idx>>0] = 1;
  $data$i$sroa$4$sroa$8$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_raw_idx = ((($5)) + 29|0);
  HEAP8[$data$i$sroa$4$sroa$8$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_raw_idx>>0] = 0;
  $data$i$sroa$4$sroa$9$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_raw_idx = ((($5)) + 30|0);
  HEAP8[$data$i$sroa$4$sroa$9$0$data$i$sroa$4$0$$sroa_raw_idx$sroa_raw_idx>>0] = 0;
  $data$i$sroa$5$0$$sroa_raw_idx = ((($5)) + 32|0);
  HEAP8[$data$i$sroa$5$0$$sroa_raw_idx>>0] = 0;
  $data$i$sroa$6$0$$sroa_raw_idx = ((($5)) + 33|0);
  ;HEAP8[$data$i$sroa$6$0$$sroa_raw_idx>>0]=HEAP8[$data$i$sroa$6>>0]|0;HEAP8[$data$i$sroa$6$0$$sroa_raw_idx+1>>0]=HEAP8[$data$i$sroa$6+1>>0]|0;HEAP8[$data$i$sroa$6$0$$sroa_raw_idx+2>>0]=HEAP8[$data$i$sroa$6+2>>0]|0;
  $9 = $5;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN3std6thread5local2os13destroy_value17hb4f010aad6eac5bbE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i8 = 0, $cond$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i = 0;
 var $cond$i$i6 = 0, $switchtmp$i$i$i$i$i$i$i = 0, $switchtmp$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(347,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = tempRet0;
   $23 = ((($0)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $cond$i$i$i$i = ($24|0)==(1);
   if (!($cond$i$i$i$i)) {
    ___rust_deallocate($0,20,4);
    ___resumeException($21|0);
    // unreachable;
   }
   $25 = ((($0)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $switchtmp$i$i$i$i$i$i$i = ($26|0)==(0|0);
   if ($switchtmp$i$i$i$i$i$i$i) {
    ___rust_deallocate($0,20,4);
    ___resumeException($21|0);
    // unreachable;
   }
   $27 = ((($0)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vi[$29 & 511]($26);
   $30 = HEAP32[$27>>2]|0;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if ($33) {
    ___rust_deallocate($0,20,4);
    ___resumeException($21|0);
    // unreachable;
   }
   $34 = ((($30)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   ___rust_deallocate($26,$32,$35);
   ___rust_deallocate($0,20,4);
   ___resumeException($21|0);
   // unreachable;
  } else {
   $_0$0$i$i = $3;
  }
 } else {
  $_0$0$i$i = $2;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $cond$i$i$i$i$i = ($7|0)==(1);
 if ($cond$i$i$i$i$i) {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $switchtmp$i$i$i$i$i$i$i$i = ($9|0)==(0|0);
  if (!($switchtmp$i$i$i$i$i$i$i$i)) {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 511]($9);
   $13 = HEAP32[$10>>2]|0;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = ((($13)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    ___rust_deallocate($9,$15,$18);
   }
  }
 }
 ___rust_deallocate($0,20,4);
 $19 = HEAP32[$1>>2]|0;
 $cond$i$i6 = ($19|0)==(0);
 if (!($cond$i$i6)) {
  $_0$0$i$i8 = $19;
  (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
  return;
 }
 $20 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h99fc4ab166ab9497E($1)|0);
 $_0$0$i$i8 = $20;
 (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
 return;
}
function __ZN3std6thread5local2os13destroy_value17hb9cc2fd575b22d1cE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0$0$i$i = 0, $_0$0$i$i8 = 0, $cond$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i = 0, $cond$i$i6 = 0, $switchtmp$i$i$i$i$i$i$i = 0, $switchtmp$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(347,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = tempRet0;
   $16 = ((($0)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $cond$i$i$i$i = ($17|0)==(1);
   if (!($cond$i$i$i$i)) {
    ___rust_deallocate($0,24,4);
    ___resumeException($14|0);
    // unreachable;
   }
   $18 = ((($0)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $switchtmp$i$i$i$i$i$i$i = ($19|0)==(0|0);
   if ($switchtmp$i$i$i$i$i$i$i) {
    ___rust_deallocate($0,24,4);
    ___resumeException($14|0);
    // unreachable;
   }
   $20 = HEAP32[$19>>2]|0;HEAP32[$19>>2] = (($20-1)|0);
   $21 = ($20|0)==(1);
   if (!($21)) {
    ___rust_deallocate($0,24,4);
    ___resumeException($14|0);
    // unreachable;
   }
   /* fence */;
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($18);
   ___rust_deallocate($0,24,4);
   ___resumeException($14|0);
   // unreachable;
  } else {
   $_0$0$i$i = $3;
  }
 } else {
  $_0$0$i$i = $2;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $cond$i$i$i$i$i = ($7|0)==(1);
 if ($cond$i$i$i$i$i) {
  $8 = ((($0)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $switchtmp$i$i$i$i$i$i$i$i = ($9|0)==(0|0);
  if (!($switchtmp$i$i$i$i$i$i$i$i)) {
   $10 = HEAP32[$9>>2]|0;HEAP32[$9>>2] = (($10-1)|0);
   $11 = ($10|0)==(1);
   if ($11) {
    /* fence */;
    __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($8);
   }
  }
 }
 ___rust_deallocate($0,24,4);
 $12 = HEAP32[$1>>2]|0;
 $cond$i$i6 = ($12|0)==(0);
 if (!($cond$i$i6)) {
  $_0$0$i$i8 = $12;
  (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
  return;
 }
 $13 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h99fc4ab166ab9497E($1)|0);
 $_0$0$i$i8 = $13;
 (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
 return;
}
function __ZN3std6thread5local2os13destroy_value17hc9d966c98178e993E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i7 = 0, $cond$i$i = 0, $cond$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(347,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $8 = ___cxa_find_matching_catch_2()|0;
   $9 = tempRet0;
   ___rust_deallocate($0,12,4);
   ___resumeException($8|0);
   // unreachable;
  } else {
   $_0$0$i$i = $3;
  }
 } else {
  $_0$0$i$i = $2;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 ___rust_deallocate($0,12,4);
 $6 = HEAP32[$1>>2]|0;
 $cond$i$i5 = ($6|0)==(0);
 if (!($cond$i$i5)) {
  $_0$0$i$i7 = $6;
  (_pthread_setspecific(($_0$0$i$i7|0),(0|0))|0);
  return;
 }
 $7 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h99fc4ab166ab9497E($1)|0);
 $_0$0$i$i7 = $7;
 (_pthread_setspecific(($_0$0$i$i7|0),(0|0))|0);
 return;
}
function __ZN3std6thread4park17hd846f3ddb0a676b7E() {
 var $$cast = 0, $$pre = 0, $$pre$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i57 = 0, $$pre$phi$i$i$i$i$i$iZ2D = 0, $$pre3$i$i$i$i$i$i = 0, $$pre3$i$i$i$i$i$i$i = 0, $$pre3$i$i$i$i$i$i53 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i55 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $9 = 0, $_8$i = 0, $_8$i32 = 0, $_8$sroa_cast27$i$hi = 0, $_8$sroa_cast27$i44$hi = 0, $_8$sroa_raw_idx$i = 0, $_8$sroa_raw_idx$i42 = 0, $_8$sroa_raw_idx26$i = 0, $_8$sroa_raw_idx26$i43 = 0, $lpad$thr_comm$split$lp$sink$index3ZZ2D = 0, $lpad$thr_comm$split$lp$sink$indexZZ2D = 0, $or$cond$i$i = 0, $or$cond$i$i131 = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$6$0 = 0, $success = 0, $success8 = 0, $switch$i$i$i$i$i$i$i = 0, $switch$i$i$i$i$i$i$i$i = 0, $switch$i$i$i$i$i$i$i51 = 0;
 var $switch2tmp$i$i$i$i$i$i$i$i = 0, $switch2tmp$i$i$i$i$i$i$i$i$i = 0, $switch2tmp$i$i$i$i$i$i$i$i48 = 0, $switch3tmp$i$i = 0, $switchtmp$i$i$i = 0, $thread = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i32 = sp + 16|0;
 $_8$i = sp + 8|0;
 $thread = sp;
 __THREW__ = 0;
 $0 = (invoke_i(315)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if (!($2)) {
   $switchtmp$i$i$i = ($0|0)==(0|0);
   if (!($switchtmp$i$i$i)) {
    __THREW__ = 0;
    $3 = (invoke_i(316)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     break;
    }
    $switch3tmp$i$i = ($3|0)==(0);
    if (!($switch3tmp$i$i)) {
     HEAP32[$thread>>2] = $3;
     $$cast = $3;
     $7 = ((($$cast)) + 24|0);
     $8 = HEAP32[$7>>2]|0;
     (_pthread_mutex_lock(($8|0))|0);
     $9 = $7;
     __THREW__ = 0;
     $10 = (invoke_i(311)|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     L7: do {
      if ($12) {
       label = 45;
      } else {
       $switch2tmp$i$i$i$i$i$i$i$i = ($10|0)==(0|0);
       if ($switch2tmp$i$i$i$i$i$i$i$i) {
        __THREW__ = 0;
        invoke_vii(202,(7951|0),57);
        $13 = __THREW__; __THREW__ = 0;
        label = 45;
        break;
       }
       $14 = HEAP32[$10>>2]|0;
       $switch$i$i$i$i$i$i$i = ($14|0)==(1);
       if ($switch$i$i$i$i$i$i$i) {
        $$sink$in$phi$trans$insert$i$i$i$i$i$i = ((($10)) + 4|0);
        $$pre$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i>>2]|0;
        $$pre$phi$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i;$19 = $$pre$i$i$i$i$i$i;
       } else {
        $15 = $10;
        $16 = $15;
        HEAP32[$16>>2] = 1;
        $17 = (($15) + 4)|0;
        $18 = $17;
        HEAP32[$18>>2] = 0;
        $$pre3$i$i$i$i$i$i = ((($10)) + 4|0);
        $$pre$phi$i$i$i$i$i$iZ2D = $$pre3$i$i$i$i$i$i;$19 = 0;
       }
       HEAP32[$$pre$phi$i$i$i$i$i$iZ2D>>2] = $19;
       $20 = ($19|0)!=(0);
       $21 = ((($$cast)) + 28|0);
       $22 = HEAP8[$21>>0]|0;
       $23 = ($22<<24>>24)==(0);
       $24 = $20&1;
       if (!($23)) {
        HEAP32[$_8$i>>2] = $9;
        $_8$sroa_raw_idx$i = ((($_8$i)) + 4|0);
        HEAP8[$_8$sroa_raw_idx$i>>0] = $24;
        $_8$sroa_raw_idx26$i = ((($_8$i)) + 5|0);
        HEAP8[$_8$sroa_raw_idx26$i>>0]=0&255;HEAP8[$_8$sroa_raw_idx26$i+1>>0]=0>>8;
        $_8$sroa_cast27$i$hi = ((($_8$sroa_raw_idx26$i)) + 2|0);
        HEAP8[$_8$sroa_cast27$i$hi>>0] = 0;
        __THREW__ = 0;
        invoke_vi(348,($_8$i|0));
        $25 = __THREW__; __THREW__ = 0;
        label = 45;
        break;
       }
       $26 = ((($$cast)) + 29|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = ($27<<24>>24)==(0);
       L19: do {
        if ($28) {
         $29 = HEAP32[$7>>2]|0;
         $30 = $29;
         $31 = ((($$cast)) + 36|0);
         $32 = HEAP32[$31>>2]|0;if (($32|0) == 0) HEAP32[$31>>2] = $30;
         $success = ($32|0)==(0);
         $33 = ($32|0)==($30|0);
         $or$cond$i$i131 = $success | $33;
         L21: do {
          if ($or$cond$i$i131) {
           $39 = $$cast;$41 = $29;
           while(1) {
            $38 = ((($39)) + 32|0);
            $40 = HEAP32[$38>>2]|0;
            (_pthread_cond_wait(($40|0),($41|0))|0);
            $42 = HEAP8[$21>>0]|0;
            $43 = ($42<<24>>24)==(0);
            if (!($43)) {
             break;
            }
            $78 = HEAP8[$26>>0]|0;
            $79 = ($78<<24>>24)==(0);
            if (!($79)) {
             break L19;
            }
            $$pre = HEAP32[$thread>>2]|0;
            $80 = HEAP32[$7>>2]|0;
            $81 = $80;
            $82 = ((($$pre)) + 36|0);
            $83 = HEAP32[$82>>2]|0;if (($83|0) == 0) HEAP32[$82>>2] = $81;
            $success8 = ($83|0)==(0);
            $84 = ($83|0)==($81|0);
            $or$cond$i$i = $success8 | $84;
            if ($or$cond$i$i) {
             $39 = $$pre;$41 = $80;
            } else {
             break L21;
            }
           }
           HEAP32[$_8$i32>>2] = $9;
           $_8$sroa_raw_idx$i42 = ((($_8$i32)) + 4|0);
           HEAP8[$_8$sroa_raw_idx$i42>>0] = $24;
           $_8$sroa_raw_idx26$i43 = ((($_8$i32)) + 5|0);
           HEAP8[$_8$sroa_raw_idx26$i43>>0]=0&255;HEAP8[$_8$sroa_raw_idx26$i43+1>>0]=0>>8;
           $_8$sroa_cast27$i44$hi = ((($_8$sroa_raw_idx26$i43)) + 2|0);
           HEAP8[$_8$sroa_cast27$i44$hi>>0] = 0;
           __THREW__ = 0;
           invoke_vi(348,($_8$i32|0));
           $54 = __THREW__; __THREW__ = 0;
           label = 45;
           break L7;
          }
         } while(0);
         __THREW__ = 0;
         invoke_viii(312,(10494|0),54,(2724|0));
         $35 = __THREW__; __THREW__ = 0;
         $36 = ___cxa_find_matching_catch_2()|0;
         $37 = tempRet0;
         do {
          if (!($20)) {
           __THREW__ = 0;
           $44 = (invoke_i(311)|0);
           $45 = __THREW__; __THREW__ = 0;
           $46 = $45&1;
           if ($46) {
            label = 45;
            break L7;
           }
           $switch2tmp$i$i$i$i$i$i$i$i$i = ($44|0)==(0|0);
           if ($switch2tmp$i$i$i$i$i$i$i$i$i) {
            __THREW__ = 0;
            invoke_vii(202,(7951|0),57);
            $47 = __THREW__; __THREW__ = 0;
            label = 45;
            break L7;
           }
           $48 = HEAP32[$44>>2]|0;
           $switch$i$i$i$i$i$i$i$i = ($48|0)==(1);
           if (!($switch$i$i$i$i$i$i$i$i)) {
            $49 = $44;
            $50 = $49;
            HEAP32[$50>>2] = 1;
            $51 = (($49) + 4)|0;
            $52 = $51;
            HEAP32[$52>>2] = 0;
            $$pre3$i$i$i$i$i$i$i = ((($44)) + 4|0);
            HEAP32[$$pre3$i$i$i$i$i$i$i>>2] = 0;
            break;
           }
           $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = ((($44)) + 4|0);
           $$pre$i$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i>>2]|0;
           $53 = ($$pre$i$i$i$i$i$i$i|0)==(0);
           if (!($53)) {
            HEAP8[$21>>0] = 1;
           }
          }
         } while(0);
         $34 = HEAP32[$7>>2]|0;
         (_pthread_mutex_unlock(($34|0))|0);
         $lpad$thr_comm$split$lp$sink$index3ZZ2D = $37;$lpad$thr_comm$split$lp$sink$indexZZ2D = $36;
         break L7;
        }
       } while(0);
       HEAP8[$26>>0] = 0;
       L40: do {
        if (!($20)) {
         __THREW__ = 0;
         $55 = (invoke_i(311)|0);
         $56 = __THREW__; __THREW__ = 0;
         $57 = $56&1;
         do {
          if (!($57)) {
           $switch2tmp$i$i$i$i$i$i$i$i48 = ($55|0)==(0|0);
           if ($switch2tmp$i$i$i$i$i$i$i$i48) {
            __THREW__ = 0;
            invoke_vii(202,(7951|0),57);
            $58 = __THREW__; __THREW__ = 0;
            break;
           }
           $59 = HEAP32[$55>>2]|0;
           $switch$i$i$i$i$i$i$i51 = ($59|0)==(1);
           if (!($switch$i$i$i$i$i$i$i51)) {
            $60 = $55;
            $61 = $60;
            HEAP32[$61>>2] = 1;
            $62 = (($60) + 4)|0;
            $63 = $62;
            HEAP32[$63>>2] = 0;
            $$pre3$i$i$i$i$i$i53 = ((($55)) + 4|0);
            HEAP32[$$pre3$i$i$i$i$i$i53>>2] = 0;
            break L40;
           }
           $$sink$in$phi$trans$insert$i$i$i$i$i$i55 = ((($55)) + 4|0);
           $$pre$i$i$i$i$i$i57 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i55>>2]|0;
           $64 = ($$pre$i$i$i$i$i$i57|0)==(0);
           if ($64) {
            break L40;
           }
           HEAP8[$21>>0] = 1;
           break L40;
          }
         } while(0);
         $76 = ___cxa_find_matching_catch_2()|0;
         $77 = tempRet0;
         $lpad$thr_comm$split$lp$sink$index3ZZ2D = $77;$lpad$thr_comm$split$lp$sink$indexZZ2D = $76;
         break L7;
        }
       } while(0);
       $65 = HEAP32[$7>>2]|0;
       (_pthread_mutex_unlock(($65|0))|0);
       $66 = HEAP32[$thread>>2]|0;
       $67 = HEAP32[$66>>2]|0;HEAP32[$66>>2] = (($67-1)|0);
       $68 = ($67|0)==(1);
       if (!($68)) {
        STACKTOP = sp;return;
       }
       /* fence */;
       __THREW__ = 0;
       invoke_vi(321,($thread|0));
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if (!($70)) {
        STACKTOP = sp;return;
       }
       $87 = ___cxa_find_matching_catch_2()|0;
       $88 = tempRet0;
       $personalityslot$sroa$0$0 = $87;$personalityslot$sroa$6$0 = $88;
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      }
     } while(0);
     if ((label|0) == 45) {
      $85 = ___cxa_find_matching_catch_2()|0;
      $86 = tempRet0;
      $lpad$thr_comm$split$lp$sink$index3ZZ2D = $86;$lpad$thr_comm$split$lp$sink$indexZZ2D = $85;
     }
     $71 = HEAP32[$thread>>2]|0;
     $72 = HEAP32[$71>>2]|0;HEAP32[$71>>2] = (($72-1)|0);
     $73 = ($72|0)==(1);
     if (!($73)) {
      $personalityslot$sroa$0$0 = $lpad$thr_comm$split$lp$sink$indexZZ2D;$personalityslot$sroa$6$0 = $lpad$thr_comm$split$lp$sink$index3ZZ2D;
      ___resumeException($personalityslot$sroa$0$0|0);
      // unreachable;
     }
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($thread);
     $personalityslot$sroa$0$0 = $lpad$thr_comm$split$lp$sink$indexZZ2D;$personalityslot$sroa$6$0 = $lpad$thr_comm$split$lp$sink$index3ZZ2D;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vii(202,(10400|0),94);
   $6 = __THREW__; __THREW__ = 0;
  }
 } while(0);
 $74 = ___cxa_find_matching_catch_2()|0;
 $75 = tempRet0;
 $personalityslot$sroa$0$0 = $74;$personalityslot$sroa$6$0 = $75;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN4core6result13unwrap_failed17h28539bcb78d1ee15E($0) {
 $0 = $0|0;
 var $$pre$i$i$i$i$i$i$i = 0, $$pre3$i$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, $switch$i$i$i$i$i$i$i$i = 0, $switch2tmp$i$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $msg = sp + 48|0;
 $error = sp + 40|0;
 $_5 = sp + 16|0;
 $_10 = sp;
 HEAP32[$msg>>2] = 8430;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $error;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = HEAP32[830]|0;
 $13 = HEAP32[(3324)>>2]|0;
 $14 = $msg;
 $15 = $error;
 HEAP32[$_10>>2] = $14;
 $16 = ((($_10)) + 4|0);
 HEAP32[$16>>2] = (308);
 $17 = ((($_10)) + 8|0);
 HEAP32[$17>>2] = $15;
 $18 = ((($_10)) + 12|0);
 HEAP32[$18>>2] = (349);
 HEAP32[$_5>>2] = $12;
 $19 = ((($_5)) + 4|0);
 HEAP32[$19>>2] = $13;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $20 = ((($_5)) + 16|0);
 HEAP32[$20>>2] = $_10;
 $21 = ((($_5)) + 20|0);
 HEAP32[$21>>2] = 2;
 __THREW__ = 0;
 invoke_vii(100,($_5|0),(3308|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = ___cxa_find_matching_catch_2()|0;
 $24 = tempRet0;
 $25 = HEAP32[$error>>2]|0;
 $26 = ((($error)) + 4|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)==(0);
 do {
  if ($28) {
   $29 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17hadbbbfd8ce4ffa28E()|0);
   $switch2tmp$i$i$i$i$i$i$i$i$i = ($29|0)==(0|0);
   if ($switch2tmp$i$i$i$i$i$i$i$i$i) {
    __ZN4core6option13expect_failed17he4838b1eef3c5645E(7951,57);
    // unreachable;
   }
   $30 = HEAP32[$29>>2]|0;
   $switch$i$i$i$i$i$i$i$i = ($30|0)==(1);
   if (!($switch$i$i$i$i$i$i$i$i)) {
    $31 = $29;
    $32 = $31;
    HEAP32[$32>>2] = 1;
    $33 = (($31) + 4)|0;
    $34 = $33;
    HEAP32[$34>>2] = 0;
    $$pre3$i$i$i$i$i$i$i = ((($29)) + 4|0);
    HEAP32[$$pre3$i$i$i$i$i$i$i>>2] = 0;
    break;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = ((($29)) + 4|0);
   $$pre$i$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i>>2]|0;
   $35 = ($$pre$i$i$i$i$i$i$i|0)==(0);
   if (!($35)) {
    $36 = ((($25)) + 4|0);
    HEAP8[$36>>0] = 1;
   }
  }
 } while(0);
 $37 = HEAP32[$error>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 (_pthread_mutex_unlock(($38|0))|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZN82__LT_std__sys_common__poison__PoisonError_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17hfc681ccd65f04d84E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h51cb268862c67feeE(10548,25,$1)|0);
 return ($2|0);
}
function __ZN3std6thread6Thread6unpark17h4e8775de76de828aE($0) {
 $0 = $0|0;
 var $$pre$i$i$i$i$i$i16 = 0, $$pre$i$i$i$i$i$i32 = 0, $$pre$phi$i$i$i$i$i$iZ2D = 0, $$pre3$i$i$i$i$i$i17 = 0, $$pre3$i$i$i$i$i$i27 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i14 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i30 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_8$i = 0, $_8$sroa_cast27$i$hi = 0, $_8$sroa_raw_idx$i = 0, $_8$sroa_raw_idx26$i = 0;
 var $switch$i$i$i$i$i$i$i12 = 0, $switch$i$i$i$i$i$i$i25 = 0, $switch2tmp$i$i$i$i$i$i$i$i10 = 0, $switch2tmp$i$i$i$i$i$i$i$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_8$i = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 (_pthread_mutex_lock(($3|0))|0);
 $4 = $2;
 $5 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17hadbbbfd8ce4ffa28E()|0);
 $switch2tmp$i$i$i$i$i$i$i$i10 = ($5|0)==(0|0);
 if ($switch2tmp$i$i$i$i$i$i$i$i10) {
  __ZN4core6option13expect_failed17he4838b1eef3c5645E(7951,57);
  // unreachable;
 }
 $6 = HEAP32[$5>>2]|0;
 $switch$i$i$i$i$i$i$i12 = ($6|0)==(1);
 if ($switch$i$i$i$i$i$i$i12) {
  $$sink$in$phi$trans$insert$i$i$i$i$i$i14 = ((($5)) + 4|0);
  $$pre$i$i$i$i$i$i16 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i14>>2]|0;
  $$pre$phi$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i14;$11 = $$pre$i$i$i$i$i$i16;
 } else {
  $7 = $5;
  $8 = $7;
  HEAP32[$8>>2] = 1;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = 0;
  $$pre3$i$i$i$i$i$i17 = ((($5)) + 4|0);
  $$pre$phi$i$i$i$i$i$iZ2D = $$pre3$i$i$i$i$i$i17;$11 = 0;
 }
 HEAP32[$$pre$phi$i$i$i$i$i$iZ2D>>2] = $11;
 $12 = ($11|0)!=(0);
 $13 = ((($1)) + 28|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  $16 = $12&1;
  HEAP32[$_8$i>>2] = $4;
  $_8$sroa_raw_idx$i = ((($_8$i)) + 4|0);
  HEAP8[$_8$sroa_raw_idx$i>>0] = $16;
  $_8$sroa_raw_idx26$i = ((($_8$i)) + 5|0);
  HEAP8[$_8$sroa_raw_idx26$i>>0]=0&255;HEAP8[$_8$sroa_raw_idx26$i+1>>0]=0>>8;
  $_8$sroa_cast27$i$hi = ((($_8$sroa_raw_idx26$i)) + 2|0);
  HEAP8[$_8$sroa_cast27$i$hi>>0] = 0;
  __ZN4core6result13unwrap_failed17h28539bcb78d1ee15E($_8$i);
  // unreachable;
 }
 $17 = ((($1)) + 29|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  HEAP8[$17>>0] = 1;
  $20 = ((($1)) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  (_pthread_cond_signal(($21|0))|0);
 }
 if ($12) {
  $29 = HEAP32[$2>>2]|0;
  (_pthread_mutex_unlock(($29|0))|0);
  STACKTOP = sp;return;
 }
 $22 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17hadbbbfd8ce4ffa28E()|0);
 $switch2tmp$i$i$i$i$i$i$i$i22 = ($22|0)==(0|0);
 if ($switch2tmp$i$i$i$i$i$i$i$i22) {
  __ZN4core6option13expect_failed17he4838b1eef3c5645E(7951,57);
  // unreachable;
 }
 $23 = HEAP32[$22>>2]|0;
 $switch$i$i$i$i$i$i$i25 = ($23|0)==(1);
 if (!($switch$i$i$i$i$i$i$i25)) {
  $24 = $22;
  $25 = $24;
  HEAP32[$25>>2] = 1;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = 0;
  $$pre3$i$i$i$i$i$i27 = ((($22)) + 4|0);
  HEAP32[$$pre3$i$i$i$i$i$i27>>2] = 0;
  $29 = HEAP32[$2>>2]|0;
  (_pthread_mutex_unlock(($29|0))|0);
  STACKTOP = sp;return;
 }
 $$sink$in$phi$trans$insert$i$i$i$i$i$i30 = ((($22)) + 4|0);
 $$pre$i$i$i$i$i$i32 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i30>>2]|0;
 $28 = ($$pre$i$i$i$i$i$i32|0)==(0);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  (_pthread_mutex_unlock(($29|0))|0);
  STACKTOP = sp;return;
 }
 HEAP8[$13>>0] = 1;
 $29 = HEAP32[$2>>2]|0;
 (_pthread_mutex_unlock(($29|0))|0);
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17hf62e3d317c3bfe3fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i = 0;
 var $ptr$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17he4838b1eef3c5645E(8699,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $_0$0$sroa$speculated$i$i$i = $9 ? $$arith : $8;
 $$arith2 = ($_0$0$sroa$speculated$i$i$i*12)|0;
 $$overflow3 = ($_0$0$sroa$speculated$i$i$i>>>0)>(357913941);
 if ($$overflow3) {
  __ZN4core6option13expect_failed17he4838b1eef3c5645E(8699,17);
  // unreachable;
 }
 $10 = ($$arith2|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_allocate($$arith2,4)|0);
  $ptr$0$i = $12;
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = ($5*12)|0;
  $15 = (___rust_reallocate($13,$14,$$arith2,4)|0);
  $ptr$0$i = $15;
 }
 $16 = ($ptr$0$i|0)==(0|0);
 if ($16) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 HEAP32[$0>>2] = $ptr$0$i;
 HEAP32[$4>>2] = $_0$0$sroa$speculated$i$i$i;
 return;
}
function __ZN3std3ffi5c_str7CString4_new17h62cc352bb8d82f48E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_13 = 0;
 var $_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast8$sroa_idx = 0, $_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast8$sroa_idx42 = 0, $_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast8$sroa_idx44 = 0, $bytes$sroa$0$0$copyload = 0, $bytes$sroa$7$0$$sroa_idx24 = 0, $bytes$sroa$7$0$$sroa_idx25 = 0, $bytes$sroa$7$0$copyload = 0, $bytes$sroa$8$0$$sroa_idx30 = 0, $bytes$sroa$8$0$$sroa_idx31 = 0, $bytes$sroa$8$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_12 = sp + 16|0;
 $_13 = sp;
 $bytes$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 $bytes$sroa$7$0$$sroa_idx24 = ((($1)) + 4|0);
 $bytes$sroa$7$0$copyload = HEAP32[$bytes$sroa$7$0$$sroa_idx24>>2]|0;
 $bytes$sroa$8$0$$sroa_idx30 = ((($1)) + 8|0);
 $bytes$sroa$8$0$copyload = HEAP32[$bytes$sroa$8$0$$sroa_idx30>>2]|0;
 $2 = (_memchr($bytes$sroa$0$0$copyload,0,$bytes$sroa$8$0$copyload)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$_13>>2] = $bytes$sroa$0$0$copyload;
  $bytes$sroa$7$0$$sroa_idx25 = ((($_13)) + 4|0);
  HEAP32[$bytes$sroa$7$0$$sroa_idx25>>2] = $bytes$sroa$7$0$copyload;
  $bytes$sroa$8$0$$sroa_idx31 = ((($_13)) + 8|0);
  HEAP32[$bytes$sroa$8$0$$sroa_idx31>>2] = $bytes$sroa$8$0$copyload;
  __ZN3std3ffi5c_str7CString18from_vec_unchecked17haae07d4f9c1dd6deE($_12,$_13);
  $4 = ((($0)) + 4|0);
  $5 = $_12;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = $4;
  $12 = $11;
  HEAP32[$12>>2] = $7;
  $13 = (($11) + 4)|0;
  $14 = $13;
  HEAP32[$14>>2] = $10;
  $$sink = 0;
  HEAP32[$0>>2] = $$sink;
  STACKTOP = sp;return;
 } else {
  $15 = $2;
  $16 = $bytes$sroa$0$0$copyload;
  $17 = (($15) - ($16))|0;
  $18 = ((($0)) + 4|0);
  HEAP32[$18>>2] = $17;
  $_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast8$sroa_idx = ((($0)) + 8|0);
  HEAP32[$_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast8$sroa_idx>>2] = $bytes$sroa$0$0$copyload;
  $_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast8$sroa_idx42 = ((($0)) + 12|0);
  HEAP32[$_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast8$sroa_idx42>>2] = $bytes$sroa$7$0$copyload;
  $_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast8$sroa_idx44 = ((($0)) + 16|0);
  HEAP32[$_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast8$sroa_idx44>>2] = $bytes$sroa$8$0$copyload;
  $$sink = 1;
  HEAP32[$0>>2] = $$sink;
  STACKTOP = sp;return;
 }
}
function __ZN61__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Deref_GT_5deref17ha29d5957628f36e7E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$retVal>>2] = $1;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $3;
 return;
}
function __ZN3std3ffi5c_str4CStr8from_ptr17hc6258ac56fc9d700E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 HEAP32[$retVal>>2] = $0;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $2;
 return;
}
function __ZN3std3ffi5c_str4CStr6as_ptr17h2d1759027091f005E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN3std3ffi5c_str4CStr8to_bytes17hf96cdf4a833f5310E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ($1|0)==(0);
 if ($3) {
  __ZN4core5slice20slice_index_len_fail17h94caf57088443fc0E($2,0);
  // unreachable;
 } else {
  HEAP32[$retVal>>2] = $0;
  $retVal$index1 = ((($retVal)) + 4|0);
  HEAP32[$retVal$index1>>2] = $2;
  return;
 }
}
function __ZN3std10sys_common11at_exit_imp4push17h088e691ddc7e8188E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$5$0 = 0, $ret$0$off025 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock(((15904)|0))|0);
 $2 = HEAP32[4014]|0;
 $3 = $2;
 L1: do {
  switch ($2|0) {
  case 0:  {
   $4 = (___rust_allocate(12,4)|0);
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    HEAP32[$4>>2] = 1;
    $13 = ((($4)) + 4|0);
    HEAP32[$13>>2] = 0;
    $14 = ((($4)) + 8|0);
    HEAP32[$14>>2] = 0;
    HEAP32[4014] = $4;
    $16 = $4;
    break L1;
   }
   __THREW__ = 0;
   invoke_v(326);
   $6 = __THREW__; __THREW__ = 0;
   $7 = ___cxa_find_matching_catch_2()|0;
   $8 = tempRet0;
   $9 = HEAP32[$1>>2]|0;
   FUNCTION_TABLE_vi[$9 & 511]($0);
   $10 = ((($1)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $personalityslot$sroa$0$0 = $7;$personalityslot$sroa$5$0 = $8;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $39 = ((($1)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   ___rust_deallocate($0,$11,$40);
   $personalityslot$sroa$0$0 = $7;$personalityslot$sroa$5$0 = $8;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
   break;
  }
  case 1:  {
   (_pthread_mutex_unlock(((15904)|0))|0);
   $41 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($41|0,($0|0));
   $42 = __THREW__; __THREW__ = 0;
   $43 = $42&1;
   if ($43) {
    $51 = ___cxa_find_matching_catch_2()|0;
    $52 = tempRet0;
    $personalityslot$sroa$0$0 = $51;$personalityslot$sroa$5$0 = $52;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $44 = ((($1)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(0);
   if ($46) {
    $ret$0$off025 = 0;
    return ($ret$0$off025|0);
   }
   $47 = ((($1)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   ___rust_deallocate($0,$45,$48);
   $ret$0$off025 = 0;
   return ($ret$0$off025|0);
   break;
  }
  default: {
   $16 = $3;
  }
  }
 } while(0);
 $15 = ((($16)) + 8|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ((($16)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)==($19|0);
 do {
  if ($20) {
   __THREW__ = 0;
   invoke_vi(350,($16|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if (!($22)) {
    $$pre$i = HEAP32[$15>>2]|0;
    $35 = $$pre$i;
    break;
   }
   $23 = ___cxa_find_matching_catch_2()|0;
   $24 = tempRet0;
   $25 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($25|0,($0|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $49 = ___cxa_find_matching_catch_2()|0;
    $50 = tempRet0;
    $personalityslot$sroa$0$0 = $49;$personalityslot$sroa$5$0 = $50;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $28 = ((($1)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0);
   if (!($30)) {
    $31 = ((($1)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    ___rust_deallocate($0,$29,$32);
   }
   $personalityslot$sroa$0$0 = $23;$personalityslot$sroa$5$0 = $24;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  } else {
   $35 = $17;
  }
 } while(0);
 $33 = HEAP32[$16>>2]|0;
 $34 = (($33) + ($35<<3)|0);
 HEAP32[$34>>2] = $0;
 $36 = (((($33) + ($35<<3)|0)) + 4|0);
 HEAP32[$36>>2] = $1;
 $37 = HEAP32[$15>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[$15>>2] = $38;
 (_pthread_mutex_unlock(((15904)|0))|0);
 $ret$0$off025 = 1;
 return ($ret$0$off025|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17hb5cb10922eb9a95dE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13$sroa$0$0 = 0, $_13$sroa$5$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $10 = (___rust_allocate(32,4)|0);
   $_13$sroa$0$0 = 4;$_13$sroa$5$0 = $10;
  } else {
   $4 = $2 << 4;
   $5 = ($4|0)<(0);
   if ($5) {
    __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
    // unreachable;
   } else {
    $6 = $2 << 1;
    $7 = HEAP32[$0>>2]|0;
    $8 = $2 << 3;
    $9 = (___rust_reallocate($7,$8,$4,4)|0);
    $_13$sroa$0$0 = $6;$_13$sroa$5$0 = $9;
    break;
   }
  }
 } while(0);
 $11 = ($_13$sroa$5$0|0)==(0|0);
 if ($11) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 } else {
  HEAP32[$0>>2] = $_13$sroa$5$0;
  HEAP32[$1>>2] = $_13$sroa$0$0;
  return;
 }
}
function __ZN3std2io5stdio6stdout17h5cd91a3f9d8da117E() {
 var $$fca$0$0$0$0$load1$i = 0, $$fca$0$0$0$load1$i$i = 0, $$fca$0$0$0$load1$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $magicptr$i = 0, $ret$i$i = 0, $switch3tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ret$i$i = sp;
 (_pthread_mutex_lock(((56)|0))|0);
 $0 = HEAP32[(80)>>2]|0;
 $magicptr$i = $0;
 L1: do {
  switch ($magicptr$i|0) {
  case 0:  {
   $2 = (___rust_allocate(4,4)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    __ZN5alloc3oom3oom17h9c08827c36eab673E();
    // unreachable;
   }
   HEAP32[$2>>2] = 56;
   $4 = (__ZN3std10sys_common11at_exit_imp4push17h088e691ddc7e8188E($2,320)|0);
   $5 = HEAP32[(84)>>2]|0;
   $6 = (FUNCTION_TABLE_i[$5 & 511]()|0);
   HEAP32[$ret$i$i>>2] = $6;
   $7 = $6;
   do {
    if ($4) {
     $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8+1)|0);
     $9 = ($8|0)<(0);
     if ($9) {
      _llvm_trap();
      // unreachable;
     }
     $10 = (___rust_allocate(4,4)|0);
     $11 = ($10|0)==(0|0);
     if (!($11)) {
      HEAP32[$10>>2] = $7;
      HEAP32[(80)>>2] = $10;
      $$fca$0$0$0$load1$pre$i$i = HEAP32[$ret$i$i>>2]|0;
      $$fca$0$0$0$load1$i$i = $$fca$0$0$0$load1$pre$i$i;
      break;
     }
     __THREW__ = 0;
     invoke_v(326);
     $12 = __THREW__; __THREW__ = 0;
     $1 = ___cxa_find_matching_catch_2()|0;
     $13 = tempRet0;
     $14 = HEAP32[$ret$i$i>>2]|0;
     $15 = HEAP32[$14>>2]|0;HEAP32[$14>>2] = (($15-1)|0);
     $16 = ($15|0)==(1);
     if (!($16)) {
      ___resumeException($1|0);
      // unreachable;
     }
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h230c7157d950d2b1E($ret$i$i);
     ___resumeException($1|0);
     // unreachable;
    } else {
     $$fca$0$0$0$load1$i$i = $6;
    }
   } while(0);
   $$fca$0$0$0$0$load1$i = $$fca$0$0$0$load1$i$i;
   break;
  }
  case 1:  {
   (_pthread_mutex_unlock(((56)|0))|0);
   __ZN4core6option13expect_failed17he4838b1eef3c5645E(10573,36);
   // unreachable;
   break;
  }
  default: {
   $17 = HEAP32[$0>>2]|0;
   $18 = HEAP32[$17>>2]|0;HEAP32[$17>>2] = (($18+1)|0);
   $19 = ($18|0)<(0);
   if ($19) {
    _llvm_trap();
    // unreachable;
   } else {
    $20 = $17;
    $$fca$0$0$0$0$load1$i = $20;
    break L1;
   }
  }
  }
 } while(0);
 (_pthread_mutex_unlock(((56)|0))|0);
 $switch3tmp$i = ($$fca$0$0$0$0$load1$i|0)==(0);
 if ($switch3tmp$i) {
  __ZN4core6option13expect_failed17he4838b1eef3c5645E(10573,36);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$fca$0$0$0$0$load1$i|0);
 }
 return (0)|0;
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h230c7157d950d2b1E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 (_pthread_mutex_destroy(($3|0))|0);
 $4 = HEAP32[$2>>2]|0;
 ___rust_deallocate($4,24,8);
 $5 = ((($1)) + 16|0);
 __ZN4drop17hb1b9f98a1dfa6084E($5);
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8-1)|0);
 $9 = ($8|0)==(1);
 if (!($9)) {
  return;
 }
 /* fence */;
 ___rust_deallocate($1,36,4);
 return;
}
function __ZN4drop17hb1b9f98a1dfa6084E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_r$i$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i$i = 0, $not$$i$i$i$i$i$i$i = 0, $not$$i$i$i$i$i6$i$i = 0, $switch$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_r$i$i$i = sp;
 $1 = ((($0)) + 12|0);
 $2 = HEAP8[$1>>0]|0;
 $switch$i$i$i$i = ($2<<24>>24)==(1);
 L1: do {
  if ($switch$i$i$i$i) {
   $3 = ((($0)) + 14|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    __THREW__ = 0;
    invoke_vii(351,($_r$i$i$i|0),($0|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    do {
     if (!($7)) {
      $8 = HEAP32[$_r$i$i$i>>2]|0;
      $cond$i$i$i$i = ($8|0)==(1);
      if ($cond$i$i$i$i) {
       $9 = ((($_r$i$i$i)) + 4|0);
       $10 = HEAP8[$9>>0]|0;
       $cond$i$i$i$i$i$i = ($10<<24>>24)==(2);
       if ($cond$i$i$i$i$i$i) {
        $11 = ((($_r$i$i$i)) + 8|0);
        $12 = HEAP32[$11>>2]|0;
        $13 = ((($12)) + 4|0);
        $14 = HEAP32[$13>>2]|0;
        $15 = ((($12)) + 8|0);
        $16 = HEAP32[$15>>2]|0;
        $17 = HEAP32[$16>>2]|0;
        __THREW__ = 0;
        invoke_vi($17|0,($14|0));
        $18 = __THREW__; __THREW__ = 0;
        $19 = $18&1;
        if ($19) {
         break;
        }
        $20 = HEAP32[$15>>2]|0;
        $21 = ((($20)) + 4|0);
        $22 = HEAP32[$21>>2]|0;
        $23 = ($22|0)==(0);
        if (!($23)) {
         $24 = ((($20)) + 8|0);
         $25 = HEAP32[$24>>2]|0;
         ___rust_deallocate($14,$22,$25);
        }
        ___rust_deallocate($12,12,4);
       }
      }
      break L1;
     }
    } while(0);
    $29 = ___cxa_find_matching_catch_2()|0;
    $30 = tempRet0;
    $31 = ((($0)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $not$$i$i$i$i$i6$i$i = ($32|0)==(0);
    if ($not$$i$i$i$i$i6$i$i) {
     ___resumeException($29|0);
     // unreachable;
    }
    $33 = HEAP32[$0>>2]|0;
    ___rust_deallocate($33,$32,1);
    ___resumeException($29|0);
    // unreachable;
   }
  }
 } while(0);
 $26 = ((($0)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $not$$i$i$i$i$i$i$i = ($27|0)==(0);
 if ($not$$i$i$i$i$i$i$i) {
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$0>>2]|0;
 ___rust_deallocate($28,$27,1);
 STACKTOP = sp;return;
}
function __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h4ed7741ed36dc6f0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4$i$i$i = 0, $_45$sroa$4$0$$sroa_idx300 = 0, $_45$sroa$5$0$$sroa_idx302 = 0;
 var $cond = 0, $cond$i = 0, $cond$i$i$i = 0, $cond381 = 0, $not$switch$i = 0, $or$cond = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$8$0 = 0, $r$i$i$sroa$6$sroa$6$0$extract$shift = 0, $r$sroa$12$sroa$0$0$insert$ext212 = 0, $r$sroa$12$sroa$0$0$insert$insert214 = 0, $r$sroa$12$sroa$0$2349 = 0, $r$sroa$12$sroa$14$0$insert$insert222 = 0, $r$sroa$12$sroa$15$sroa$0$1352$in = 0, $ret$sroa$0$1 = 0, $ret$sroa$0$1466 = 0, $ret$sroa$11$sroa$0$sroa$0$0$insert$ext = 0, $ret$sroa$11$sroa$0$sroa$0$1 = 0, $ret$sroa$11$sroa$0$sroa$0$1468 = 0, $ret$sroa$11$sroa$10$1 = 0;
 var $ret$sroa$11$sroa$10$1467 = 0, $switch$i86 = 0, $written$0$ph421 = 0, $written$0$ph425 = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$i$sroa$4$i = sp + 28|0;
 $x$sroa$0$i$i$i$i$i = sp + 16|0;
 $_4$i$i$i = sp;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $ret$sroa$0$1466 = 0;$ret$sroa$11$sroa$0$sroa$0$1468 = 0;$ret$sroa$11$sroa$10$1467 = 0;
  } else {
   $5 = ((($1)) + 14|0);
   $6 = ((($1)) + 12|0);
   $7 = ((($1)) + 13|0);
   $written$0$ph425 = 0;
   L3: while(1) {
    while(1) {
     HEAP8[$5>>0] = 1;
     $21 = HEAP8[$6>>0]|0;
     $not$switch$i = ($21<<24>>24)==(1);
     if (!($not$switch$i)) {
      label = 9;
      break L3;
     }
     $23 = HEAP32[$2>>2]|0;
     $24 = ($23>>>0)<($written$0$ph425>>>0);
     if ($24) {
      label = 11;
      break L3;
     }
     $26 = (($23) - ($written$0$ph425))|0;
     $27 = HEAP8[$7>>0]|0;
     $switch$i86 = ($27<<24>>24)==(1);
     if ($switch$i86) {
      $r$sroa$12$sroa$0$2349 = $26;$r$sroa$12$sroa$15$sroa$0$1352$in = $26;
      break;
     }
     $28 = HEAP32[$1>>2]|0;
     $29 = (($28) + ($written$0$ph425)|0);
     $30 = (_write(1,$29,$26)|0);
     $31 = ($30|0)==(-1);
     if (!($31)) {
      label = 20;
      break;
     }
     $32 = (___errno_location()|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(9);
     if ($34) {
      $r$sroa$12$sroa$0$2349 = $26;$r$sroa$12$sroa$15$sroa$0$1352$in = $26;
      break;
     }
     HEAP8[$5>>0] = 0;
     $cond381 = ($33|0)==(4);
     if (!($cond381)) {
      $ret$sroa$0$1 = 1;$ret$sroa$11$sroa$0$sroa$0$1 = 0;$ret$sroa$11$sroa$10$1 = $33;$written$0$ph421 = $written$0$ph425;
      break L3;
     }
    }
    if ((label|0) == 20) {
     label = 0;
     $r$i$i$sroa$6$sroa$6$0$extract$shift = $30 & -256;
     $r$sroa$12$sroa$0$2349 = $30;$r$sroa$12$sroa$15$sroa$0$1352$in = $r$i$i$sroa$6$sroa$6$0$extract$shift;
    }
    HEAP8[$5>>0] = 0;
    $r$sroa$12$sroa$14$0$insert$insert222 = $r$sroa$12$sroa$15$sroa$0$1352$in & -256;
    $r$sroa$12$sroa$0$0$insert$ext212 = $r$sroa$12$sroa$0$2349 & 255;
    $r$sroa$12$sroa$0$0$insert$insert214 = $r$sroa$12$sroa$14$0$insert$insert222 | $r$sroa$12$sroa$0$0$insert$ext212;
    $cond = ($r$sroa$12$sroa$0$0$insert$insert214|0)==(0);
    $43 = (($r$sroa$12$sroa$0$0$insert$insert214) + ($written$0$ph425))|0;
    if ($cond) {
     label = 15;
     break;
    }
    $44 = ($43>>>0)<($3>>>0);
    if ($44) {
     $written$0$ph425 = $43;
    } else {
     $ret$sroa$0$1 = 0;$ret$sroa$11$sroa$0$sroa$0$1 = 0;$ret$sroa$11$sroa$10$1 = 0;$written$0$ph421 = $43;
     break;
    }
   }
   L16: do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(86,(3288|0));
     $22 = __THREW__; __THREW__ = 0;
     label = 31;
    }
    else if ((label|0) == 11) {
     __THREW__ = 0;
     invoke_vii(352,($written$0$ph425|0),($23|0));
     $25 = __THREW__; __THREW__ = 0;
     label = 31;
    }
    else if ((label|0) == 15) {
     __THREW__ = 0;
     invoke_viii(330,($_4$i$i$i|0),(10609|0),33);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     do {
      if (!($36)) {
       ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
       $37 = (___rust_allocate(12,4)|0);
       $38 = ($37|0)==(0|0);
       if ($38) {
        __THREW__ = 0;
        invoke_v(326);
        $39 = __THREW__; __THREW__ = 0;
        break;
       }
       ;HEAP32[$37>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$37+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
       $40 = (___rust_allocate(12,4)|0);
       $41 = ($40|0)==(0|0);
       if ($41) {
        __THREW__ = 0;
        invoke_v(326);
        $42 = __THREW__; __THREW__ = 0;
        break;
       } else {
        HEAP8[$40>>0] = 14;
        $x$i$sroa$4$0$$sroa_raw_idx$i = ((($40)) + 1|0);
        ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
        $x$i$sroa$5$0$$sroa_idx$i = ((($40)) + 4|0);
        HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $37;
        $x$i$sroa$6$0$$sroa_idx$i = ((($40)) + 8|0);
        HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 184;
        $58 = $40;
        $ret$sroa$0$1 = 1;$ret$sroa$11$sroa$0$sroa$0$1 = 2;$ret$sroa$11$sroa$10$1 = $58;$written$0$ph421 = $written$0$ph425;
        break L16;
       }
      }
     } while(0);
     $54 = ___cxa_find_matching_catch_2()|0;
     $55 = tempRet0;
     $personalityslot$sroa$0$0 = $54;$personalityslot$sroa$8$0 = $55;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
   } while(0);
   if ((label|0) == 31) {
    $56 = ___cxa_find_matching_catch_2()|0;
    $57 = tempRet0;
    $personalityslot$sroa$0$0 = $56;$personalityslot$sroa$8$0 = $57;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $20 = ($written$0$ph421|0)==(0);
   if ($20) {
    $ret$sroa$0$1466 = $ret$sroa$0$1;$ret$sroa$11$sroa$0$sroa$0$1468 = $ret$sroa$11$sroa$0$sroa$0$1;$ret$sroa$11$sroa$10$1467 = $ret$sroa$11$sroa$10$1;
   } else {
    $45 = HEAP32[$2>>2]|0;
    $46 = ($45>>>0)<($written$0$ph421>>>0);
    if (!($46)) {
     HEAP32[$2>>2] = 0;
     $50 = (($45) - ($written$0$ph421))|0;
     $51 = ($50|0)==(0);
     if ($51) {
      $ret$sroa$0$1466 = $ret$sroa$0$1;$ret$sroa$11$sroa$0$sroa$0$1468 = $ret$sroa$11$sroa$0$sroa$0$1;$ret$sroa$11$sroa$10$1467 = $ret$sroa$11$sroa$10$1;
      break;
     }
     $52 = HEAP32[$1>>2]|0;
     $53 = (($52) + ($written$0$ph421)|0);
     _memmove(($52|0),($53|0),($50|0))|0;
     HEAP32[$2>>2] = $50;
     $ret$sroa$0$1466 = $ret$sroa$0$1;$ret$sroa$11$sroa$0$sroa$0$1468 = $ret$sroa$11$sroa$0$sroa$0$1;$ret$sroa$11$sroa$10$1467 = $ret$sroa$11$sroa$10$1;
     break;
    }
    __THREW__ = 0;
    invoke_vi(86,(3064|0));
    $47 = __THREW__; __THREW__ = 0;
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    $cond$i = ($ret$sroa$0$1|0)==(1);
    $cond$i$i$i = ($ret$sroa$11$sroa$0$sroa$0$1<<24>>24)==(2);
    $or$cond = $cond$i & $cond$i$i$i;
    if (!($or$cond)) {
     $personalityslot$sroa$0$0 = $48;$personalityslot$sroa$8$0 = $49;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
    $8 = $ret$sroa$11$sroa$10$1;
    $9 = ((($8)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($8)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$12>>2]|0;
    FUNCTION_TABLE_vi[$13 & 511]($10);
    $14 = HEAP32[$11>>2]|0;
    $15 = ((($14)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0);
    if (!($17)) {
     $18 = ((($14)) + 8|0);
     $19 = HEAP32[$18>>2]|0;
     ___rust_deallocate($10,$16,$19);
    }
    ___rust_deallocate($8,12,4);
    $personalityslot$sroa$0$0 = $48;$personalityslot$sroa$8$0 = $49;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
  }
 } while(0);
 $ret$sroa$11$sroa$0$sroa$0$0$insert$ext = $ret$sroa$11$sroa$0$sroa$0$1468&255;
 HEAP32[$0>>2] = $ret$sroa$0$1466;
 $_45$sroa$4$0$$sroa_idx300 = ((($0)) + 4|0);
 HEAP32[$_45$sroa$4$0$$sroa_idx300>>2] = $ret$sroa$11$sroa$0$sroa$0$0$insert$ext;
 $_45$sroa$5$0$$sroa_idx302 = ((($0)) + 8|0);
 HEAP32[$_45$sroa$5$0$$sroa_idx302>>2] = $ret$sroa$11$sroa$10$1467;
 STACKTOP = sp;return;
}
function __ZN50__LT_F_u20_as_u20_alloc__boxed__FnBox_LT_A_GT__GT_8call_box17h1edac03fba8b4340E($0) {
 $0 = $0|0;
 var $$unpack13 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack13 = HEAP32[$0>>2]|0;
 (_pthread_mutex_lock(($$unpack13|0))|0);
 $1 = ((($$unpack13)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = (1);
 (_pthread_mutex_unlock(($$unpack13|0))|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($4-1)|0);
 $5 = ($4|0)==(1);
 if (!($5)) {
  ___rust_deallocate($2,4,4);
  ___rust_deallocate($0,4,4);
  return;
 }
 /* fence */;
 __THREW__ = 0;
 invoke_vi(353,($2|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  ___rust_deallocate($0,4,4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  ___rust_deallocate($2,4,4);
  ___rust_deallocate($0,4,4);
  return;
 }
}
function __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h7dab877bc2e15135E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink$i$i = 0, $$sink78$i$i = 0, $$sroa_idx51$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$i = 0, $_3$i$i = 0, $_3$sroa$0$0$$sroa_idx3$i$i = 0, $_32$sroa$6$sroa$0$0$extract$trunc$i = 0, $_35$i = 0, $_5$i = 0, $cond$i$i$i = 0, $cond$i$i$i51$i = 0, $not$switch$i$i$i$i$i$i = 0;
 var $self$i$sroa$0$0$copyload$i = 0, $self$i$sroa$4$0$$sroa_idx121$i = 0, $self$i$sroa$4$0$copyload$i = 0, $self$i$sroa$6$0$$sroa_idx124$i = 0, $self$i$sroa$6$0$copyload$i = 0, $self$sroa$0$0$copyload$i$i = 0, $self$sroa$0$0$copyload$i$i$i = 0, $self$sroa$5$0$$sroa_idx54$i$i = 0, $self$sroa$5$0$copyload$i$i = 0, $self$sroa$6$0$$sroa_idx54$i$i$i = 0, $self$sroa$6$0$copyload$i$i$i = 0, $self$sroa$9$0$$sroa_idx59$i$i$i = 0, $self$sroa$9$0$$sroa_idx60$i$i = 0, $self$sroa$9$0$copyload$i$i = 0, $self$sroa$9$0$copyload$i$i131$i = 0, $switch3$i$i = 0, $switch3$i$i$i = 0, $switch3$i48$i = 0, $switch7$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_3$i$i = sp + 40|0;
 $_5$i = sp + 32|0;
 $_10$i = sp + 16|0;
 $_35$i = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $cond$i$i$i = ($6|0)==(0);
 if (!($cond$i$i$i)) {
  __ZN4core6result13unwrap_failed17h77140d60754f5e94E_240();
  // unreachable;
 }
 HEAP32[$5>>2] = -1;
 $7 = ((($4)) + 8|0);
 __THREW__ = 0;
 invoke_viiii(354,($_5$i|0),10,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 L4: do {
  if (!($9)) {
   $10 = HEAP32[$_5$i>>2]|0;
   $switch7$i = ($10|0)==(1);
   L6: do {
    if ($switch7$i) {
     $13 = ((($_5$i)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($14) + 1)|0;
     $16 = ($15>>>0)>($3>>>0);
     if ($16) {
      __THREW__ = 0;
      invoke_vii(317,($15|0),($3|0));
      $17 = __THREW__; __THREW__ = 0;
      break L4;
     }
     __THREW__ = 0;
     invoke_viiii(355,($_10$i|0),($7|0),($2|0),($15|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      break L4;
     }
     $self$i$sroa$0$0$copyload$i = HEAP32[$_10$i>>2]|0;
     $self$i$sroa$4$0$$sroa_idx121$i = ((($_10$i)) + 4|0);
     $self$i$sroa$4$0$copyload$i = HEAP32[$self$i$sroa$4$0$$sroa_idx121$i>>2]|0;
     $switch3$i$i = ($self$i$sroa$0$0$copyload$i|0)==(1);
     if ($switch3$i$i) {
      $self$i$sroa$6$0$$sroa_idx124$i = ((($_10$i)) + 8|0);
      $self$i$sroa$6$0$copyload$i = HEAP32[$self$i$sroa$6$0$$sroa_idx124$i>>2]|0;
      HEAP32[$0>>2] = 1;
      $_3$sroa$0$0$$sroa_idx3$i$i = ((($0)) + 4|0);
      $20 = $_3$sroa$0$0$$sroa_idx3$i$i;
      $21 = $20;
      HEAP32[$21>>2] = $self$i$sroa$4$0$copyload$i;
      $22 = (($20) + 4)|0;
      $23 = $22;
      HEAP32[$23>>2] = $self$i$sroa$6$0$copyload$i;
     } else {
      $24 = ($self$i$sroa$4$0$copyload$i|0)==($15|0);
      do {
       if ($24) {
        __THREW__ = 0;
        invoke_vii(351,($_3$i$i|0),($7|0));
        $30 = __THREW__; __THREW__ = 0;
        $31 = $30&1;
        if ($31) {
         break L4;
        }
        $self$sroa$0$0$copyload$i$i$i = HEAP32[$_3$i$i>>2]|0;
        $switch3$i$i$i = ($self$sroa$0$0$copyload$i$i$i|0)==(1);
        if ($switch3$i$i$i) {
         $self$sroa$6$0$$sroa_idx54$i$i$i = ((($_3$i$i)) + 4|0);
         $self$sroa$6$0$copyload$i$i$i = HEAP32[$self$sroa$6$0$$sroa_idx54$i$i$i>>2]|0;
         $self$sroa$9$0$$sroa_idx59$i$i$i = ((($_3$i$i)) + 8|0);
         $self$sroa$9$0$copyload$i$i131$i = HEAP32[$self$sroa$9$0$$sroa_idx59$i$i$i>>2]|0;
         $_32$sroa$6$sroa$0$0$extract$trunc$i = $self$sroa$6$0$copyload$i$i$i&255;
         $cond$i$i$i51$i = ($_32$sroa$6$sroa$0$0$extract$trunc$i<<24>>24)==(2);
         if (!($cond$i$i$i51$i)) {
          break;
         }
         $35 = ((($self$sroa$9$0$copyload$i$i131$i)) + 4|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ((($self$sroa$9$0$copyload$i$i131$i)) + 8|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = HEAP32[$38>>2]|0;
         __THREW__ = 0;
         invoke_vi($39|0,($36|0));
         $40 = __THREW__; __THREW__ = 0;
         $41 = $40&1;
         if ($41) {
          break L4;
         }
         $42 = HEAP32[$37>>2]|0;
         $43 = ((($42)) + 4|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = ($44|0)==(0);
         if (!($45)) {
          $46 = ((($42)) + 8|0);
          $47 = HEAP32[$46>>2]|0;
          ___rust_deallocate($36,$44,$47);
         }
         ___rust_deallocate($self$sroa$9$0$copyload$i$i131$i,12,4);
         break;
        }
        $32 = ((($4)) + 20|0);
        $33 = HEAP8[$32>>0]|0;
        $not$switch$i$i$i$i$i$i = ($33<<24>>24)==(1);
        if (!($not$switch$i$i$i$i$i$i)) {
         __THREW__ = 0;
         invoke_vi(86,(3288|0));
         $34 = __THREW__; __THREW__ = 0;
         break L4;
        }
        $25 = (($2) + ($15)|0);
        $26 = (($3) - ($15))|0;
        __THREW__ = 0;
        invoke_viiii(355,($_35$i|0),($7|0),($25|0),($26|0));
        $27 = __THREW__; __THREW__ = 0;
        $28 = $27&1;
        if ($28) {
         break L4;
        }
        $self$sroa$0$0$copyload$i$i = HEAP32[$_35$i>>2]|0;
        $self$sroa$5$0$$sroa_idx54$i$i = ((($_35$i)) + 4|0);
        $self$sroa$5$0$copyload$i$i = HEAP32[$self$sroa$5$0$$sroa_idx54$i$i>>2]|0;
        $switch3$i48$i = ($self$sroa$0$0$copyload$i$i|0)==(1);
        if ($switch3$i48$i) {
         $self$sroa$9$0$$sroa_idx60$i$i = ((($_35$i)) + 8|0);
         $self$sroa$9$0$copyload$i$i = HEAP32[$self$sroa$9$0$$sroa_idx60$i$i>>2]|0;
         $$sroa_idx51$i$i = ((($0)) + 8|0);
         HEAP32[$$sroa_idx51$i$i>>2] = $self$sroa$9$0$copyload$i$i;
         $$sink$i$i = $self$sroa$5$0$copyload$i$i;$$sink78$i$i = 1;
        } else {
         $29 = (($self$sroa$5$0$copyload$i$i) + ($15))|0;
         $$sink$i$i = $29;$$sink78$i$i = 0;
        }
        HEAP32[$0>>2] = $$sink78$i$i;
        $49 = ((($0)) + 4|0);
        HEAP32[$49>>2] = $$sink$i$i;
        break L6;
       }
      } while(0);
      HEAP32[$0>>2] = 0;
      $48 = ((($0)) + 4|0);
      HEAP32[$48>>2] = $self$i$sroa$4$0$copyload$i;
     }
     HEAP32[$5>>2] = 0;
     STACKTOP = sp;return;
    } else {
     __THREW__ = 0;
     invoke_viiii(355,($0|0),($7|0),($2|0),($3|0));
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if ($12) {
      break L4;
     }
    }
   } while(0);
   HEAP32[$5>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $50 = ___cxa_find_matching_catch_2()|0;
 $51 = tempRet0;
 HEAP32[$5>>2] = 0;
 ___resumeException($50|0);
 // unreachable;
}
function __ZN3std3sys3imp6memchr7memrchr17he3a29948d4e4665fE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_21$0$i$i = 0, $i$0$i$i$i = 0, $i$0$i25$i$i = 0, $offset$0$i$i = 0, $offset$1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2;
 $5 = (($4) + ($3))|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $offset$0$i$i = $3;
  } else {
   $8 = ($6>>>0)<($3>>>0);
   $9 = (($3) - ($6))|0;
   $_21$0$i$i = $8 ? $9 : 0;
   $10 = ($_21$0$i$i>>>0)>($3>>>0);
   if ($10) {
    __ZN4core5slice22slice_index_order_fail17hba8ec71a2aed226bE($_21$0$i$i,$3);
    // unreachable;
   }
   $11 = (($2) + ($_21$0$i$i)|0);
   $12 = (($3) - ($_21$0$i$i))|0;
   $13 = (($11) + ($12)|0);
   $15 = $13;$i$0$i25$i$i = $12;
   while(1) {
    $14 = ($15|0)==($11|0);
    if ($14) {
     $offset$0$i$i = $_21$0$i$i;
     break L1;
    }
    $16 = ((($15)) + -1|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==($1<<24>>24);
    $19 = (($i$0$i25$i$i) + -1)|0;
    if ($18) {
     break;
    } else {
     $15 = $16;$i$0$i25$i$i = $19;
    }
   }
   $20 = (($19) + ($_21$0$i$i))|0;
   HEAP32[$0>>2] = 1;
   $21 = ((($0)) + 4|0);
   HEAP32[$21>>2] = $20;
   return;
  }
 } while(0);
 $22 = $1&255;
 $23 = $22 << 8;
 $24 = $23 | $22;
 $25 = $24 << 16;
 $26 = $25 | $24;
 $offset$1$i$i = $offset$0$i$i;
 while(1) {
  $27 = ($offset$1$i$i>>>0)>(7);
  if (!($27)) {
   break;
  }
  $37 = (($offset$1$i$i) + -8)|0;
  $38 = (($2) + ($37)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($offset$1$i$i) + -4)|0;
  $41 = (($2) + ($40)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $39 ^ $26;
  $44 = (($43) + -16843009)|0;
  $45 = $43 & -2139062144;
  $46 = $45 ^ -2139062144;
  $47 = $46 & $44;
  $48 = $42 ^ $26;
  $49 = (($48) + -16843009)|0;
  $50 = $48 & -2139062144;
  $51 = $50 ^ -2139062144;
  $52 = $51 & $49;
  $53 = $52 | $47;
  $54 = ($53|0)==(0);
  if ($54) {
   $offset$1$i$i = $37;
  } else {
   break;
  }
 }
 $28 = ($offset$1$i$i>>>0)>($3>>>0);
 if ($28) {
  __ZN4core5slice20slice_index_len_fail17h94caf57088443fc0E($offset$1$i$i,$3);
  // unreachable;
 }
 $29 = (($2) + ($offset$1$i$i)|0);
 $31 = $29;$i$0$i$i$i = $offset$1$i$i;
 while(1) {
  $30 = ($31|0)==($2|0);
  if ($30) {
   label = 16;
   break;
  }
  $32 = ((($31)) + -1|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = ($33<<24>>24)==($1<<24>>24);
  $35 = (($i$0$i$i$i) + -1)|0;
  if ($34) {
   label = 15;
   break;
  } else {
   $31 = $32;$i$0$i$i$i = $35;
  }
 }
 if ((label|0) == 15) {
  HEAP32[$0>>2] = 1;
  $36 = ((($0)) + 4|0);
  HEAP32[$36>>2] = $35;
  return;
 }
 else if ((label|0) == 16) {
  HEAP32[$0>>2] = 0;
  return;
 }
}
function __ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17ha913346b0f60c36dE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$pre = 0, $$sink$i$i$i129 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_16 = 0, $_3$sroa$0$0$$sroa_idx3$i = 0, $_34$sroa$4$0$$sroa_idx62 = 0, $_34$sroa$5$0$$sroa_idx64 = 0, $not$switch$i = 0, $phitmp = 0, $r$i$i$sroa$6$sroa$0$0$extract$trunc131 = 0, $r$i$i$sroa$6$sroa$0$0$insert$insert = 0, $r$i$i$sroa$6$sroa$6$0$extract$shift = 0, $r$i$i$sroa$6$sroa$6$0$extract$trunc133 = 0, $r$sroa$0$1 = 0;
 var $r$sroa$6$1 = 0, $r$sroa$8$1 = 0, $ret$sroa$5$sroa$6$0$i$i128 = 0, $self$i$sroa$0$0$copyload = 0, $self$i$sroa$4$0$$sroa_idx99 = 0, $self$i$sroa$4$0$copyload = 0, $self$i$sroa$5$0$$sroa_idx101 = 0, $self$i$sroa$5$0$copyload = 0, $switch$i39 = 0, $switch3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_16 = sp;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3))|0;
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 do {
  if ($9) {
   __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h4ed7741ed36dc6f0E($_16,$1);
   $self$i$sroa$0$0$copyload = HEAP32[$_16>>2]|0;
   $switch3$i = ($self$i$sroa$0$0$copyload|0)==(1);
   if (!($switch3$i)) {
    $$pre = HEAP32[$7>>2]|0;
    $15 = $$pre;
    break;
   }
   $self$i$sroa$4$0$$sroa_idx99 = ((($_16)) + 4|0);
   $self$i$sroa$4$0$copyload = HEAP32[$self$i$sroa$4$0$$sroa_idx99>>2]|0;
   $self$i$sroa$5$0$$sroa_idx101 = ((($_16)) + 8|0);
   $self$i$sroa$5$0$copyload = HEAP32[$self$i$sroa$5$0$$sroa_idx101>>2]|0;
   HEAP32[$0>>2] = 1;
   $_3$sroa$0$0$$sroa_idx3$i = ((($0)) + 4|0);
   $10 = $_3$sroa$0$0$$sroa_idx3$i;
   $11 = $10;
   HEAP32[$11>>2] = $self$i$sroa$4$0$copyload;
   $12 = (($10) + 4)|0;
   $13 = $12;
   HEAP32[$13>>2] = $self$i$sroa$5$0$copyload;
   STACKTOP = sp;return;
  } else {
   $15 = $8;
  }
 } while(0);
 $14 = ($15>>>0)>($3>>>0);
 if ($14) {
  __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h994e49272e95c367E_252($1,$3);
  $16 = HEAP32[$4>>2]|0;
  $17 = (($16) + ($3))|0;
  HEAP32[$4>>2] = $17;
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + ($16)|0);
  _memcpy(($19|0),($2|0),($3|0))|0;
  HEAP32[$0>>2] = 0;
  $20 = ((($0)) + 4|0);
  HEAP32[$20>>2] = $3;
  STACKTOP = sp;return;
 }
 $21 = ((($1)) + 14|0);
 HEAP8[$21>>0] = 1;
 $22 = ((($1)) + 12|0);
 $23 = HEAP8[$22>>0]|0;
 $not$switch$i = ($23<<24>>24)==(1);
 if (!($not$switch$i)) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3288);
  // unreachable;
 }
 $24 = ((($1)) + 13|0);
 $25 = HEAP8[$24>>0]|0;
 $switch$i39 = ($25<<24>>24)==(1);
 do {
  if ($switch$i39) {
   $r$sroa$0$1 = 0;$r$sroa$6$1 = $3;$r$sroa$8$1 = 0;
  } else {
   $26 = (_write(1,$2,$3)|0);
   $27 = ($26|0)==(-1);
   if ($27) {
    $28 = (___errno_location()|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(9);
    if ($30) {
     $r$sroa$0$1 = 0;$r$sroa$6$1 = $3;$r$sroa$8$1 = 9;
     break;
    } else {
     $$sink$i$i$i129 = 1;$r$i$i$sroa$6$sroa$0$0$extract$trunc131 = 0;$r$i$i$sroa$6$sroa$6$0$extract$trunc133 = 0;$ret$sroa$5$sroa$6$0$i$i128 = $29;
    }
   } else {
    $r$i$i$sroa$6$sroa$6$0$extract$shift = $26 & -256;
    $phitmp = $26 & 255;
    $$sink$i$i$i129 = 0;$r$i$i$sroa$6$sroa$0$0$extract$trunc131 = $phitmp;$r$i$i$sroa$6$sroa$6$0$extract$trunc133 = $r$i$i$sroa$6$sroa$6$0$extract$shift;$ret$sroa$5$sroa$6$0$i$i128 = 0;
   }
   $r$i$i$sroa$6$sroa$0$0$insert$insert = $r$i$i$sroa$6$sroa$0$0$extract$trunc131 | $r$i$i$sroa$6$sroa$6$0$extract$trunc133;
   $r$sroa$0$1 = $$sink$i$i$i129;$r$sroa$6$1 = $r$i$i$sroa$6$sroa$0$0$insert$insert;$r$sroa$8$1 = $ret$sroa$5$sroa$6$0$i$i128;
  }
 } while(0);
 HEAP8[$21>>0] = 0;
 HEAP32[$0>>2] = $r$sroa$0$1;
 $_34$sroa$4$0$$sroa_idx62 = ((($0)) + 4|0);
 HEAP32[$_34$sroa$4$0$$sroa_idx62>>2] = $r$sroa$6$1;
 $_34$sroa$5$0$$sroa_idx64 = ((($0)) + 8|0);
 HEAP32[$_34$sroa$5$0$$sroa_idx64>>2] = $r$sroa$8$1;
 STACKTOP = sp;return;
}
function __ZN3std2io5Write9write_all17hd80e2f83c60246f1E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink$index = 0, $$sink$index2 = 0, $$sroa_idx = 0, $$sroa_idx68 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0$0$i = 0, $_0$0$i$pre = 0, $_10 = 0, $_28$sroa$0$0$$sroa_idx16 = 0, $_4$i$i$i = 0, $buf$sroa$0$097$ph = 0, $buf$sroa$8$098$ph = 0, $cond = 0, $cond$i$i$i = 0, $cond78 = 0, $or$cond = 0, $switch3 = 0, $switch3133 = 0, $switch3134 = 0, $trunc$i = 0, $trunc$i$clear = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0;
 var $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$i$sroa$4$i = sp + 44|0;
 $x$sroa$0$i$i$i$i$i = sp + 32|0;
 $_4$i$i$i = sp + 16|0;
 $_10 = sp;
 $4 = ($3|0)==(0);
 L1: do {
  if (!($4)) {
   $5 = ((($_10)) + 4|0);
   $6 = ((($_10)) + 8|0);
   $7 = ((($_10)) + 4|0);
   $buf$sroa$0$097$ph = $2;$buf$sroa$8$098$ph = $3;
   L3: while(1) {
    __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h7dab877bc2e15135E($_10,$1,$buf$sroa$0$097$ph,$buf$sroa$8$098$ph);
    $8 = HEAP32[$_10>>2]|0;
    $switch3133 = ($8|0)==(1);
    L5: do {
     if ($switch3133) {
      $switch3134 = $switch3133;
      while(1) {
       $18 = HEAP16[$5>>1]|0;
       $19 = $18&255;
       $trunc$i = $18&255;
       $20 = ($18&65535) >>> 8;
       $21 = $20&255;
       $trunc$i$clear = $trunc$i & 3;
       switch ($trunc$i$clear<<24>>24) {
       case 0:  {
        $22 = HEAP32[$6>>2]|0;
        $cond78 = ($22|0)==(4);
        if (!($cond78)) {
         label = 19;
         break L3;
        }
        break;
       }
       case 1:  {
        $_0$0$i = $21;
        label = 18;
        break;
       }
       case 2:  {
        $23 = HEAP32[$6>>2]|0;
        $_0$0$i$pre = HEAP8[$23>>0]|0;
        $_0$0$i = $_0$0$i$pre;
        label = 18;
        break;
       }
       default: {
        label = 15;
        break L3;
       }
       }
       if ((label|0) == 18) {
        label = 0;
        $26 = ($_0$0$i<<24>>24)==(15);
        if (!($26)) {
         label = 19;
         break L3;
        }
       }
       $cond$i$i$i = ($19<<24>>24)==(2);
       $or$cond = $switch3134 & $cond$i$i$i;
       if ($or$cond) {
        $38 = HEAP32[$6>>2]|0;
        $39 = ((($38)) + 4|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ((($38)) + 8|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = HEAP32[$42>>2]|0;
        __THREW__ = 0;
        invoke_vi($43|0,($40|0));
        $44 = __THREW__; __THREW__ = 0;
        $45 = $44&1;
        if ($45) {
         label = 31;
         break L3;
        }
        $46 = HEAP32[$41>>2]|0;
        $47 = ((($46)) + 4|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($48|0)==(0);
        if (!($49)) {
         $50 = ((($46)) + 8|0);
         $51 = HEAP32[$50>>2]|0;
         ___rust_deallocate($40,$48,$51);
        }
        ___rust_deallocate($38,12,4);
       }
       __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h7dab877bc2e15135E($_10,$1,$buf$sroa$0$097$ph,$buf$sroa$8$098$ph);
       $52 = HEAP32[$_10>>2]|0;
       $switch3 = ($52|0)==(1);
       if ($switch3) {
        $switch3134 = $switch3;
       } else {
        break L5;
       }
      }
     }
    } while(0);
    $17 = HEAP32[$7>>2]|0;
    $cond = ($17|0)==(0);
    if ($cond) {
     label = 6;
     break;
    }
    $24 = ($buf$sroa$8$098$ph>>>0)<($17>>>0);
    if ($24) {
     label = 17;
     break;
    }
    $53 = (($buf$sroa$0$097$ph) + ($17)|0);
    $54 = (($buf$sroa$8$098$ph) - ($17))|0;
    $55 = ($54|0)==(0);
    if ($55) {
     break L1;
    } else {
     $buf$sroa$0$097$ph = $53;$buf$sroa$8$098$ph = $54;
    }
   }
   do {
    if ((label|0) == 6) {
     __THREW__ = 0;
     invoke_viii(330,($_4$i$i$i|0),(8240|0),28);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      label = 30;
     } else {
      ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
      $11 = (___rust_allocate(12,4)|0);
      $12 = ($11|0)==(0|0);
      if ($12) {
       __THREW__ = 0;
       invoke_v(326);
       $13 = __THREW__; __THREW__ = 0;
       label = 30;
       break;
      }
      ;HEAP32[$11>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$11+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
      $14 = (___rust_allocate(12,4)|0);
      $15 = ($14|0)==(0|0);
      if ($15) {
       __THREW__ = 0;
       invoke_v(326);
       $16 = __THREW__; __THREW__ = 0;
       label = 30;
       break;
      } else {
       HEAP8[$14>>0] = 14;
       $x$i$sroa$4$0$$sroa_raw_idx$i = ((($14)) + 1|0);
       ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
       $x$i$sroa$5$0$$sroa_idx$i = ((($14)) + 4|0);
       HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $11;
       $x$i$sroa$6$0$$sroa_idx$i = ((($14)) + 8|0);
       HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 184;
       $37 = $14;
       HEAP32[$0>>2] = 1;
       $$sroa_idx = ((($0)) + 4|0);
       HEAP32[$$sroa_idx>>2] = 2;
       $$sroa_idx68 = ((($0)) + 8|0);
       HEAP32[$$sroa_idx68>>2] = $37;
       label = 22;
       break;
      }
     }
    }
    else if ((label|0) == 15) {
     // unreachable;
    }
    else if ((label|0) == 17) {
     __THREW__ = 0;
     invoke_vii(352,($17|0),($buf$sroa$8$098$ph|0));
     $25 = __THREW__; __THREW__ = 0;
     label = 30;
    }
    else if ((label|0) == 19) {
     $27 = $5;
     $28 = $27;
     $29 = HEAP32[$28>>2]|0;
     $30 = (($27) + 4)|0;
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     HEAP32[$0>>2] = 1;
     $_28$sroa$0$0$$sroa_idx16 = ((($0)) + 4|0);
     $33 = $_28$sroa$0$0$$sroa_idx16;
     $34 = $33;
     HEAP32[$34>>2] = $29;
     $35 = (($33) + 4)|0;
     $36 = $35;
     HEAP32[$36>>2] = $32;
     label = 22;
    }
    else if ((label|0) == 31) {
     $58 = ___cxa_find_matching_catch_2()|0;
     $59 = tempRet0;
     $$sink$index = $58;$$sink$index2 = $59;
     ___resumeException($$sink$index|0);
     // unreachable;
    }
   } while(0);
   if ((label|0) == 22) {
    STACKTOP = sp;return;
   }
   else if ((label|0) == 30) {
    $56 = ___cxa_find_matching_catch_2()|0;
    $57 = tempRet0;
    $$sink$index = $56;$$sink$index2 = $57;
    ___resumeException($$sink$index|0);
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN57__LT_std__io__stdio__Stdout_u20_as_u20_std__io__Write_GT_9write_fmt17h5e154dddd2574f03E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$i$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i$i19 = 0, $$pre$i$i$i$i$i$i$i32 = 0, $$pre$phi$i$i$i$i$i$i$iZ2D = 0, $$pre3$i$i$i$i$i$i$i = 0, $$pre3$i$i$i$i$i$i$i15 = 0, $$pre3$i$i$i$i$i$i$i27 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i17 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i30 = 0, $$sroa_idx$i = 0, $$sroa_idx31$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_13$i = 0, $_4$i$i$i$i = 0, $_4$sroa$4$0$off32$i = 0, $_6 = 0, $_7$sroa$0$0$$sroa_idx$i = 0;
 var $args = 0, $cond$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i22$i = 0, $cond$i21$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $output$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$0$0$i = 0, $personalityslot$sroa$5$0 = 0, $personalityslot$sroa$5$0$i = 0, $switch$i = 0, $switch$i$i$i$i$i$i$i$i = 0, $switch$i$i$i$i$i$i$i$i13 = 0, $switch$i$i$i$i$i$i$i$i25 = 0, $switch2tmp$i$i$i$i$i$i$i$i$i = 0, $switch2tmp$i$i$i$i$i$i$i$i$i11 = 0, $switch2tmp$i$i$i$i$i$i$i$i$i22 = 0, $x$i$sroa$4$0$$sroa_raw_idx$i$i = 0;
 var $x$i$sroa$4$i$i = 0, $x$i$sroa$5$0$$sroa_idx$i$i = 0, $x$i$sroa$6$0$$sroa_idx$i$i = 0, $x$sroa$0$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $x$i$sroa$4$i$i = sp + 100|0;
 $x$sroa$0$i$i$i$i$i$i = sp + 88|0;
 $_4$i$i$i$i = sp + 72|0;
 $output$i = sp + 56|0;
 $_13$i = sp + 32|0;
 $args = sp + 8|0;
 $_6 = sp;
 ;HEAP32[$args>>2]=HEAP32[$2>>2]|0;HEAP32[$args+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$args+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$args+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$args+20>>2]=HEAP32[$2+20>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 (_pthread_mutex_lock(($5|0))|0);
 $6 = $4;
 $7 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17hadbbbfd8ce4ffa28E()|0);
 $switch2tmp$i$i$i$i$i$i$i$i$i = ($7|0)==(0|0);
 if ($switch2tmp$i$i$i$i$i$i$i$i$i) {
  __ZN4core6option13expect_failed17he4838b1eef3c5645E(7951,57);
  // unreachable;
 }
 $8 = HEAP32[$7>>2]|0;
 $switch$i$i$i$i$i$i$i$i = ($8|0)==(1);
 if ($switch$i$i$i$i$i$i$i$i) {
  $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = ((($7)) + 4|0);
  $$pre$i$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i>>2]|0;
  $$pre$phi$i$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i$i;$13 = $$pre$i$i$i$i$i$i$i;
 } else {
  $9 = $7;
  $10 = $9;
  HEAP32[$10>>2] = 1;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = 0;
  $$pre3$i$i$i$i$i$i$i = ((($7)) + 4|0);
  $$pre$phi$i$i$i$i$i$i$iZ2D = $$pre3$i$i$i$i$i$i$i;$13 = 0;
 }
 HEAP32[$$pre$phi$i$i$i$i$i$i$iZ2D>>2] = $13;
 $14 = ($13|0)!=(0);
 $15 = ((($3)) + 32|0);
 $16 = HEAP8[$15>>0]|0;
 $_4$sroa$4$0$off32$i = $14&1;
 HEAP32[$_6>>2] = $6;
 $17 = ((($_6)) + 4|0);
 HEAP8[$17>>0] = $_4$sroa$4$0$off32$i;
 HEAP32[$output$i>>2] = $_6;
 $_7$sroa$0$0$$sroa_idx$i = ((($output$i)) + 4|0);
 HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2] = 0;
 ;HEAP32[$_13$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_13$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_13$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_13$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_13$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_13$i+20>>2]=HEAP32[$args+20>>2]|0;
 __THREW__ = 0;
 $18 = (invoke_iiii(309,($output$i|0),(336|0),($_13$i|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 L8: do {
  if ($20) {
   label = 24;
  } else {
   $switch$i = ($18<<24>>24)==(0);
   do {
    if ($switch$i) {
     HEAP32[$0>>2] = 0;
     label = 18;
    } else {
     $21 = ((($output$i)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(1);
     if ($23) {
      ;HEAP32[$0>>2]=HEAP32[$21>>2]|0;HEAP32[$0+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$21+8>>2]|0;
      break;
     }
     __THREW__ = 0;
     invoke_viii(330,($_4$i$i$i$i|0),(8214|0),15);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 24;
      break L8;
     }
     ;HEAP32[$x$sroa$0$i$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i$i+8>>2]|0;
     $26 = (___rust_allocate(12,4)|0);
     $27 = ($26|0)==(0|0);
     if ($27) {
      __THREW__ = 0;
      invoke_v(326);
      $28 = __THREW__; __THREW__ = 0;
      label = 24;
      break L8;
     }
     ;HEAP32[$26>>2]=HEAP32[$x$sroa$0$i$i$i$i$i$i>>2]|0;HEAP32[$26+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i$i+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i$i+8>>2]|0;
     $29 = (___rust_allocate(12,4)|0);
     $30 = ($29|0)==(0|0);
     if ($30) {
      __THREW__ = 0;
      invoke_v(326);
      $31 = __THREW__; __THREW__ = 0;
      label = 24;
      break L8;
     } else {
      HEAP8[$29>>0] = 16;
      $x$i$sroa$4$0$$sroa_raw_idx$i$i = ((($29)) + 1|0);
      ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i>>0]=HEAP8[$x$i$sroa$4$i$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i+1>>0]=HEAP8[$x$i$sroa$4$i$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i+2>>0]=HEAP8[$x$i$sroa$4$i$i+2>>0]|0;
      $x$i$sroa$5$0$$sroa_idx$i$i = ((($29)) + 4|0);
      HEAP32[$x$i$sroa$5$0$$sroa_idx$i$i>>2] = $26;
      $x$i$sroa$6$0$$sroa_idx$i$i = ((($29)) + 8|0);
      HEAP32[$x$i$sroa$6$0$$sroa_idx$i$i>>2] = 184;
      $32 = $29;
      HEAP32[$0>>2] = 1;
      $$sroa_idx$i = ((($0)) + 4|0);
      HEAP32[$$sroa_idx$i>>2] = 2;
      $$sroa_idx31$i = ((($0)) + 8|0);
      HEAP32[$$sroa_idx31$i>>2] = $32;
      label = 18;
      break;
     }
    }
   } while(0);
   if ((label|0) == 18) {
    $33 = HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2]|0;
    $cond$i21$i = ($33|0)==(1);
    if ($cond$i21$i) {
     $34 = ((($output$i)) + 8|0);
     $35 = HEAP8[$34>>0]|0;
     $cond$i$i$i22$i = ($35<<24>>24)==(2);
     if ($cond$i$i$i22$i) {
      $36 = ((($output$i)) + 12|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($37)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($37)) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = HEAP32[$41>>2]|0;
      __THREW__ = 0;
      invoke_vi($42|0,($39|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $71 = ___cxa_find_matching_catch_2()|0;
       $72 = tempRet0;
       $personalityslot$sroa$0$0$i = $71;$personalityslot$sroa$5$0$i = $72;
       label = 7;
       break;
      }
      $45 = HEAP32[$40>>2]|0;
      $46 = ((($45)) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0);
      if (!($48)) {
       $49 = ((($45)) + 8|0);
       $50 = HEAP32[$49>>2]|0;
       ___rust_deallocate($39,$47,$50);
      }
      ___rust_deallocate($37,12,4);
     }
    }
   }
   $73 = HEAP32[$_6>>2]|0;
   $74 = HEAP8[$17>>0]|0;
   $75 = ($74<<24>>24)==(0);
   if (!($75)) {
    $87 = HEAP32[$_6>>2]|0;
    $88 = HEAP32[$87>>2]|0;
    (_pthread_mutex_unlock(($88|0))|0);
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   $76 = (invoke_i(311)|0);
   $77 = __THREW__; __THREW__ = 0;
   $78 = $77&1;
   do {
    if (!($78)) {
     $switch2tmp$i$i$i$i$i$i$i$i$i11 = ($76|0)==(0|0);
     if ($switch2tmp$i$i$i$i$i$i$i$i$i11) {
      __THREW__ = 0;
      invoke_vii(202,(7951|0),57);
      $79 = __THREW__; __THREW__ = 0;
      break;
     }
     $80 = HEAP32[$76>>2]|0;
     $switch$i$i$i$i$i$i$i$i13 = ($80|0)==(1);
     if (!($switch$i$i$i$i$i$i$i$i13)) {
      $81 = $76;
      $82 = $81;
      HEAP32[$82>>2] = 1;
      $83 = (($81) + 4)|0;
      $84 = $83;
      HEAP32[$84>>2] = 0;
      $$pre3$i$i$i$i$i$i$i15 = ((($76)) + 4|0);
      HEAP32[$$pre3$i$i$i$i$i$i$i15>>2] = 0;
      $87 = HEAP32[$_6>>2]|0;
      $88 = HEAP32[$87>>2]|0;
      (_pthread_mutex_unlock(($88|0))|0);
      STACKTOP = sp;return;
     }
     $$sink$in$phi$trans$insert$i$i$i$i$i$i$i17 = ((($76)) + 4|0);
     $$pre$i$i$i$i$i$i$i19 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i17>>2]|0;
     $85 = ($$pre$i$i$i$i$i$i$i19|0)==(0);
     if ($85) {
      $87 = HEAP32[$_6>>2]|0;
      $88 = HEAP32[$87>>2]|0;
      (_pthread_mutex_unlock(($88|0))|0);
      STACKTOP = sp;return;
     }
     $86 = ((($73)) + 24|0);
     HEAP8[$86>>0] = 1;
     $87 = HEAP32[$_6>>2]|0;
     $88 = HEAP32[$87>>2]|0;
     (_pthread_mutex_unlock(($88|0))|0);
     STACKTOP = sp;return;
    }
   } while(0);
   $104 = ___cxa_find_matching_catch_2()|0;
   $105 = tempRet0;
   $personalityslot$sroa$0$0 = $104;$personalityslot$sroa$5$0 = $105;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 do {
  if ((label|0) == 24) {
   $51 = ___cxa_find_matching_catch_2()|0;
   $52 = tempRet0;
   $53 = HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2]|0;
   $cond$i$i = ($53|0)==(1);
   if ($cond$i$i) {
    $54 = ((($output$i)) + 8|0);
    $55 = HEAP8[$54>>0]|0;
    $cond$i$i$i$i = ($55<<24>>24)==(2);
    if ($cond$i$i$i$i) {
     $56 = ((($output$i)) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($57)) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ((($57)) + 8|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = HEAP32[$61>>2]|0;
     __THREW__ = 0;
     invoke_vi($62|0,($59|0));
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      $89 = ___cxa_find_matching_catch_2()|0;
      $90 = tempRet0;
      $eh$lpad$body$index2Z2D = $90;$eh$lpad$body$indexZ2D = $89;
      break;
     }
     $65 = HEAP32[$60>>2]|0;
     $66 = ((($65)) + 4|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(0);
     if (!($68)) {
      $69 = ((($65)) + 8|0);
      $70 = HEAP32[$69>>2]|0;
      ___rust_deallocate($59,$67,$70);
     }
     ___rust_deallocate($57,12,4);
     $personalityslot$sroa$0$0$i = $51;$personalityslot$sroa$5$0$i = $52;
     label = 7;
    } else {
     $personalityslot$sroa$0$0$i = $51;$personalityslot$sroa$5$0$i = $52;
     label = 7;
    }
   } else {
    $personalityslot$sroa$0$0$i = $51;$personalityslot$sroa$5$0$i = $52;
    label = 7;
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $eh$lpad$body$index2Z2D = $personalityslot$sroa$5$0$i;$eh$lpad$body$indexZ2D = $personalityslot$sroa$0$0$i;
 }
 $91 = HEAP32[$_6>>2]|0;
 $92 = HEAP8[$17>>0]|0;
 $93 = ($92<<24>>24)==(0);
 do {
  if ($93) {
   $94 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17hadbbbfd8ce4ffa28E()|0);
   $switch2tmp$i$i$i$i$i$i$i$i$i22 = ($94|0)==(0|0);
   if ($switch2tmp$i$i$i$i$i$i$i$i$i22) {
    __ZN4core6option13expect_failed17he4838b1eef3c5645E(7951,57);
    // unreachable;
   }
   $95 = HEAP32[$94>>2]|0;
   $switch$i$i$i$i$i$i$i$i25 = ($95|0)==(1);
   if (!($switch$i$i$i$i$i$i$i$i25)) {
    $96 = $94;
    $97 = $96;
    HEAP32[$97>>2] = 1;
    $98 = (($96) + 4)|0;
    $99 = $98;
    HEAP32[$99>>2] = 0;
    $$pre3$i$i$i$i$i$i$i27 = ((($94)) + 4|0);
    HEAP32[$$pre3$i$i$i$i$i$i$i27>>2] = 0;
    break;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i$i$i30 = ((($94)) + 4|0);
   $$pre$i$i$i$i$i$i$i32 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i30>>2]|0;
   $100 = ($$pre$i$i$i$i$i$i$i32|0)==(0);
   if (!($100)) {
    $101 = ((($91)) + 24|0);
    HEAP8[$101>>0] = 1;
   }
  }
 } while(0);
 $102 = HEAP32[$_6>>2]|0;
 $103 = HEAP32[$102>>2]|0;
 (_pthread_mutex_unlock(($103|0))|0);
 $personalityslot$sroa$0$0 = $eh$lpad$body$indexZ2D;$personalityslot$sroa$5$0 = $eh$lpad$body$index2Z2D;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN4drop17hf08af3c93d88269dE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $cond$i = ($2|0)==(1);
 if (!($cond$i)) {
  return;
 }
 $3 = ((($0)) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $cond$i$i$i = ($4<<24>>24)==(2);
 if (!($cond$i$i$i)) {
  return;
 }
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 511]($8);
 $12 = HEAP32[$9>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = ((($12)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  ___rust_deallocate($8,$14,$17);
 }
 ___rust_deallocate($6,12,4);
 return;
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h7f81009b213a6effE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$060 = 0, $_5 = 0, $cond$i = 0;
 var $cond$i$i$i = 0, $e$sroa$0$0$$sroa_idx32 = 0, $switch3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5 = sp;
 $3 = HEAP32[$0>>2]|0;
 __ZN3std2io5Write9write_all17hd80e2f83c60246f1E($_5,$3,$1,$2);
 $4 = HEAP32[$_5>>2]|0;
 $switch3 = ($4|0)==(1);
 if (!($switch3)) {
  $_0$sroa$0$060 = 0;
  STACKTOP = sp;return ($_0$sroa$0$060|0);
 }
 $e$sroa$0$0$$sroa_idx32 = ((($_5)) + 4|0);
 $5 = $e$sroa$0$0$$sroa_idx32;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $cond$i = ($12|0)==(1);
 $13 = ((($0)) + 8|0);
 if ($cond$i) {
  $14 = HEAP8[$13>>0]|0;
  $cond$i$i$i = ($14<<24>>24)==(2);
  if ($cond$i$i$i) {
   $15 = ((($0)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($16)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   invoke_vi($21|0,($18|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $34 = ___cxa_find_matching_catch_2()|0;
    $35 = tempRet0;
    HEAP32[$11>>2] = 1;
    $36 = $13;
    $37 = $36;
    HEAP32[$37>>2] = $7;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = $10;
    ___resumeException($34|0);
    // unreachable;
   }
   $24 = HEAP32[$19>>2]|0;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if (!($27)) {
    $28 = ((($24)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    ___rust_deallocate($18,$26,$29);
   }
   ___rust_deallocate($16,12,4);
  }
 }
 HEAP32[$11>>2] = 1;
 $30 = $13;
 $31 = $30;
 HEAP32[$31>>2] = $7;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $10;
 $_0$sroa$0$060 = 1;
 STACKTOP = sp;return ($_0$sroa$0$060|0);
}
function __ZN4core3fmt5Write10write_char17h3bcd7b2ff37ba567E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $_12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $_12 = sp + 8|0;
 HEAP32[$_12>>2] = 0;
 __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817h6e66fdcf584d84f0E_241($2,$1,$_12);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h7f81009b213a6effE($0,$$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3fmt5Write9write_fmt17h92e2bfedbf85daabE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_10 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp + 24|0;
 $_10 = sp;
 HEAP32[$_8>>2] = $0;
 ;HEAP32[$_10>>2]=HEAP32[$1>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17he0deec3411c715a1E($_8,360,$_10)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0c2ff6996c6becbfE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h7f81009b213a6effE($3,$1,$2)|0);
 return ($4|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hf3aeaca16016d973E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i = 0, $len$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_12$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_12$i>>2] = 0;
 $3 = ($1>>>0)<(128);
 do {
  if ($3) {
   $4 = $1&255;
   HEAP8[$_12$i>>0] = $4;
   $len$0$i = 1;
  } else {
   $5 = ($1>>>0)<(2048);
   if ($5) {
    $6 = $1 >>> 6;
    $7 = $6 & 31;
    $8 = $7&255;
    $9 = $8 | -64;
    HEAP8[$_12$i>>0] = $9;
    $10 = $1 & 63;
    $11 = $10&255;
    $12 = ((($_12$i)) + 1|0);
    $13 = $11 | -128;
    HEAP8[$12>>0] = $13;
    $len$0$i = 2;
    break;
   }
   $14 = ($1>>>0)<(65536);
   if ($14) {
    $15 = $1 >>> 12;
    $16 = $15 & 15;
    $17 = $16&255;
    $18 = $17 | -32;
    HEAP8[$_12$i>>0] = $18;
    $19 = $1 >>> 6;
    $20 = $19 & 63;
    $21 = $20&255;
    $22 = ((($_12$i)) + 1|0);
    $23 = $21 | -128;
    HEAP8[$22>>0] = $23;
    $24 = $1 & 63;
    $25 = $24&255;
    $26 = ((($_12$i)) + 2|0);
    $27 = $25 | -128;
    HEAP8[$26>>0] = $27;
    $len$0$i = 3;
    break;
   } else {
    $28 = $1 >>> 18;
    $29 = $28 & 7;
    $30 = $29&255;
    $31 = $30 | -16;
    HEAP8[$_12$i>>0] = $31;
    $32 = $1 >>> 12;
    $33 = $32 & 63;
    $34 = $33&255;
    $35 = ((($_12$i)) + 1|0);
    $36 = $34 | -128;
    HEAP8[$35>>0] = $36;
    $37 = $1 >>> 6;
    $38 = $37 & 63;
    $39 = $38&255;
    $40 = ((($_12$i)) + 2|0);
    $41 = $39 | -128;
    HEAP8[$40>>0] = $41;
    $42 = $1 & 63;
    $43 = $42&255;
    $44 = ((($_12$i)) + 3|0);
    $45 = $43 | -128;
    HEAP8[$44>>0] = $45;
    $len$0$i = 4;
    break;
   }
  }
 } while(0);
 $46 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h7f81009b213a6effE($2,$_12$i,$len$0$i)|0);
 STACKTOP = sp;return ($46|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17ha75b529eee914ce5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 24|0;
 $_10$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17he0deec3411c715a1E($_8$i,360,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3std2io5stdio6_print17hd5142059f0ff0076E($0) {
 $0 = $0|0;
 var $$in$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi61Z2D = 0, $$pre60 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_12$sroa$4$0$$sroa_idx$i$i = 0, $_15 = 0, $_16$i$i = 0, $_17$i$i = 0, $_20 = 0, $_6$i$i$i = 0, $_6$sroa$0$0$$sroa_idx$i = 0;
 var $_7 = 0, $_8 = 0, $args = 0, $cond = 0, $cond$i$i = 0, $cond$i$i42 = 0, $e = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$7$0 = 0, $phitmp = 0, $phitmp$i = 0, $result = 0, $src$i$sroa$5$0$$sroa_idx24$i$i = 0, $switch = 0, $switch$i = 0, $switch2tmp$i$i = 0, $switchtmp$i = 0, $switchtmp$i47$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $_6$i$i$i = sp + 144|0;
 $_16$i$i = sp + 136|0;
 $_17$i$i = sp + 112|0;
 $args = sp + 88|0;
 $result = sp + 72|0;
 $_7 = sp + 64|0;
 $_8 = sp + 40|0;
 $e = sp + 32|0;
 $_15 = sp + 8|0;
 $_20 = sp;
 ;HEAP32[$args>>2]=HEAP32[$0>>2]|0;HEAP32[$args+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$args+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$args+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$args+20>>2]=HEAP32[$0+20>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_ii(318,(2748|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if (!($3)) {
   $switchtmp$i = ($1|0)==(0|0);
   L3: do {
    if ($switchtmp$i) {
     label = 5;
    } else {
     $4 = HEAP32[$1>>2]|0;
     $cond = ($4|0)==(1);
     if ($cond) {
      __THREW__ = 0;
      $8 = (invoke_ii(318,(2748|0))|0);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       break L1;
      }
      $switch2tmp$i$i = ($8|0)==(0|0);
      if ($switch2tmp$i$i) {
       __THREW__ = 0;
       invoke_vii(202,(7951|0),57);
       $11 = __THREW__; __THREW__ = 0;
       break L1;
      }
      $12 = HEAP32[$8>>2]|0;
      $switch$i = ($12|0)==(1);
      if ($switch$i) {
       $17 = ((($8)) + 4|0);
       $$pre$i = HEAP32[$17>>2]|0;
       $phitmp$i = ($$pre$i|0)==(0);
       if ($phitmp$i) {
        $$pre60 = ((($8)) + 8|0);
        $$in$i = $17;$$pre$phi61Z2D = $$pre60;
        label = 13;
       }
      } else {
       $src$i$sroa$5$0$$sroa_idx24$i$i = ((($8)) + 8|0);
       HEAP32[$8>>2] = 1;
       $_12$sroa$4$0$$sroa_idx$i$i = ((($8)) + 4|0);
       HEAP32[$_12$sroa$4$0$$sroa_idx$i$i>>2] = 0;
       $13 = $src$i$sroa$5$0$$sroa_idx24$i$i;
       $14 = $13;
       HEAP32[$14>>2] = 0;
       $15 = (($13) + 4)|0;
       $16 = $15;
       HEAP32[$16>>2] = 0;
       $$in$i = $_12$sroa$4$0$$sroa_idx$i$i;$$pre$phi61Z2D = $src$i$sroa$5$0$$sroa_idx24$i$i;
       label = 13;
      }
      do {
       if ((label|0) == 13) {
        HEAP32[$$in$i>>2] = -1;
        $18 = HEAP32[$$pre$phi61Z2D>>2]|0;
        $switchtmp$i47$i$i = ($18|0)==(0|0);
        if ($switchtmp$i47$i$i) {
         HEAP32[$$in$i>>2] = 0;
         break;
        }
        $19 = ((($8)) + 12|0);
        $20 = HEAP32[$19>>2]|0;
        ;HEAP32[$_6$i$i$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_6$i$i$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_6$i$i$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_6$i$i$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_6$i$i$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_6$i$i$i+20>>2]=HEAP32[$args+20>>2]|0;
        $21 = ((($20)) + 24|0);
        $22 = HEAP32[$21>>2]|0;
        __THREW__ = 0;
        invoke_viii($22|0,($result|0),($18|0),($_6$i$i$i|0));
        $23 = __THREW__; __THREW__ = 0;
        $24 = $23&1;
        if (!($24)) {
         HEAP32[$$in$i>>2] = 0;
         break L3;
        }
        $35 = ___cxa_find_matching_catch_2()|0;
        $36 = tempRet0;
        HEAP32[$$in$i>>2] = 0;
        $personalityslot$sroa$0$0 = $35;$personalityslot$sroa$7$0 = $36;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
      } while(0);
      __THREW__ = 0;
      $25 = (invoke_i(356)|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       break L1;
      }
      HEAP32[$_16$i$i>>2] = $25;
      ;HEAP32[$_17$i$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_17$i$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_17$i$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_17$i$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_17$i$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_17$i$i+20>>2]=HEAP32[$args+20>>2]|0;
      $28 = $25;
      __THREW__ = 0;
      invoke_viii(357,($result|0),($_16$i$i|0),($_17$i$i|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       $39 = ___cxa_find_matching_catch_2()|0;
       $40 = tempRet0;
       $41 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($41-1)|0);
       $42 = ($41|0)==(1);
       if (!($42)) {
        $personalityslot$sroa$0$0 = $39;$personalityslot$sroa$7$0 = $40;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
       /* fence */;
       __THREW__ = 0;
       invoke_vi(353,($_16$i$i|0));
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        break L1;
       } else {
        $personalityslot$sroa$0$0 = $39;$personalityslot$sroa$7$0 = $40;
       }
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      }
      $31 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($31-1)|0);
      $32 = ($31|0)==(1);
      if ($32) {
       /* fence */;
       __THREW__ = 0;
       invoke_vi(353,($_16$i$i|0));
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        $37 = ___cxa_find_matching_catch_2()|0;
        $38 = tempRet0;
        $personalityslot$sroa$0$0 = $37;$personalityslot$sroa$7$0 = $38;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
      }
     } else {
      label = 5;
     }
    }
   } while(0);
   if ((label|0) == 5) {
    __THREW__ = 0;
    $5 = (invoke_i(356)|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
    HEAP32[$_7>>2] = $5;
    ;HEAP32[$_8>>2]=HEAP32[$args>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8+20>>2]=HEAP32[$args+20>>2]|0;
    $46 = $5;
    __THREW__ = 0;
    invoke_viii(357,($result|0),($_7|0),($_8|0));
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     $92 = ___cxa_find_matching_catch_2()|0;
     $93 = tempRet0;
     $94 = HEAP32[$46>>2]|0;HEAP32[$46>>2] = (($94-1)|0);
     $95 = ($94|0)==(1);
     if (!($95)) {
      $personalityslot$sroa$0$0 = $92;$personalityslot$sroa$7$0 = $93;
      ___resumeException($personalityslot$sroa$0$0|0);
      // unreachable;
     }
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h230c7157d950d2b1E($_7);
     $personalityslot$sroa$0$0 = $92;$personalityslot$sroa$7$0 = $93;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
    $49 = HEAP32[$46>>2]|0;HEAP32[$46>>2] = (($49-1)|0);
    $50 = ($49|0)==(1);
    if ($50) {
     /* fence */;
     __THREW__ = 0;
     invoke_vi(353,($_7|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $88 = ___cxa_find_matching_catch_2()|0;
      $89 = tempRet0;
      $$pre = HEAP32[$result>>2]|0;
      $phitmp = ($$pre|0)==(1);
      if (!($phitmp)) {
       $personalityslot$sroa$0$0 = $88;$personalityslot$sroa$7$0 = $89;
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      }
      $73 = ((($result)) + 4|0);
      $74 = HEAP8[$73>>0]|0;
      $cond$i$i = ($74<<24>>24)==(2);
      if (!($cond$i$i)) {
       $personalityslot$sroa$0$0 = $88;$personalityslot$sroa$7$0 = $89;
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      }
      $75 = ((($result)) + 8|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($76)) + 4|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ((($76)) + 8|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = HEAP32[$80>>2]|0;
      FUNCTION_TABLE_vi[$81 & 511]($78);
      $82 = HEAP32[$79>>2]|0;
      $83 = ((($82)) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($84|0)==(0);
      if (!($85)) {
       $86 = ((($82)) + 8|0);
       $87 = HEAP32[$86>>2]|0;
       ___rust_deallocate($78,$84,$87);
      }
      ___rust_deallocate($76,12,4);
      $personalityslot$sroa$0$0 = $88;$personalityslot$sroa$7$0 = $89;
      ___resumeException($personalityslot$sroa$0$0|0);
      // unreachable;
     }
    }
   }
   $45 = HEAP32[$result>>2]|0;
   $switch = ($45|0)==(1);
   if (!($switch)) {
    STACKTOP = sp;return;
   }
   $53 = ((($result)) + 4|0);
   $54 = $53;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 4)|0;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = $e;
   $61 = $60;
   HEAP32[$61>>2] = $56;
   $62 = (($60) + 4)|0;
   $63 = $62;
   HEAP32[$63>>2] = $59;
   $64 = $e;
   HEAP32[$_20>>2] = $64;
   $65 = ((($_20)) + 4|0);
   HEAP32[$65>>2] = (344);
   HEAP32[$_15>>2] = 3052;
   $66 = ((($_15)) + 4|0);
   HEAP32[$66>>2] = 1;
   $_6$sroa$0$0$$sroa_idx$i = ((($_15)) + 8|0);
   HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
   $67 = ((($_15)) + 16|0);
   HEAP32[$67>>2] = $_20;
   $68 = ((($_15)) + 20|0);
   HEAP32[$68>>2] = 1;
   __THREW__ = 0;
   invoke_vii(345,($_15|0),(2736|0));
   $69 = __THREW__; __THREW__ = 0;
   $70 = ___cxa_find_matching_catch_2()|0;
   $71 = tempRet0;
   $72 = HEAP8[$e>>0]|0;
   $cond$i$i42 = ($72<<24>>24)==(2);
   if (!($cond$i$i42)) {
    $personalityslot$sroa$0$0 = $70;$personalityslot$sroa$7$0 = $71;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $96 = ((($e)) + 4|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ((($97)) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($97)) + 8|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = HEAP32[$101>>2]|0;
   FUNCTION_TABLE_vi[$102 & 511]($99);
   $103 = HEAP32[$100>>2]|0;
   $104 = ((($103)) + 4|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($105|0)==(0);
   if (!($106)) {
    $107 = ((($103)) + 8|0);
    $108 = HEAP32[$107>>2]|0;
    ___rust_deallocate($99,$105,$108);
   }
   ___rust_deallocate($97,12,4);
   $personalityslot$sroa$0$0 = $70;$personalityslot$sroa$7$0 = $71;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 $90 = ___cxa_find_matching_catch_2()|0;
 $91 = tempRet0;
 $personalityslot$sroa$0$0 = $90;$personalityslot$sroa$7$0 = $91;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN3std4sync4once4Once10call_inner17haa9b9787ced7c3faE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$fca$0$0$insert$fca$0$0$gep = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $complete = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $lpad$phi54$index = 0, $lpad$phi54$index7 = 0, $node = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$7$0 = 0, $state$0 = 0, $state$1 = 0, $success = 0, $success11 = 0, $switch3tmp$i$i = 0, $switchtmp$i$i = 0, $switchtmp$i$i$i = 0, $switchtmp$i$i37 = 0, $switchtmp$i$i42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $complete = sp + 16|0;
 $node = sp;
 $4 = HEAP32[$0>>2]|0;
 $$fca$0$0$insert$fca$0$0$gep = ((($node)) + 8|0);
 $5 = ((($node)) + 4|0);
 $6 = $node;
 $7 = $6 | 2;
 $state$0 = $4;
 L1: while(1) {
  switch ($state$0|0) {
  case 3:  {
   label = 7;
   break L1;
   break;
  }
  case 1:  {
   if (!($1)) {
    label = 3;
    break L1;
   }
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $9 = $state$0 & 3;
   $10 = ($9|0)==(2);
   if (!($10)) {
    label = 12;
    break L1;
   }
   __THREW__ = 0;
   $19 = (invoke_i(315)|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    label = 34;
    break L1;
   }
   $switchtmp$i$i$i = ($19|0)==(0|0);
   if ($switchtmp$i$i$i) {
    label = 17;
    break L1;
   }
   __THREW__ = 0;
   $22 = (invoke_i(316)|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 34;
    break L1;
   }
   $switch3tmp$i$i = ($22|0)==(0);
   if ($switch3tmp$i$i) {
    label = 17;
    break L1;
   }
   HEAP32[$node>>2] = $22;
   HEAP8[$$fca$0$0$insert$fca$0$0$gep>>0] = 0;
   HEAP32[$5>>2] = 0;
   $state$1 = $state$0;
   while(1) {
    $28 = $state$1 & 3;
    $29 = ($28|0)==(2);
    if (!($29)) {
     label = 20;
     break;
    }
    $35 = $state$1 & -4;
    $36 = $35;
    HEAP32[$5>>2] = $36;
    $37 = HEAP32[$0>>2]|0;if (($37|0) == ($state$1|0)) HEAP32[$0>>2] = $7;
    $success11 = ($37|0)==($state$1|0);
    if ($success11) {
     break;
    } else {
     $state$1 = $37;
    }
   }
   if ((label|0) == 20) {
    label = 0;
    $30 = HEAP32[$node>>2]|0;
    $switchtmp$i$i37 = ($30|0)==(0|0);
    if (!($switchtmp$i$i37)) {
     $31 = HEAP32[$30>>2]|0;HEAP32[$30>>2] = (($31-1)|0);
     $32 = ($31|0)==(1);
     if ($32) {
      /* fence */;
      __THREW__ = 0;
      invoke_vi(321,($node|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       label = 36;
       break L1;
      }
     }
    }
    $state$0 = $state$1;
    continue L1;
   }
   while(1) {
    $38 = HEAP8[$$fca$0$0$insert$fca$0$0$gep>>0]|0;
    $39 = ($38<<24>>24)==(0);
    if (!($39)) {
     break;
    }
    __THREW__ = 0;
    invoke_v(359);
    $40 = __THREW__; __THREW__ = 0;
    $41 = $40&1;
    if ($41) {
     label = 31;
     break L1;
    }
   }
   $42 = HEAP32[$0>>2]|0;
   $43 = HEAP32[$node>>2]|0;
   $switchtmp$i$i42 = ($43|0)==(0|0);
   if (!($switchtmp$i$i42)) {
    $44 = HEAP32[$43>>2]|0;HEAP32[$43>>2] = (($44-1)|0);
    $45 = ($44|0)==(1);
    if ($45) {
     /* fence */;
     __THREW__ = 0;
     invoke_vi(321,($node|0));
     $46 = __THREW__; __THREW__ = 0;
     $47 = $46&1;
     if ($47) {
      label = 36;
      break L1;
     }
    }
   }
   $state$0 = $42;
   continue L1;
  }
  }
  $8 = HEAP32[$0>>2]|0;if (($8|0) == ($state$0|0)) HEAP32[$0>>2] = 2;
  $success = ($8|0)==($state$0|0);
  if ($success) {
   label = 8;
   break;
  } else {
   $state$0 = $8;
  }
 }
 do {
  if ((label|0) == 3) {
   __ZN3std9panicking11begin_panic17h8e1740626d0f752eE_234(10669,42,2712);
   // unreachable;
  }
  else if ((label|0) == 7) {
   STACKTOP = sp;return;
  }
  else if ((label|0) == 8) {
   HEAP8[$complete>>0] = 1;
   $11 = ((($complete)) + 4|0);
   HEAP32[$11>>2] = $0;
   $12 = ($state$0|0)==(1);
   $13 = ((($3)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   __THREW__ = 0;
   invoke_vii($14|0,($2|0),($12|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    $59 = ___cxa_find_matching_catch_2()|0;
    $60 = tempRet0;
    __ZN59__LT_std__sync__once__Finish_u20_as_u20_core__ops__Drop_GT_4drop17h8896f25cb1819fd6E($complete);
    $personalityslot$sroa$0$0 = $59;$personalityslot$sroa$7$0 = $60;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   HEAP8[$complete>>0] = 0;
   __THREW__ = 0;
   invoke_vi(358,($complete|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $57 = ___cxa_find_matching_catch_2()|0;
    $58 = tempRet0;
    $lpad$phi54$index = $57;$lpad$phi54$index7 = $58;
    label = 38;
    break;
   }
   STACKTOP = sp;return;
  }
  else if ((label|0) == 12) {
   __ZN3std9panicking11begin_panic17h8e1740626d0f752eE_234(10711,47,2700);
   // unreachable;
  }
  else if ((label|0) == 17) {
   __THREW__ = 0;
   invoke_vii(202,(10400|0),94);
   $25 = __THREW__; __THREW__ = 0;
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = tempRet0;
   $lpad$phi$index = $26;$lpad$phi$index2 = $27;
   label = 35;
  }
  else if ((label|0) == 31) {
   $48 = ___cxa_find_matching_catch_2()|0;
   $49 = tempRet0;
   $50 = HEAP32[$node>>2]|0;
   $switchtmp$i$i = ($50|0)==(0|0);
   if ($switchtmp$i$i) {
    $personalityslot$sroa$0$0 = $48;$personalityslot$sroa$7$0 = $49;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $51 = HEAP32[$50>>2]|0;HEAP32[$50>>2] = (($51-1)|0);
   $52 = ($51|0)==(1);
   if (!($52)) {
    $personalityslot$sroa$0$0 = $48;$personalityslot$sroa$7$0 = $49;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   /* fence */;
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($node);
   $personalityslot$sroa$0$0 = $48;$personalityslot$sroa$7$0 = $49;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
  else if ((label|0) == 34) {
   $53 = ___cxa_find_matching_catch_2()|0;
   $54 = tempRet0;
   $lpad$phi$index = $53;$lpad$phi$index2 = $54;
   label = 35;
  }
  else if ((label|0) == 36) {
   $55 = ___cxa_find_matching_catch_2()|0;
   $56 = tempRet0;
   $lpad$phi54$index = $55;$lpad$phi54$index7 = $56;
   label = 38;
  }
 } while(0);
 if ((label|0) == 35) {
  $personalityslot$sroa$0$0 = $lpad$phi$index;$personalityslot$sroa$7$0 = $lpad$phi$index2;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 else if ((label|0) == 38) {
  $personalityslot$sroa$0$0 = $lpad$phi54$index;$personalityslot$sroa$7$0 = $lpad$phi54$index7;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
}
function __ZN59__LT_std__sync__once__Finish_u20_as_u20_core__ops__Drop_GT_4drop17h8896f25cb1819fd6E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_12 = 0, $_23 = 0, $_28 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $left_val = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$5$0 = 0, $queue$0 = 0, $queue1$033 = 0, $right_val = 0, $switch3tmp$i = 0, $thread = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_12 = sp + 56|0;
 $left_val = sp + 52|0;
 $right_val = sp + 48|0;
 $_23 = sp + 24|0;
 $_28 = sp + 8|0;
 $thread = sp;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $6 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = 3;
  $queue$0 = $6;
 } else {
  $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = 1;
  $queue$0 = $5;
 }
 $7 = $queue$0 & 3;
 HEAP32[$_12>>2] = $7;
 HEAP32[$left_val>>2] = $_12;
 HEAP32[$right_val>>2] = 3060;
 $8 = ($7|0)==(2);
 if (!($8)) {
  $9 = $left_val;
  $10 = $right_val;
  HEAP32[$_28>>2] = $9;
  $11 = ((($_28)) + 4|0);
  HEAP32[$11>>2] = (36);
  $12 = ((($_28)) + 8|0);
  HEAP32[$12>>2] = $10;
  $13 = ((($_28)) + 12|0);
  HEAP32[$13>>2] = (36);
  HEAP32[$_23>>2] = 2496;
  $14 = ((($_23)) + 4|0);
  HEAP32[$14>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i = ((($_23)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $15 = ((($_23)) + 16|0);
  HEAP32[$15>>2] = $_28;
  $16 = ((($_23)) + 20|0);
  HEAP32[$16>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17he05914c28470d251E($_23,2688);
  // unreachable;
 }
 $17 = $queue$0 & -4;
 $18 = ($17|0)==(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = $17;
 $queue1$033 = $19;
 while(1) {
  $20 = ((($queue1$033)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$queue1$033>>2]|0;
  HEAP32[$queue1$033>>2] = 0;
  $switch3tmp$i = ($22|0)==(0);
  if ($switch3tmp$i) {
   label = 11;
   break;
  }
  HEAP32[$thread>>2] = $22;
  $26 = ((($queue1$033)) + 8|0);
  HEAP8[$26>>0] = 1;
  __THREW__ = 0;
  invoke_vi(360,($thread|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   label = 16;
   break;
  }
  $29 = HEAP32[$thread>>2]|0;
  $30 = HEAP32[$29>>2]|0;HEAP32[$29>>2] = (($30-1)|0);
  $31 = ($30|0)==(1);
  if ($31) {
   /* fence */;
   __THREW__ = 0;
   invoke_vi(321,($thread|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    label = 18;
    break;
   }
  }
  $34 = ($21|0)==(0|0);
  if ($34) {
   label = 8;
   break;
  } else {
   $queue1$033 = $21;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 11) {
  __THREW__ = 0;
  invoke_vi(86,(3288|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = ___cxa_find_matching_catch_2()|0;
  $25 = tempRet0;
  $personalityslot$sroa$0$0 = $24;$personalityslot$sroa$5$0 = $25;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 else if ((label|0) == 16) {
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  $37 = HEAP32[$thread>>2]|0;
  $38 = HEAP32[$37>>2]|0;HEAP32[$37>>2] = (($38-1)|0);
  $39 = ($38|0)==(1);
  if (!($39)) {
   $personalityslot$sroa$0$0 = $35;$personalityslot$sroa$5$0 = $36;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
  /* fence */;
  __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($thread);
  $personalityslot$sroa$0$0 = $35;$personalityslot$sroa$5$0 = $36;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 else if ((label|0) == 18) {
  $40 = ___cxa_find_matching_catch_2()|0;
  $41 = tempRet0;
  $personalityslot$sroa$0$0 = $40;$personalityslot$sroa$5$0 = $41;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
}
function __ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17h9ea84ea1f8d96723E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i$i = 0, $$sroa_idx$i$i$i$i = 0, $$sroa_idx$i$i$i$i$i$i$i = 0, $$sroa_idx$i$i$i$i$i42$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_34$sroa$0$0$copyload$i$i = 0, $_34$sroa$4$0$$sroa_idx88$i$i = 0, $_34$sroa$4$0$copyload$i$i = 0;
 var $_34$sroa$5$0$$sroa_idx90$i$i = 0, $_34$sroa$5$0$copyload$i$i = 0, $iter$sroa$0$0$i$i = 0, $iter$sroa$0$0$ph$i$i = 0, $iter2$sroa$7$0$i$i = 0, $magicptr$i$i = 0, $not$$i$i$i$i$i$i = 0, $not$$i$i$i$i48$i$i = 0, $personalityslot$sroa$0$2$i$i = 0, $personalityslot$sroa$7$2$i$i = 0, $switch2$i = 0, $switch3tmp$i$i$i$i = 0, $switch3tmp$i$i43$i$i = 0, $switchtmp$i$i = 0, $t$sroa$0$0$copyload$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $t$sroa$0$0$copyload$i$i$i = HEAP8[$2>>0]|0;
 HEAP8[$2>>0] = 0;
 $switch2$i = ($t$sroa$0$0$copyload$i$i$i<<24>>24)==(0);
 if ($switch2$i) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3288);
  // unreachable;
 }
 (_pthread_mutex_lock(((15880)|0))|0);
 __ZN4drop17h7f57aaaebd8c9200E(16044);
 HEAP32[4011] = 0;
 (_pthread_mutex_unlock(((15880)|0))|0);
 $iter$sroa$0$0$ph$i$i = 0;
 L4: while(1) {
  $iter$sroa$0$0$i$i = $iter$sroa$0$0$ph$i$i;
  L6: while(1) {
   $3 = ($iter$sroa$0$0$i$i>>>0)<(10);
   $4 = (($iter$sroa$0$0$i$i) + 1)|0;
   if (!($3)) {
    label = 30;
    break L4;
   }
   (_pthread_mutex_lock(((15904)|0))|0);
   $5 = HEAP32[4014]|0;
   $6 = ($iter$sroa$0$0$i$i|0)==(9);
   $$$i$i = $6 ? (1) : 0;
   HEAP32[4014] = $$$i$i;
   (_pthread_mutex_unlock(((15904)|0))|0);
   $magicptr$i$i = $5;
   switch ($magicptr$i$i|0) {
   case 1:  {
    label = 7;
    break L4;
    break;
   }
   case 0:  {
    $iter$sroa$0$0$i$i = $4;
    break;
   }
   default: {
    break L6;
   }
   }
  }
  $_34$sroa$0$0$copyload$i$i = HEAP32[$5>>2]|0;
  $_34$sroa$4$0$$sroa_idx88$i$i = ((($5)) + 4|0);
  $_34$sroa$4$0$copyload$i$i = HEAP32[$_34$sroa$4$0$$sroa_idx88$i$i>>2]|0;
  $_34$sroa$5$0$$sroa_idx90$i$i = ((($5)) + 8|0);
  $_34$sroa$5$0$copyload$i$i = HEAP32[$_34$sroa$5$0$$sroa_idx90$i$i>>2]|0;
  $7 = (($_34$sroa$0$0$copyload$i$i) + ($_34$sroa$5$0$copyload$i$i<<3)|0);
  $iter2$sroa$7$0$i$i = $_34$sroa$0$0$copyload$i$i;
  while(1) {
   $8 = ($iter2$sroa$7$0$i$i|0)==($7|0);
   if ($8) {
    break;
   }
   $12 = ((($iter2$sroa$7$0$i$i)) + 8|0);
   $28 = HEAP32[$iter2$sroa$7$0$i$i>>2]|0;
   $switchtmp$i$i = ($28|0)==(0);
   if ($switchtmp$i$i) {
    label = 20;
    break;
   }
   $$sroa_idx$i$i$i$i = ((($iter2$sroa$7$0$i$i)) + 4|0);
   $29 = HEAP32[$$sroa_idx$i$i$i$i>>2]|0;
   $30 = $28;
   $31 = ((($29)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   invoke_vi($32|0,($30|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    label = 11;
    break L4;
   } else {
    $iter2$sroa$7$0$i$i = $12;
   }
  }
  L14: do {
   if ((label|0) == 20) {
    label = 0;
    $35 = ($12|0)==($7|0);
    if (!($35)) {
     $37 = $12;
     while(1) {
      $36 = ((($37)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $$sroa_idx$i$i$i$i$i42$i$i = ((($37)) + 4|0);
      $39 = HEAP32[$$sroa_idx$i$i$i$i$i42$i$i>>2]|0;
      $40 = $38;
      $switch3tmp$i$i43$i$i = ($38|0)==(0);
      if ($switch3tmp$i$i43$i$i) {
       break L14;
      }
      $41 = $39;
      $42 = HEAP32[$41>>2]|0;
      __THREW__ = 0;
      invoke_vi($42|0,($40|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       label = 29;
       break L4;
      }
      $45 = $39;
      $46 = ((($45)) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0);
      if (!($48)) {
       $50 = ((($45)) + 8|0);
       $51 = HEAP32[$50>>2]|0;
       ___rust_deallocate($40,$47,$51);
      }
      $49 = ($36|0)==($7|0);
      if ($49) {
       break;
      } else {
       $37 = $36;
      }
     }
    }
   }
  } while(0);
  $not$$i$i$i$i48$i$i = ($_34$sroa$4$0$copyload$i$i|0)==(0);
  if (!($not$$i$i$i$i48$i$i)) {
   $52 = $_34$sroa$4$0$copyload$i$i << 3;
   ___rust_deallocate($_34$sroa$0$0$copyload$i$i,$52,4);
  }
  ___rust_deallocate($5,12,4);
  $iter$sroa$0$0$ph$i$i = $4;
 }
 if ((label|0) == 7) {
  __ZN3std9panicking11begin_panic17h8e1740626d0f752eE_234(10758,39,2676);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  $11 = ($12|0)==($7|0);
  L29: do {
   if (!($11)) {
    $14 = $12;
    while(1) {
     $13 = ((($14)) + 8|0);
     $15 = HEAP32[$14>>2]|0;
     $$sroa_idx$i$i$i$i$i$i$i = ((($14)) + 4|0);
     $16 = HEAP32[$$sroa_idx$i$i$i$i$i$i$i>>2]|0;
     $17 = $15;
     $switch3tmp$i$i$i$i = ($15|0)==(0);
     if ($switch3tmp$i$i$i$i) {
      break L29;
     }
     $18 = $16;
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vi[$19 & 511]($17);
     $20 = $16;
     $21 = ((($20)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0);
     if (!($23)) {
      $25 = ((($20)) + 8|0);
      $26 = HEAP32[$25>>2]|0;
      ___rust_deallocate($17,$22,$26);
     }
     $24 = ($13|0)==($7|0);
     if ($24) {
      break;
     } else {
      $14 = $13;
     }
    }
   }
  } while(0);
  $not$$i$i$i$i$i$i = ($_34$sroa$4$0$copyload$i$i|0)==(0);
  if ($not$$i$i$i$i$i$i) {
   $personalityslot$sroa$0$2$i$i = $9;$personalityslot$sroa$7$2$i$i = $10;
   ___rust_deallocate($5,12,4);
   ___resumeException($personalityslot$sroa$0$2$i$i|0);
   // unreachable;
  }
  $27 = $_34$sroa$4$0$copyload$i$i << 3;
  ___rust_deallocate($_34$sroa$0$0$copyload$i$i,$27,4);
  $personalityslot$sroa$0$2$i$i = $9;$personalityslot$sroa$7$2$i$i = $10;
  ___rust_deallocate($5,12,4);
  ___resumeException($personalityslot$sroa$0$2$i$i|0);
  // unreachable;
 }
 else if ((label|0) == 29) {
  $53 = ___cxa_find_matching_catch_2()|0;
  $54 = tempRet0;
  $personalityslot$sroa$0$2$i$i = $53;$personalityslot$sroa$7$2$i$i = $54;
  ___rust_deallocate($5,12,4);
  ___resumeException($personalityslot$sroa$0$2$i$i|0);
  // unreachable;
 }
 else if ((label|0) == 30) {
  return;
 }
}
function __ZN4core3ops6FnOnce9call_once17h766c5d88e7c78cdeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 __ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17h9ea84ea1f8d96723E($self,$1);
 STACKTOP = sp;return;
}
function __ZN4drop17h7f57aaaebd8c9200E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i$i = 0, $not$$i$i$i$i$i$i$i$i = 0, $switchtmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $switchtmp = ($1|0)==(0|0);
 if ($switchtmp) {
  return;
 }
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + (($4*12)|0)|0);
 $6 = ($4|0)==(0);
 if (!($6)) {
  $8 = $2;
  while(1) {
   $7 = ((($8)) + 4|0);
   $9 = HEAP32[$7>>2]|0;
   $not$$i$i$i$i$i$i$i$i = ($9|0)==(0);
   if (!($not$$i$i$i$i$i$i$i$i)) {
    $10 = HEAP32[$8>>2]|0;
    ___rust_deallocate($10,$9,1);
   }
   $11 = ((($8)) + 12|0);
   $12 = ($11|0)==($5|0);
   if ($12) {
    break;
   } else {
    $8 = $11;
   }
  }
 }
 $13 = ((($1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $not$$i$i$i$i$i = ($14|0)==(0);
 if (!($not$$i$i$i$i$i)) {
  $15 = ($14*12)|0;
  $16 = HEAP32[$1>>2]|0;
  ___rust_deallocate($16,$15,4);
 }
 ___rust_deallocate($1,12,4);
 return;
}
function __ZN3std10sys_common11thread_info3set17h1ead0db35ef8c010E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$0$0$0$0$load17 = 0, $$pre$i = 0, $$pre$i28 = 0, $$pre$phi$i41Z2D = 0, $$pre$phi$iZ2D = 0, $$unpack$unpack$unpack$unpack38$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $_10$sroa$4$0$$sroa_idx52 = 0;
 var $_11$i = 0, $_4$i$i = 0, $_5$sroa$4$0$$sroa_idx28$i$i = 0, $_9$i$i = 0, $_9$i$i23 = 0, $cond$i$i$i = 0, $cond$i$i$i$i$i = 0, $cond$i$i$i$i$i42 = 0, $cond$i$i$i31 = 0, $eh$lpad$body55$index3Z2D = 0, $eh$lpad$body55$indexZ2D = 0, $f$i = 0, $not$switch$i$i$i = 0, $not$switch$i$i$i37 = 0, $personalityslot$sroa$0$017$i = 0, $personalityslot$sroa$5$016$i = 0, $switch$i = 0, $switch$i26 = 0, $switch2tmp$i$i = 0, $switch2tmp$i$i24 = 0;
 var $switchtmp$i$i$i = 0, $switchtmp$i$i$i$i$i$i = 0, $switchtmp$i$i$i$i$i$i33 = 0, $switchtmp$i39$i$i = 0, $thread = 0, $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i = 0, $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i30 = 0, $value$i$sroa$410$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i = 0, $value$i$sroa$411$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_4$i$i = sp + 88|0;
 $_9$i$i23 = sp + 64|0;
 $f$i = sp + 48|0;
 $_11$i = sp + 32|0;
 $_9$i$i = sp + 8|0;
 $thread = sp;
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 HEAP32[$thread>>2] = $8;
 __THREW__ = 0;
 $9 = (invoke_i(315)|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 L1: do {
  if (!($11)) {
   $switch2tmp$i$i = ($9|0)==(0|0);
   if ($switch2tmp$i$i) {
    __THREW__ = 0;
    invoke_vii(202,(7951|0),57);
    $12 = __THREW__; __THREW__ = 0;
    break;
   }
   $13 = HEAP32[$9>>2]|0;
   $switch$i = ($13|0)==(1);
   do {
    if ($switch$i) {
     $$pre$i = ((($9)) + 4|0);
     $$pre$phi$iZ2D = $$pre$i;
    } else {
     ;HEAP32[$_9$i$i>>2]=HEAP32[$9>>2]|0;HEAP32[$_9$i$i+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$_9$i$i+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$_9$i$i+12>>2]=HEAP32[$9+12>>2]|0;HEAP32[$_9$i$i+16>>2]=HEAP32[$9+16>>2]|0;
     HEAP32[$9>>2] = 1;
     $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i = ((($9)) + 4|0);
     HEAP32[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i>>2] = 0;
     $value$i$sroa$410$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i = ((($9)) + 16|0);
     HEAP32[$value$i$sroa$410$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i>>2] = 0;
     $14 = HEAP32[$_9$i$i>>2]|0;
     $cond$i$i$i = ($14|0)==(1);
     if ($cond$i$i$i) {
      $15 = ((($_9$i$i)) + 16|0);
      $16 = HEAP32[$15>>2]|0;
      $switchtmp$i$i$i$i$i$i = ($16|0)==(0|0);
      if (!($switchtmp$i$i$i$i$i$i)) {
       $17 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($17-1)|0);
       $18 = ($17|0)==(1);
       if ($18) {
        /* fence */;
        __THREW__ = 0;
        invoke_vi(321,($15|0));
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if ($20) {
         break L1;
        }
       }
      }
     }
     $21 = HEAP32[$9>>2]|0;
     $not$switch$i$i$i = ($21|0)==(1);
     if ($not$switch$i$i$i) {
      $$pre$phi$iZ2D = $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i;
      break;
     } else {
      __THREW__ = 0;
      invoke_vi(86,(3288|0));
      $22 = __THREW__; __THREW__ = 0;
      break L1;
     }
    }
   } while(0);
   $23 = HEAP32[$$pre$phi$iZ2D>>2]|0;
   $cond$i$i$i$i$i = ($23|0)==(-1);
   if ($cond$i$i$i$i$i) {
    __THREW__ = 0;
    invoke_v(328);
    $24 = __THREW__; __THREW__ = 0;
    break;
   }
   $25 = ((($9)) + 16|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if (!($27)) {
    __THREW__ = 0;
    invoke_viii(312,(10797|0),38,(2656|0));
    $28 = __THREW__; __THREW__ = 0;
    break;
   }
   $$fca$0$0$0$0$load17 = HEAP32[$thread>>2]|0;
   $29 = $f$i;
   $30 = $29;
   HEAP32[$30>>2] = $4;
   $31 = (($29) + 4)|0;
   $32 = $31;
   HEAP32[$32>>2] = $7;
   $_10$sroa$4$0$$sroa_idx52 = ((($f$i)) + 8|0);
   HEAP32[$_10$sroa$4$0$$sroa_idx52>>2] = $$fca$0$0$0$0$load17;
   $33 = $$fca$0$0$0$0$load17;
   __THREW__ = 0;
   $34 = (invoke_i(315)|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   L24: do {
    if ($36) {
     label = 39;
    } else {
     $switch2tmp$i$i24 = ($34|0)==(0|0);
     if ($switch2tmp$i$i24) {
      __THREW__ = 0;
      invoke_vii(202,(7951|0),57);
      $37 = __THREW__; __THREW__ = 0;
      label = 39;
      break;
     }
     ;HEAP32[$_11$i>>2]=HEAP32[$f$i>>2]|0;HEAP32[$_11$i+4>>2]=HEAP32[$f$i+4>>2]|0;HEAP32[$_11$i+8>>2]=HEAP32[$f$i+8>>2]|0;
     $38 = HEAP32[$34>>2]|0;
     $switch$i26 = ($38|0)==(1);
     L29: do {
      if ($switch$i26) {
       $$pre$i28 = ((($34)) + 4|0);
       $$pre$phi$i41Z2D = $$pre$i28;
      } else {
       ;HEAP32[$_9$i$i23>>2]=HEAP32[$34>>2]|0;HEAP32[$_9$i$i23+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$_9$i$i23+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$_9$i$i23+12>>2]=HEAP32[$34+12>>2]|0;HEAP32[$_9$i$i23+16>>2]=HEAP32[$34+16>>2]|0;
       HEAP32[$34>>2] = 1;
       $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i30 = ((($34)) + 4|0);
       HEAP32[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i30>>2] = 0;
       $value$i$sroa$411$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i = ((($34)) + 16|0);
       HEAP32[$value$i$sroa$411$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i>>2] = 0;
       $39 = HEAP32[$_9$i$i23>>2]|0;
       $cond$i$i$i31 = ($39|0)==(1);
       if ($cond$i$i$i31) {
        $40 = ((($_9$i$i23)) + 16|0);
        $41 = HEAP32[$40>>2]|0;
        $switchtmp$i$i$i$i$i$i33 = ($41|0)==(0|0);
        if ($switchtmp$i$i$i$i$i$i33) {
         label = 28;
        } else {
         $42 = HEAP32[$41>>2]|0;HEAP32[$41>>2] = (($42-1)|0);
         $43 = ($42|0)==(1);
         if ($43) {
          /* fence */;
          __THREW__ = 0;
          invoke_vi(321,($40|0));
          $44 = __THREW__; __THREW__ = 0;
          $45 = $44&1;
          if (!($45)) {
           label = 28;
          }
         } else {
          label = 28;
         }
        }
       } else {
        label = 28;
       }
       do {
        if ((label|0) == 28) {
         $46 = HEAP32[$34>>2]|0;
         $not$switch$i$i$i37 = ($46|0)==(1);
         if ($not$switch$i$i$i37) {
          $$pre$phi$i41Z2D = $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast5$i$sroa_idx$i30;
          break L29;
         } else {
          __THREW__ = 0;
          invoke_vi(86,(3288|0));
          $47 = __THREW__; __THREW__ = 0;
          break;
         }
        }
       } while(0);
       $82 = ___cxa_find_matching_catch_2()|0;
       $83 = tempRet0;
       $84 = ((($_11$i)) + 8|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = HEAP32[$85>>2]|0;HEAP32[$85>>2] = (($86-1)|0);
       $87 = ($86|0)==(1);
       if (!($87)) {
        $personalityslot$sroa$0$017$i = $82;$personalityslot$sroa$5$016$i = $83;
        break L24;
       }
       /* fence */;
       __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($84);
       $personalityslot$sroa$0$017$i = $82;$personalityslot$sroa$5$016$i = $83;
       break L24;
      }
     } while(0);
     $48 = $_11$i;
     $49 = $48;
     $50 = HEAP32[$49>>2]|0;
     $51 = (($48) + 4)|0;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($_11$i)) + 8|0);
     $$unpack$unpack$unpack$unpack38$i$i = HEAP32[$54>>2]|0;
     $55 = $_4$i$i;
     $56 = $55;
     HEAP32[$56>>2] = $50;
     $57 = (($55) + 4)|0;
     $58 = $57;
     HEAP32[$58>>2] = $53;
     $_5$sroa$4$0$$sroa_idx28$i$i = ((($_4$i$i)) + 8|0);
     HEAP32[$_5$sroa$4$0$$sroa_idx28$i$i>>2] = $$unpack$unpack$unpack$unpack38$i$i;
     $59 = HEAP32[$$pre$phi$i41Z2D>>2]|0;
     $cond$i$i$i$i$i42 = ($59|0)==(0);
     $60 = $$unpack$unpack$unpack$unpack38$i$i;
     if (!($cond$i$i$i$i$i42)) {
      __THREW__ = 0;
      invoke_v(319);
      $61 = __THREW__; __THREW__ = 0;
      $62 = ___cxa_find_matching_catch_2()|0;
      $63 = tempRet0;
      $switchtmp$i$i$i = ($$unpack$unpack$unpack$unpack38$i$i|0)==(0);
      if ($switchtmp$i$i$i) {
       $personalityslot$sroa$0$017$i = $62;$personalityslot$sroa$5$016$i = $63;
       break;
      }
      $71 = HEAP32[$60>>2]|0;HEAP32[$60>>2] = (($71-1)|0);
      $72 = ($71|0)==(1);
      if (!($72)) {
       $personalityslot$sroa$0$017$i = $62;$personalityslot$sroa$5$016$i = $63;
       break;
      }
      $73 = ((($_4$i$i)) + 8|0);
      /* fence */;
      __THREW__ = 0;
      invoke_vi(321,($73|0));
      $74 = __THREW__; __THREW__ = 0;
      $75 = $74&1;
      if (!($75)) {
       $personalityslot$sroa$0$017$i = $62;$personalityslot$sroa$5$016$i = $63;
       break;
      }
      $88 = ___cxa_find_matching_catch_2()|0;
      $89 = tempRet0;
      $personalityslot$sroa$0$017$i = $88;$personalityslot$sroa$5$016$i = $89;
      break;
     }
     HEAP32[$$pre$phi$i41Z2D>>2] = -1;
     $64 = ((($34)) + 8|0);
     $65 = ((($34)) + 16|0);
     $66 = HEAP32[$65>>2]|0;
     $switchtmp$i39$i$i = ($66|0)==(0|0);
     if ($switchtmp$i39$i$i) {
      ;HEAP32[$64>>2]=HEAP32[$_4$i$i>>2]|0;HEAP32[$64+4>>2]=HEAP32[$_4$i$i+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$_4$i$i+8>>2]|0;
      HEAP32[$$pre$phi$i41Z2D>>2] = 0;
      STACKTOP = sp;return;
     }
     $67 = HEAP32[$66>>2]|0;HEAP32[$66>>2] = (($67-1)|0);
     $68 = ($67|0)==(1);
     if (!($68)) {
      ;HEAP32[$64>>2]=HEAP32[$_4$i$i>>2]|0;HEAP32[$64+4>>2]=HEAP32[$_4$i$i+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$_4$i$i+8>>2]|0;
      HEAP32[$$pre$phi$i41Z2D>>2] = 0;
      STACKTOP = sp;return;
     }
     /* fence */;
     __THREW__ = 0;
     invoke_vi(321,($65|0));
     $69 = __THREW__; __THREW__ = 0;
     $70 = $69&1;
     if ($70) {
      $76 = ___cxa_find_matching_catch_2()|0;
      $77 = tempRet0;
      ;HEAP32[$64>>2]=HEAP32[$_4$i$i>>2]|0;HEAP32[$64+4>>2]=HEAP32[$_4$i$i+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$_4$i$i+8>>2]|0;
      HEAP32[$$pre$phi$i41Z2D>>2] = 0;
      $personalityslot$sroa$0$017$i = $76;$personalityslot$sroa$5$016$i = $77;
      break;
     } else {
      ;HEAP32[$64>>2]=HEAP32[$_4$i$i>>2]|0;HEAP32[$64+4>>2]=HEAP32[$_4$i$i+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$_4$i$i+8>>2]|0;
      HEAP32[$$pre$phi$i41Z2D>>2] = 0;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 39) {
    $78 = ___cxa_find_matching_catch_2()|0;
    $79 = tempRet0;
    $80 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($80-1)|0);
    $81 = ($80|0)==(1);
    if ($81) {
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($_10$sroa$4$0$$sroa_idx52);
     $personalityslot$sroa$0$017$i = $78;$personalityslot$sroa$5$016$i = $79;
    } else {
     $personalityslot$sroa$0$017$i = $78;$personalityslot$sroa$5$016$i = $79;
    }
   }
   $eh$lpad$body55$index3Z2D = $personalityslot$sroa$5$016$i;$eh$lpad$body55$indexZ2D = $personalityslot$sroa$0$017$i;
   ___resumeException($eh$lpad$body55$indexZ2D|0);
   // unreachable;
  }
 } while(0);
 $90 = ___cxa_find_matching_catch_2()|0;
 $91 = tempRet0;
 $92 = HEAP32[$thread>>2]|0;
 $93 = HEAP32[$92>>2]|0;HEAP32[$92>>2] = (($93-1)|0);
 $94 = ($93|0)==(1);
 if (!($94)) {
  $eh$lpad$body55$index3Z2D = $91;$eh$lpad$body55$indexZ2D = $90;
  ___resumeException($eh$lpad$body55$indexZ2D|0);
  // unreachable;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE($thread);
 $eh$lpad$body55$index3Z2D = $91;$eh$lpad$body55$indexZ2D = $90;
 ___resumeException($eh$lpad$body55$indexZ2D|0);
 // unreachable;
}
function _rust_begin_unwind($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $_11 = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $msg = sp + 16|0;
 $_11 = sp;
 ;HEAP32[$msg>>2]=HEAP32[$0>>2]|0;HEAP32[$msg+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$msg+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$msg+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$msg+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$msg+20>>2]=HEAP32[$0+20>>2]|0;
 HEAP32[$_11>>2] = $1;
 $4 = ((($_11)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_11)) + 8|0);
 HEAP32[$5>>2] = $3;
 __ZN3std9panicking15begin_panic_fmt17he05914c28470d251E($msg,$_11);
 // unreachable;
}
function __ZN3std2rt10lang_start17ha32211a867006146E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$i$i$i$i$i$i$i$i$i$i = 0, $$in$i$i$i$i$i = 0, $$pr$i$i$i$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i$i = 0, $$pre$phi$i$i$iZ2D = 0, $$pre3$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $_13 = 0, $_17 = 0, $_17$i$i = 0, $_23$sroa$4$0$$sroa_idx$i$i = 0, $_23$sroa$5$0$$sroa_idx$i$i = 0, $_3$i = 0, $_32$i$sroa$7$0$$sroa_idx25$i$i$i$i$i = 0, $any_data$i$i = 0, $any_vtable$i$i = 0, $args$sroa$6$0$copyload31$i$i = 0, $data$i$i = 0, $eh$lpad$body$index12Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body7$i$i$i$i$i$index3Z2D = 0, $eh$lpad$body7$i$i$i$i$i$indexZ2D = 0, $f$i$i = 0, $iter$i$sroa$0$058$i$i$i$i$i = 0, $local_len$sroa$5$0$i$lcssa$i$i$i$i$i = 0, $local_len$sroa$5$0$i59$i$i$i$i$i = 0;
 var $not$$i$i$i$i$i$i = 0, $not$$i$i$i$i$i$i$i$i$i = 0, $not$$i$i$i$i$i$i$i$i$i$i$i$i = 0, $not$$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $not$$i$i$i$i$i$i$i19$i$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$0$0$i$i$i$i$i$i = 0, $personalityslot$sroa$5$0 = 0, $personalityslot$sroa$8$0$i$i$i$i$i$i = 0, $phitmp$i$i = 0, $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $ptr$0$i60$i$i$i$i$i = 0, $res$sroa$0$0 = 0, $res$sroa$7$0 = 0, $switch$i$i$i$i = 0, $switch2tmp$i$i$i$i$i = 0, $switch6tmp$i$i$i$i$i$i = 0, $switchtmp$i = 0, $switchtmp$i23 = 0, $vector$i$i$i$i$i = 0;
 var $vector$i$i$i$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $f$i$i = sp + 88|0;
 $_17$i$i = sp + 80|0;
 $any_data$i$i = sp + 96|0;
 $any_vtable$i$i = sp + 92|0;
 $data$i$i = sp + 72|0;
 $vector$i$i$i$i$i$i$i$i$i$i$i = sp + 56|0;
 $vector$i$i$i$i$i = sp + 40|0;
 $_3$i = sp + 24|0;
 $_13 = sp + 8|0;
 $_17 = sp;
 __ZN5alloc3oom3imp15set_oom_handler17h2289765fbbf55766E(361);
 __THREW__ = 0;
 invoke_viii(362,($_13|0),(10835|0),4);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   label = 57;
  } else {
   ;HEAP32[$_3$i>>2]=HEAP32[$_13>>2]|0;HEAP32[$_3$i+4>>2]=HEAP32[$_13+4>>2]|0;HEAP32[$_3$i+8>>2]=HEAP32[$_13+8>>2]|0;
   __THREW__ = 0;
   $5 = (invoke_ii(329,($_3$i|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    label = 57;
   } else {
    $8 = $_17;
    $9 = $8;
    HEAP32[$9>>2] = 0;
    $10 = (($8) + 4)|0;
    $11 = $10;
    HEAP32[$11>>2] = 0;
    __THREW__ = 0;
    invoke_vii(363,($_17|0),($5|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 57;
    } else {
     HEAP32[$vector$i$i$i$i$i>>2] = 1;
     $14 = ((($vector$i$i$i$i$i)) + 4|0);
     HEAP32[$14>>2] = 0;
     $15 = ((($vector$i$i$i$i$i)) + 8|0);
     HEAP32[$15>>2] = 0;
     $16 = ($1|0)>(0);
     $$$i$i$i$i$i$i$i$i$i$i = $16 ? $1 : 0;
     __THREW__ = 0;
     invoke_vii(364,($vector$i$i$i$i$i|0),($$$i$i$i$i$i$i$i$i$i$i|0));
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     L5: do {
      if ($18) {
       $62 = ___cxa_find_matching_catch_2()|0;
       $63 = tempRet0;
       $$pr$i$i$i$i$i = HEAP32[$15>>2]|0;
       $$pre$i$i$i$i$i = HEAP32[$vector$i$i$i$i$i>>2]|0;
       $$in$i$i$i$i$i = $$pre$i$i$i$i$i;$65 = $$pr$i$i$i$i$i;$personalityslot$sroa$0$0$i$i$i$i$i$i = $62;$personalityslot$sroa$8$0$i$i$i$i$i$i = $63;
      } else {
       $19 = HEAP32[$vector$i$i$i$i$i>>2]|0;
       $20 = HEAP32[$15>>2]|0;
       L8: do {
        if ($16) {
         $21 = (($19) + (($20*12)|0)|0);
         $22 = ((($vector$i$i$i$i$i$i$i$i$i$i$i)) + 4|0);
         $23 = ((($vector$i$i$i$i$i$i$i$i$i$i$i)) + 8|0);
         $iter$i$sroa$0$058$i$i$i$i$i = 0;$local_len$sroa$5$0$i59$i$i$i$i$i = $20;$ptr$0$i60$i$i$i$i$i = $21;
         while(1) {
          $24 = (($iter$i$sroa$0$058$i$i$i$i$i) + 1)|0;
          $25 = (($2) + ($iter$i$sroa$0$058$i$i$i$i$i<<2)|0);
          $26 = HEAP32[$25>>2]|0;
          $27 = (_strlen($26)|0);
          $28 = ($27|0)==(-1);
          if ($28) {
           label = 8;
           break;
          }
          $30 = ($27|0)<(0);
          if ($30) {
           label = 10;
           break;
          }
          $32 = ($27|0)==(0);
          if ($32) {
           $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i = (1);
          } else {
           $33 = (___rust_allocate($27,1)|0);
           $34 = ($33|0)==(0|0);
           if ($34) {
            label = 13;
            break;
           } else {
            $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i = $33;
           }
          }
          $36 = $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i;
          HEAP32[$vector$i$i$i$i$i$i$i$i$i$i$i>>2] = $36;
          HEAP32[$22>>2] = $27;
          HEAP32[$23>>2] = 0;
          __THREW__ = 0;
          invoke_vii(327,($vector$i$i$i$i$i$i$i$i$i$i$i|0),($27|0));
          $37 = __THREW__; __THREW__ = 0;
          $38 = $37&1;
          if ($38) {
           label = 15;
           break;
          }
          $43 = HEAP32[$23>>2]|0;
          $44 = (($43) + ($27))|0;
          HEAP32[$23>>2] = $44;
          $45 = HEAP32[$vector$i$i$i$i$i$i$i$i$i$i$i>>2]|0;
          $46 = (($45) + ($43)|0);
          _memcpy(($46|0),($26|0),($27|0))|0;
          $47 = $22;
          $48 = $47;
          $49 = HEAP32[$48>>2]|0;
          $50 = (($47) + 4)|0;
          $51 = $50;
          $52 = HEAP32[$51>>2]|0;
          $switch6tmp$i$i$i$i$i$i = ($45|0)==(0|0);
          if ($switch6tmp$i$i$i$i$i$i) {
           $local_len$sroa$5$0$i$lcssa$i$i$i$i$i = $local_len$sroa$5$0$i59$i$i$i$i$i;
           break L8;
          }
          HEAP32[$ptr$0$i60$i$i$i$i$i>>2] = $45;
          $_32$i$sroa$7$0$$sroa_idx25$i$i$i$i$i = ((($ptr$0$i60$i$i$i$i$i)) + 4|0);
          $53 = $_32$i$sroa$7$0$$sroa_idx25$i$i$i$i$i;
          $54 = $53;
          HEAP32[$54>>2] = $49;
          $55 = (($53) + 4)|0;
          $56 = $55;
          HEAP32[$56>>2] = $52;
          $57 = ((($ptr$0$i60$i$i$i$i$i)) + 12|0);
          $58 = (($local_len$sroa$5$0$i59$i$i$i$i$i) + 1)|0;
          $59 = ($24|0)<($1|0);
          if ($59) {
           $iter$i$sroa$0$058$i$i$i$i$i = $24;$local_len$sroa$5$0$i59$i$i$i$i$i = $58;$ptr$0$i60$i$i$i$i$i = $57;
          } else {
           $local_len$sroa$5$0$i$lcssa$i$i$i$i$i = $58;
           break L8;
          }
         }
         if ((label|0) == 8) {
          __THREW__ = 0;
          invoke_vii(317,-1,0);
          $29 = __THREW__; __THREW__ = 0;
          label = 19;
         }
         else if ((label|0) == 10) {
          __THREW__ = 0;
          invoke_vi(86,(3200|0));
          $31 = __THREW__; __THREW__ = 0;
          label = 19;
         }
         else if ((label|0) == 13) {
          __THREW__ = 0;
          invoke_v(326);
          $35 = __THREW__; __THREW__ = 0;
          label = 19;
         }
         else if ((label|0) == 15) {
          $39 = ___cxa_find_matching_catch_2()|0;
          $40 = tempRet0;
          $41 = HEAP32[$22>>2]|0;
          $not$$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = ($41|0)==(0);
          if ($not$$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i) {
           $eh$lpad$body7$i$i$i$i$i$index3Z2D = $40;$eh$lpad$body7$i$i$i$i$i$indexZ2D = $39;
          } else {
           $42 = HEAP32[$vector$i$i$i$i$i$i$i$i$i$i$i>>2]|0;
           ___rust_deallocate($42,$41,1);
           $eh$lpad$body7$i$i$i$i$i$index3Z2D = $40;$eh$lpad$body7$i$i$i$i$i$indexZ2D = $39;
          }
         }
         if ((label|0) == 19) {
          $60 = ___cxa_find_matching_catch_2()|0;
          $61 = tempRet0;
          $eh$lpad$body7$i$i$i$i$i$index3Z2D = $61;$eh$lpad$body7$i$i$i$i$i$indexZ2D = $60;
         }
         HEAP32[$15>>2] = $local_len$sroa$5$0$i59$i$i$i$i$i;
         $$in$i$i$i$i$i = $19;$65 = $local_len$sroa$5$0$i59$i$i$i$i$i;$personalityslot$sroa$0$0$i$i$i$i$i$i = $eh$lpad$body7$i$i$i$i$i$indexZ2D;$personalityslot$sroa$8$0$i$i$i$i$i$i = $eh$lpad$body7$i$i$i$i$i$index3Z2D;
         break L5;
        } else {
         $local_len$sroa$5$0$i$lcssa$i$i$i$i$i = $20;
        }
       } while(0);
       HEAP32[$15>>2] = $local_len$sroa$5$0$i$lcssa$i$i$i$i$i;
       $args$sroa$6$0$copyload31$i$i = HEAP32[$14>>2]|0;
       (_pthread_mutex_lock(((15880)|0))|0);
       $75 = HEAP32[4011]|0;
       $76 = ($75|0)==(0|0);
       if (!($76)) {
        __THREW__ = 0;
        invoke_viii(312,(10839|0),34,(2632|0));
        $77 = __THREW__; __THREW__ = 0;
        $78 = ___cxa_find_matching_catch_2()|0;
        $79 = tempRet0;
        $80 = (($19) + (($local_len$sroa$5$0$i$lcssa$i$i$i$i$i*12)|0)|0);
        $81 = ($local_len$sroa$5$0$i$lcssa$i$i$i$i$i|0)==(0);
        if (!($81)) {
         $86 = $19;
         while(1) {
          $85 = ((($86)) + 4|0);
          $87 = HEAP32[$85>>2]|0;
          $not$$i$i$i$i$i$i$i19$i$i = ($87|0)==(0);
          if (!($not$$i$i$i$i$i$i$i19$i$i)) {
           $88 = HEAP32[$86>>2]|0;
           ___rust_deallocate($88,$87,1);
          }
          $89 = ((($86)) + 12|0);
          $90 = ($89|0)==($80|0);
          if ($90) {
           break;
          } else {
           $86 = $89;
          }
         }
        }
        $not$$i$i$i$i$i$i = ($args$sroa$6$0$copyload31$i$i|0)==(0);
        if ($not$$i$i$i$i$i$i) {
         $eh$lpad$body$index12Z2D = $79;$eh$lpad$body$indexZ2D = $78;
         break L1;
        }
        $91 = ($args$sroa$6$0$copyload31$i$i*12)|0;
        ___rust_deallocate($19,$91,4);
        $eh$lpad$body$index12Z2D = $79;$eh$lpad$body$indexZ2D = $78;
        break L1;
       }
       $82 = (___rust_allocate(12,4)|0);
       $83 = ($82|0)==(0|0);
       if ($83) {
        __THREW__ = 0;
        invoke_v(326);
        $84 = __THREW__; __THREW__ = 0;
        label = 57;
        break L1;
       }
       HEAP32[$82>>2] = $19;
       $_23$sroa$4$0$$sroa_idx$i$i = ((($82)) + 4|0);
       HEAP32[$_23$sroa$4$0$$sroa_idx$i$i>>2] = $args$sroa$6$0$copyload31$i$i;
       $_23$sroa$5$0$$sroa_idx$i$i = ((($82)) + 8|0);
       HEAP32[$_23$sroa$5$0$$sroa_idx$i$i>>2] = $local_len$sroa$5$0$i$lcssa$i$i$i$i$i;
       __ZN4drop17h7f57aaaebd8c9200E(16044);
       HEAP32[4011] = $82;
       (_pthread_mutex_unlock(((15880)|0))|0);
       HEAP32[$any_data$i$i>>2] = 0;
       HEAP32[$any_vtable$i$i>>2] = 0;
       HEAP32[$data$i$i>>2] = $0;
       $92 = (___rust_maybe_catch_panic(365,$data$i$i,$any_data$i$i,$any_vtable$i$i)|0);
       $93 = ($92|0)==(0);
       L43: do {
        if ($93) {
         $res$sroa$0$0 = 0;$res$sroa$7$0 = 0;
        } else {
         __THREW__ = 0;
         $94 = (invoke_i(311)|0);
         $95 = __THREW__; __THREW__ = 0;
         $96 = $95&1;
         do {
          if (!($96)) {
           $switch2tmp$i$i$i$i$i = ($94|0)==(0|0);
           if ($switch2tmp$i$i$i$i$i) {
            __THREW__ = 0;
            invoke_vii(202,(7951|0),57);
            $97 = __THREW__; __THREW__ = 0;
            break;
           }
           $98 = HEAP32[$94>>2]|0;
           $switch$i$i$i$i = ($98|0)==(1);
           if ($switch$i$i$i$i) {
            $$sink$in$phi$trans$insert$i$i$i = ((($94)) + 4|0);
            $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i>>2]|0;
            $phitmp$i$i = (($$pre$i$i$i) + -1)|0;
            $$pre$phi$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i;$103 = $phitmp$i$i;
           } else {
            $99 = $94;
            $100 = $99;
            HEAP32[$100>>2] = 1;
            $101 = (($99) + 4)|0;
            $102 = $101;
            HEAP32[$102>>2] = 0;
            $$pre3$i$i$i = ((($94)) + 4|0);
            $$pre$phi$i$i$iZ2D = $$pre3$i$i$i;$103 = -1;
           }
           HEAP32[$$pre$phi$i$i$iZ2D>>2] = $103;
           $104 = HEAP32[$any_data$i$i>>2]|0;
           $105 = HEAP32[$any_vtable$i$i>>2]|0;
           $res$sroa$0$0 = $104;$res$sroa$7$0 = $105;
           break L43;
          }
         } while(0);
         $133 = ___cxa_find_matching_catch_2()|0;
         $134 = tempRet0;
         $personalityslot$sroa$0$0 = $133;$personalityslot$sroa$5$0 = $134;
         ___resumeException($personalityslot$sroa$0$0|0);
         // unreachable;
        }
       } while(0);
       $106 = HEAP32[4012]|0;
       $107 = ($106|0)==(3);
       do {
        if (!($107)) {
         HEAP8[$f$i$i>>0] = 1;
         HEAP32[$_17$i$i>>2] = $f$i$i;
         __THREW__ = 0;
         invoke_viiii(366,(16048|0),0,($_17$i$i|0),(384|0));
         $108 = __THREW__; __THREW__ = 0;
         $109 = $108&1;
         if (!($109)) {
          break;
         }
         $121 = ___cxa_find_matching_catch_2()|0;
         $122 = tempRet0;
         $switchtmp$i = ($res$sroa$0$0|0)==(0|0);
         if ($switchtmp$i) {
          $personalityslot$sroa$0$0 = $121;$personalityslot$sroa$5$0 = $122;
          ___resumeException($personalityslot$sroa$0$0|0);
          // unreachable;
         }
         $123 = $res$sroa$7$0;
         $124 = HEAP32[$123>>2]|0;
         FUNCTION_TABLE_vi[$124 & 511]($res$sroa$0$0);
         $125 = $res$sroa$7$0;
         $126 = ((($125)) + 4|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = ($127|0)==(0);
         if ($128) {
          $personalityslot$sroa$0$0 = $121;$personalityslot$sroa$5$0 = $122;
          ___resumeException($personalityslot$sroa$0$0|0);
          // unreachable;
         }
         $129 = ((($125)) + 8|0);
         $130 = HEAP32[$129>>2]|0;
         ___rust_deallocate($res$sroa$0$0,$127,$130);
         $personalityslot$sroa$0$0 = $121;$personalityslot$sroa$5$0 = $122;
         ___resumeException($personalityslot$sroa$0$0|0);
         // unreachable;
        }
       } while(0);
       $110 = ($res$sroa$0$0|0)!=(0|0);
       $switchtmp$i23 = ($res$sroa$0$0|0)==(0|0);
       if ($switchtmp$i23) {
        $$ = $110 ? 101 : 0;
        STACKTOP = sp;return ($$|0);
       }
       $111 = $res$sroa$7$0;
       $112 = HEAP32[$111>>2]|0;
       __THREW__ = 0;
       invoke_vi($112|0,($res$sroa$0$0|0));
       $113 = __THREW__; __THREW__ = 0;
       $114 = $113&1;
       if ($114) {
        label = 57;
        break L1;
       }
       $115 = $res$sroa$7$0;
       $116 = ((($115)) + 4|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ($117|0)==(0);
       if ($118) {
        $$ = $110 ? 101 : 0;
        STACKTOP = sp;return ($$|0);
       }
       $119 = ((($115)) + 8|0);
       $120 = HEAP32[$119>>2]|0;
       ___rust_deallocate($res$sroa$0$0,$117,$120);
       $$ = $110 ? 101 : 0;
       STACKTOP = sp;return ($$|0);
      }
     } while(0);
     $64 = (($$in$i$i$i$i$i) + (($65*12)|0)|0);
     $66 = ($65|0)==(0);
     if (!($66)) {
      $68 = $$in$i$i$i$i$i;
      while(1) {
       $67 = ((($68)) + 4|0);
       $69 = HEAP32[$67>>2]|0;
       $not$$i$i$i$i$i$i$i$i$i$i$i$i = ($69|0)==(0);
       if (!($not$$i$i$i$i$i$i$i$i$i$i$i$i)) {
        $70 = HEAP32[$68>>2]|0;
        ___rust_deallocate($70,$69,1);
       }
       $71 = ((($68)) + 12|0);
       $72 = ($71|0)==($64|0);
       if ($72) {
        break;
       } else {
        $68 = $71;
       }
      }
     }
     $73 = HEAP32[$14>>2]|0;
     $not$$i$i$i$i$i$i$i$i$i = ($73|0)==(0);
     if ($not$$i$i$i$i$i$i$i$i$i) {
      $eh$lpad$body$index12Z2D = $personalityslot$sroa$8$0$i$i$i$i$i$i;$eh$lpad$body$indexZ2D = $personalityslot$sroa$0$0$i$i$i$i$i$i;
     } else {
      $74 = ($73*12)|0;
      ___rust_deallocate($$in$i$i$i$i$i,$74,4);
      $eh$lpad$body$index12Z2D = $personalityslot$sroa$8$0$i$i$i$i$i$i;$eh$lpad$body$indexZ2D = $personalityslot$sroa$0$0$i$i$i$i$i$i;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 57) {
  $131 = ___cxa_find_matching_catch_2()|0;
  $132 = tempRet0;
  $eh$lpad$body$index12Z2D = $132;$eh$lpad$body$indexZ2D = $131;
 }
 $personalityslot$sroa$0$0 = $eh$lpad$body$indexZ2D;$personalityslot$sroa$5$0 = $eh$lpad$body$index12Z2D;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
 return (0)|0;
}
function __ZN3std3sys3imp4init11oom_handler17h9d6e6d0d5d4772caE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_write(2,10873,35)|0);
 _llvm_trap();
 // unreachable;
}
function __ZN3std9panicking3try7do_call17h68fb98401edf6777E($0) {
 $0 = $0|0;
 var $tmp$0$copyload$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tmp$0$copyload$i = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_v[$tmp$0$copyload$i & 511]();
 return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h994e49272e95c367E_376($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i = 0, $ptr$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17he4838b1eef3c5645E(11040,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $_0$0$sroa$speculated$i$i$i = $9 ? $$arith : $8;
 $10 = ($_0$0$sroa$speculated$i$i$i|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_allocate($_0$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $12;
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = (___rust_reallocate($13,$5,$_0$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $14;
 }
 $15 = ($ptr$0$i|0)==(0|0);
 if ($15) {
  __ZN5alloc3oom3oom17h9c08827c36eab673E();
  // unreachable;
 }
 HEAP32[$0>>2] = $ptr$0$i;
 HEAP32[$4>>2] = $_0$0$sroa$speculated$i$i$i;
 return;
}
function __ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h77a7452d11da03e2E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $not$$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i = 0;
 var $vector$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vector$i$i$i = sp + 16|0;
 $_3 = sp;
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 }
 $5 = ($2|0)==(0);
 if ($5) {
  $ptr$0$i$i$i$i$i = (1);
 } else {
  $6 = (___rust_allocate($2,1)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   __ZN5alloc3oom3oom17h9c08827c36eab673E();
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i = $6;
  }
 }
 $8 = $ptr$0$i$i$i$i$i;
 HEAP32[$vector$i$i$i>>2] = $8;
 $9 = ((($vector$i$i$i)) + 4|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($vector$i$i$i)) + 8|0);
 HEAP32[$10>>2] = 0;
 __THREW__ = 0;
 invoke_vii(367,($vector$i$i$i|0),($2|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  $16 = HEAP32[$10>>2]|0;
  $17 = (($16) + ($2))|0;
  HEAP32[$10>>2] = $17;
  $18 = HEAP32[$vector$i$i$i>>2]|0;
  $19 = (($18) + ($16)|0);
  _memcpy(($19|0),($1|0),($2|0))|0;
  ;HEAP32[$_3>>2]=HEAP32[$vector$i$i$i>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$vector$i$i$i+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$vector$i$i$i+8>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_3+8>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $14 = HEAP32[$9>>2]|0;
 $not$$i$i$i$i$i$i$i = ($14|0)==(0);
 if ($not$$i$i$i$i$i$i$i) {
  ___resumeException($4|0);
  // unreachable;
 }
 $15 = HEAP32[$vector$i$i$i>>2]|0;
 ___rust_deallocate($15,$14,1);
 ___resumeException($4|0);
 // unreachable;
}
function __ZN11collections6string6String15from_utf8_lossy17hb29836f0050bfcdeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$fca$0$gep82 = 0, $$fca$0$load = 0, $$off = 0, $$off247 = 0, $$off249 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_282$sroa$0$0$$sroa_idx19 = 0, $_3$sroa$4$0$$sroa_idx3$i = 0, $_3$sroa$5$0$$sroa_idx5$i = 0, $_4 = 0, $cond = 0, $cond10 = 0, $cond11 = 0, $cond9 = 0, $e = 0;
 var $i$0$be = 0, $i$0282 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $not$$i$i$i$i$i = 0, $or$cond113 = 0, $or$cond114 = 0, $or$cond115 = 0, $or$cond116 = 0, $or$cond118 = 0, $or$cond119 = 0, $or$cond123 = 0, $or$cond124 = 0, $or$cond125 = 0, $or$cond126 = 0, $ptr$0$i$i$i = 0, $res = 0, $subseqidx$0$be = 0, $subseqidx$0$lcssa = 0, $subseqidx$0$ph = 0;
 var $subseqidx$0281 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_4 = sp + 24|0;
 $e = sp + 16|0;
 $res = sp;
 __ZN4core3str9from_utf817he0e1c9036739d488E($_4,$1,$2);
 $3 = HEAP32[$_4>>2]|0;
 $switch = ($3|0)==(1);
 if (!($switch)) {
  $4 = ((($_4)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($_4)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = 0;
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $5;
  $9 = ((($0)) + 8|0);
  HEAP32[$9>>2] = $7;
  STACKTOP = sp;return;
 }
 $$fca$0$gep82 = ((($_4)) + 4|0);
 $$fca$0$load = HEAP32[$$fca$0$gep82>>2]|0;
 HEAP32[$e>>2] = $$fca$0$load;
 $10 = (__ZN4core3str9Utf8Error11valid_up_to17h59af9f9ea6a17b0bE($e)|0);
 $11 = ($2|0)<(0);
 if ($11) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 }
 $12 = ($2|0)==(0);
 if ($12) {
  $ptr$0$i$i$i = (1);
 } else {
  $13 = (___rust_allocate($2,1)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   __ZN5alloc3oom3oom17h9c08827c36eab673E();
   // unreachable;
  } else {
   $ptr$0$i$i$i = $13;
  }
 }
 $15 = $ptr$0$i$i$i;
 HEAP32[$res>>2] = $15;
 $_3$sroa$4$0$$sroa_idx3$i = ((($res)) + 4|0);
 HEAP32[$_3$sroa$4$0$$sroa_idx3$i>>2] = $2;
 $_3$sroa$5$0$$sroa_idx5$i = ((($res)) + 8|0);
 HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = 0;
 $16 = ($10|0)==(0);
 do {
  if ($16) {
   $subseqidx$0$ph = 0;
   label = 15;
  } else {
   $17 = ($10>>>0)>($2>>>0);
   if ($17) {
    __THREW__ = 0;
    invoke_vii(317,($10|0),($2|0));
    $18 = __THREW__; __THREW__ = 0;
    label = 108;
    break;
   }
   __THREW__ = 0;
   invoke_vii(367,($res|0),($10|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 108;
   } else {
    $21 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
    $22 = (($21) + ($10))|0;
    HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $22;
    $23 = HEAP32[$res>>2]|0;
    $24 = (($23) + ($21)|0);
    _memcpy(($24|0),($1|0),($10|0))|0;
    $subseqidx$0$ph = $10;
    label = 15;
   }
  }
 } while(0);
 L18: do {
  if ((label|0) == 15) {
   $25 = ($subseqidx$0$ph>>>0)<($2>>>0);
   L20: do {
    if ($25) {
     $i$0282 = $subseqidx$0$ph;$subseqidx$0281 = $subseqidx$0$ph;
     L22: while(1) {
      $27 = (($1) + ($i$0282)|0);
      $28 = HEAP8[$27>>0]|0;
      $29 = (($i$0282) + 1)|0;
      $30 = ($28<<24>>24)>(-1);
      L24: do {
       if ($30) {
        $i$0$be = $29;$subseqidx$0$be = $subseqidx$0281;
       } else {
        $32 = $28&255;
        $33 = (12740 + ($32)|0);
        $34 = HEAP8[$33>>0]|0;
        switch ($34<<24>>24) {
        case 2:  {
         $35 = ($29>>>0)<($2>>>0);
         if ($35) {
          $39 = (($1) + ($29)|0);
          $40 = HEAP8[$39>>0]|0;
          $41 = $40 & -64;
          $42 = ($41<<24>>24)==(-128);
          if ($42) {
           $44 = (($i$0282) + 2)|0;
           $i$0$be = $44;$subseqidx$0$be = $subseqidx$0281;
           break L24;
          }
         }
         $43 = ($i$0282|0)==($subseqidx$0281|0);
         if (!($43)) {
          $45 = ($i$0282>>>0)<($subseqidx$0281>>>0);
          if ($45) {
           label = 29;
           break L22;
          }
          $47 = ($i$0282>>>0)>($2>>>0);
          if ($47) {
           label = 31;
           break L22;
          }
          $49 = (($i$0282) - ($subseqidx$0281))|0;
          __THREW__ = 0;
          invoke_vii(367,($res|0),($49|0));
          $50 = __THREW__; __THREW__ = 0;
          $51 = $50&1;
          if ($51) {
           label = 107;
           break L22;
          }
          $52 = (($1) + ($subseqidx$0281)|0);
          $53 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
          $54 = (($53) + ($49))|0;
          HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $54;
          $55 = HEAP32[$res>>2]|0;
          $56 = (($55) + ($53)|0);
          _memcpy(($56|0),($52|0),($49|0))|0;
         }
         __THREW__ = 0;
         invoke_vii(367,($res|0),3);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          label = 107;
          break L22;
         }
         $59 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
         $60 = (($59) + 3)|0;
         HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $60;
         $61 = HEAP32[$res>>2]|0;
         $62 = (($61) + ($59)|0);
         ;HEAP8[$62>>0]=HEAP8[11057>>0]|0;HEAP8[$62+1>>0]=HEAP8[11057+1>>0]|0;HEAP8[$62+2>>0]=HEAP8[11057+2>>0]|0;
         $i$0$be = $29;$subseqidx$0$be = $29;
         break L24;
         break;
        }
        case 3:  {
         $36 = ($29>>>0)<($2>>>0);
         do {
          if ($36) {
           $63 = (($1) + ($29)|0);
           $64 = HEAP8[$63>>0]|0;
           $cond10 = ($28<<24>>24)==(-32);
           $65 = ($64&255)<(192);
           $66 = $64 & -32;
           $67 = ($66<<24>>24)==(-96);
           $68 = $cond10 & $67;
           if (!($68)) {
            $$off249 = (($28) + 31)<<24>>24;
            $70 = ($$off249&255)<(12);
            $71 = ($64<<24>>24)<(0);
            $or$cond113 = $70 & $71;
            $or$cond114 = $65 & $or$cond113;
            if (!($or$cond114)) {
             $cond11 = ($28<<24>>24)==(-19);
             $or$cond115 = $cond11 & $71;
             $72 = ($64&255)<(160);
             $or$cond116 = $72 & $or$cond115;
             if (!($or$cond116)) {
              $73 = $28 & -2;
              $74 = ($73<<24>>24)==(-18);
              $or$cond118 = $74 & $71;
              $or$cond119 = $65 & $or$cond118;
              if (!($or$cond119)) {
               break;
              }
             }
            }
           }
           $75 = (($i$0282) + 2)|0;
           $76 = ($75>>>0)<($2>>>0);
           if ($76) {
            $95 = (($1) + ($75)|0);
            $96 = HEAP8[$95>>0]|0;
            $97 = $96 & -64;
            $98 = ($97<<24>>24)==(-128);
            if ($98) {
             $100 = (($i$0282) + 3)|0;
             $i$0$be = $100;$subseqidx$0$be = $subseqidx$0281;
             break L24;
            }
           }
           $99 = ($i$0282|0)==($subseqidx$0281|0);
           if (!($99)) {
            $101 = ($i$0282>>>0)<($subseqidx$0281>>>0);
            if ($101) {
             label = 54;
             break L22;
            }
            $103 = ($i$0282>>>0)>($2>>>0);
            if ($103) {
             label = 56;
             break L22;
            }
            $105 = (($i$0282) - ($subseqidx$0281))|0;
            __THREW__ = 0;
            invoke_vii(367,($res|0),($105|0));
            $106 = __THREW__; __THREW__ = 0;
            $107 = $106&1;
            if ($107) {
             label = 107;
             break L22;
            }
            $108 = (($1) + ($subseqidx$0281)|0);
            $109 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
            $110 = (($109) + ($105))|0;
            HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $110;
            $111 = HEAP32[$res>>2]|0;
            $112 = (($111) + ($109)|0);
            _memcpy(($112|0),($108|0),($105|0))|0;
           }
           __THREW__ = 0;
           invoke_vii(367,($res|0),3);
           $113 = __THREW__; __THREW__ = 0;
           $114 = $113&1;
           if ($114) {
            label = 107;
            break L22;
           }
           $115 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
           $116 = (($115) + 3)|0;
           HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $116;
           $117 = HEAP32[$res>>2]|0;
           $118 = (($117) + ($115)|0);
           ;HEAP8[$118>>0]=HEAP8[11057>>0]|0;HEAP8[$118+1>>0]=HEAP8[11057+1>>0]|0;HEAP8[$118+2>>0]=HEAP8[11057+2>>0]|0;
           $i$0$be = $75;$subseqidx$0$be = $75;
           break L24;
          }
         } while(0);
         $69 = ($i$0282|0)==($subseqidx$0281|0);
         if (!($69)) {
          $77 = ($i$0282>>>0)<($subseqidx$0281>>>0);
          if ($77) {
           label = 43;
           break L22;
          }
          $79 = ($i$0282>>>0)>($2>>>0);
          if ($79) {
           label = 45;
           break L22;
          }
          $81 = (($i$0282) - ($subseqidx$0281))|0;
          __THREW__ = 0;
          invoke_vii(367,($res|0),($81|0));
          $82 = __THREW__; __THREW__ = 0;
          $83 = $82&1;
          if ($83) {
           label = 107;
           break L22;
          }
          $84 = (($1) + ($subseqidx$0281)|0);
          $85 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
          $86 = (($85) + ($81))|0;
          HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $86;
          $87 = HEAP32[$res>>2]|0;
          $88 = (($87) + ($85)|0);
          _memcpy(($88|0),($84|0),($81|0))|0;
         }
         __THREW__ = 0;
         invoke_vii(367,($res|0),3);
         $89 = __THREW__; __THREW__ = 0;
         $90 = $89&1;
         if ($90) {
          label = 107;
          break L22;
         }
         $91 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
         $92 = (($91) + 3)|0;
         HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $92;
         $93 = HEAP32[$res>>2]|0;
         $94 = (($93) + ($91)|0);
         ;HEAP8[$94>>0]=HEAP8[11057>>0]|0;HEAP8[$94+1>>0]=HEAP8[11057+1>>0]|0;HEAP8[$94+2>>0]=HEAP8[11057+2>>0]|0;
         $i$0$be = $29;$subseqidx$0$be = $29;
         break L24;
         break;
        }
        case 4:  {
         $37 = ($29>>>0)<($2>>>0);
         do {
          if ($37) {
           $119 = (($1) + ($29)|0);
           $120 = HEAP8[$119>>0]|0;
           $cond = ($28<<24>>24)==(-16);
           $$off = (($120) + 112)<<24>>24;
           $121 = ($$off&255)<(48);
           $122 = $cond & $121;
           if (!($122)) {
            $124 = ($120&255)<(192);
            $$off247 = (($28) + 15)<<24>>24;
            $125 = ($$off247&255)<(3);
            $126 = ($120<<24>>24)<(0);
            $or$cond123 = $125 & $126;
            $or$cond124 = $124 & $or$cond123;
            if (!($or$cond124)) {
             $cond9 = ($28<<24>>24)==(-12);
             $or$cond125 = $cond9 & $126;
             $127 = ($120&255)<(144);
             $or$cond126 = $127 & $or$cond125;
             if (!($or$cond126)) {
              break;
             }
            }
           }
           $128 = (($i$0282) + 2)|0;
           $129 = ($128>>>0)<($2>>>0);
           if ($129) {
            $148 = (($1) + ($128)|0);
            $149 = HEAP8[$148>>0]|0;
            $150 = $149 & -64;
            $151 = ($150<<24>>24)==(-128);
            if ($151) {
             $153 = (($i$0282) + 3)|0;
             $154 = ($153>>>0)<($2>>>0);
             if ($154) {
              $173 = (($1) + ($153)|0);
              $174 = HEAP8[$173>>0]|0;
              $175 = $174 & -64;
              $176 = ($175<<24>>24)==(-128);
              if ($176) {
               $178 = (($i$0282) + 4)|0;
               $i$0$be = $178;$subseqidx$0$be = $subseqidx$0281;
               break L24;
              }
             }
             $177 = ($i$0282|0)==($subseqidx$0281|0);
             if (!($177)) {
              $179 = ($i$0282>>>0)<($subseqidx$0281>>>0);
              if ($179) {
               label = 89;
               break L22;
              }
              $181 = ($i$0282>>>0)>($2>>>0);
              if ($181) {
               label = 91;
               break L22;
              }
              $183 = (($i$0282) - ($subseqidx$0281))|0;
              __THREW__ = 0;
              invoke_vii(367,($res|0),($183|0));
              $184 = __THREW__; __THREW__ = 0;
              $185 = $184&1;
              if ($185) {
               label = 107;
               break L22;
              }
              $186 = (($1) + ($subseqidx$0281)|0);
              $187 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
              $188 = (($187) + ($183))|0;
              HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $188;
              $189 = HEAP32[$res>>2]|0;
              $190 = (($189) + ($187)|0);
              _memcpy(($190|0),($186|0),($183|0))|0;
             }
             __THREW__ = 0;
             invoke_vii(367,($res|0),3);
             $191 = __THREW__; __THREW__ = 0;
             $192 = $191&1;
             if ($192) {
              label = 107;
              break L22;
             }
             $193 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
             $194 = (($193) + 3)|0;
             HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $194;
             $195 = HEAP32[$res>>2]|0;
             $196 = (($195) + ($193)|0);
             ;HEAP8[$196>>0]=HEAP8[11057>>0]|0;HEAP8[$196+1>>0]=HEAP8[11057+1>>0]|0;HEAP8[$196+2>>0]=HEAP8[11057+2>>0]|0;
             $i$0$be = $153;$subseqidx$0$be = $153;
             break L24;
            }
           }
           $152 = ($i$0282|0)==($subseqidx$0281|0);
           if (!($152)) {
            $155 = ($i$0282>>>0)<($subseqidx$0281>>>0);
            if ($155) {
             label = 78;
             break L22;
            }
            $157 = ($i$0282>>>0)>($2>>>0);
            if ($157) {
             label = 80;
             break L22;
            }
            $159 = (($i$0282) - ($subseqidx$0281))|0;
            __THREW__ = 0;
            invoke_vii(367,($res|0),($159|0));
            $160 = __THREW__; __THREW__ = 0;
            $161 = $160&1;
            if ($161) {
             label = 107;
             break L22;
            }
            $162 = (($1) + ($subseqidx$0281)|0);
            $163 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
            $164 = (($163) + ($159))|0;
            HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $164;
            $165 = HEAP32[$res>>2]|0;
            $166 = (($165) + ($163)|0);
            _memcpy(($166|0),($162|0),($159|0))|0;
           }
           __THREW__ = 0;
           invoke_vii(367,($res|0),3);
           $167 = __THREW__; __THREW__ = 0;
           $168 = $167&1;
           if ($168) {
            label = 107;
            break L22;
           }
           $169 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
           $170 = (($169) + 3)|0;
           HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $170;
           $171 = HEAP32[$res>>2]|0;
           $172 = (($171) + ($169)|0);
           ;HEAP8[$172>>0]=HEAP8[11057>>0]|0;HEAP8[$172+1>>0]=HEAP8[11057+1>>0]|0;HEAP8[$172+2>>0]=HEAP8[11057+2>>0]|0;
           $i$0$be = $128;$subseqidx$0$be = $128;
           break L24;
          }
         } while(0);
         $123 = ($i$0282|0)==($subseqidx$0281|0);
         if (!($123)) {
          $130 = ($i$0282>>>0)<($subseqidx$0281>>>0);
          if ($130) {
           label = 67;
           break L22;
          }
          $132 = ($i$0282>>>0)>($2>>>0);
          if ($132) {
           label = 69;
           break L22;
          }
          $134 = (($i$0282) - ($subseqidx$0281))|0;
          __THREW__ = 0;
          invoke_vii(367,($res|0),($134|0));
          $135 = __THREW__; __THREW__ = 0;
          $136 = $135&1;
          if ($136) {
           label = 107;
           break L22;
          }
          $137 = (($1) + ($subseqidx$0281)|0);
          $138 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
          $139 = (($138) + ($134))|0;
          HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $139;
          $140 = HEAP32[$res>>2]|0;
          $141 = (($140) + ($138)|0);
          _memcpy(($141|0),($137|0),($134|0))|0;
         }
         __THREW__ = 0;
         invoke_vii(367,($res|0),3);
         $142 = __THREW__; __THREW__ = 0;
         $143 = $142&1;
         if ($143) {
          label = 107;
          break L22;
         }
         $144 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
         $145 = (($144) + 3)|0;
         HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $145;
         $146 = HEAP32[$res>>2]|0;
         $147 = (($146) + ($144)|0);
         ;HEAP8[$147>>0]=HEAP8[11057>>0]|0;HEAP8[$147+1>>0]=HEAP8[11057+1>>0]|0;HEAP8[$147+2>>0]=HEAP8[11057+2>>0]|0;
         $i$0$be = $29;$subseqidx$0$be = $29;
         break L24;
         break;
        }
        default: {
         $38 = ($i$0282|0)==($subseqidx$0281|0);
         if (!($38)) {
          $197 = ($i$0282>>>0)<($subseqidx$0281>>>0);
          if ($197) {
           label = 97;
           break L22;
          }
          $199 = ($i$0282>>>0)>($2>>>0);
          if ($199) {
           label = 99;
           break L22;
          }
          $201 = (($i$0282) - ($subseqidx$0281))|0;
          __THREW__ = 0;
          invoke_vii(367,($res|0),($201|0));
          $202 = __THREW__; __THREW__ = 0;
          $203 = $202&1;
          if ($203) {
           label = 107;
           break L22;
          }
          $204 = (($1) + ($subseqidx$0281)|0);
          $205 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
          $206 = (($205) + ($201))|0;
          HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $206;
          $207 = HEAP32[$res>>2]|0;
          $208 = (($207) + ($205)|0);
          _memcpy(($208|0),($204|0),($201|0))|0;
         }
         __THREW__ = 0;
         invoke_vii(367,($res|0),3);
         $209 = __THREW__; __THREW__ = 0;
         $210 = $209&1;
         if ($210) {
          label = 107;
          break L22;
         }
         $211 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
         $212 = (($211) + 3)|0;
         HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $212;
         $213 = HEAP32[$res>>2]|0;
         $214 = (($213) + ($211)|0);
         ;HEAP8[$214>>0]=HEAP8[11057>>0]|0;HEAP8[$214+1>>0]=HEAP8[11057+1>>0]|0;HEAP8[$214+2>>0]=HEAP8[11057+2>>0]|0;
         $i$0$be = $29;$subseqidx$0$be = $29;
         break L24;
        }
        }
       }
      } while(0);
      $31 = ($i$0$be>>>0)<($2>>>0);
      if ($31) {
       $i$0282 = $i$0$be;$subseqidx$0281 = $subseqidx$0$be;
      } else {
       $subseqidx$0$lcssa = $subseqidx$0$be;
       break L20;
      }
     }
     switch (label|0) {
      case 29: {
       __THREW__ = 0;
       invoke_vii(352,($subseqidx$0281|0),($i$0282|0));
       $46 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 31: {
       __THREW__ = 0;
       invoke_vii(317,($i$0282|0),($2|0));
       $48 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 43: {
       __THREW__ = 0;
       invoke_vii(352,($subseqidx$0281|0),($i$0282|0));
       $78 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 45: {
       __THREW__ = 0;
       invoke_vii(317,($i$0282|0),($2|0));
       $80 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 54: {
       __THREW__ = 0;
       invoke_vii(352,($subseqidx$0281|0),($i$0282|0));
       $102 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 56: {
       __THREW__ = 0;
       invoke_vii(317,($i$0282|0),($2|0));
       $104 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 67: {
       __THREW__ = 0;
       invoke_vii(352,($subseqidx$0281|0),($i$0282|0));
       $131 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 69: {
       __THREW__ = 0;
       invoke_vii(317,($i$0282|0),($2|0));
       $133 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 78: {
       __THREW__ = 0;
       invoke_vii(352,($subseqidx$0281|0),($i$0282|0));
       $156 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 80: {
       __THREW__ = 0;
       invoke_vii(317,($i$0282|0),($2|0));
       $158 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 89: {
       __THREW__ = 0;
       invoke_vii(352,($subseqidx$0281|0),($i$0282|0));
       $180 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 91: {
       __THREW__ = 0;
       invoke_vii(317,($i$0282|0),($2|0));
       $182 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 97: {
       __THREW__ = 0;
       invoke_vii(352,($subseqidx$0281|0),($i$0282|0));
       $198 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 99: {
       __THREW__ = 0;
       invoke_vii(317,($i$0282|0),($2|0));
       $200 = __THREW__; __THREW__ = 0;
       label = 108;
       break L18;
       break;
      }
      case 107: {
       $223 = ___cxa_find_matching_catch_2()|0;
       $224 = tempRet0;
       $lpad$phi$index = $223;$lpad$phi$index2 = $224;
       break L18;
       break;
      }
     }
    } else {
     $subseqidx$0$lcssa = $subseqidx$0$ph;
    }
   } while(0);
   $26 = ($subseqidx$0$lcssa>>>0)<($2>>>0);
   if ($26) {
    $215 = (($2) - ($subseqidx$0$lcssa))|0;
    __THREW__ = 0;
    invoke_vii(367,($res|0),($215|0));
    $216 = __THREW__; __THREW__ = 0;
    $217 = $216&1;
    if ($217) {
     label = 108;
     break;
    }
    $218 = (($1) + ($subseqidx$0$lcssa)|0);
    $219 = HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2]|0;
    $220 = (($219) + ($215))|0;
    HEAP32[$_3$sroa$5$0$$sroa_idx5$i>>2] = $220;
    $221 = HEAP32[$res>>2]|0;
    $222 = (($221) + ($219)|0);
    _memcpy(($222|0),($218|0),($215|0))|0;
   }
   HEAP32[$0>>2] = 1;
   $_282$sroa$0$0$$sroa_idx19 = ((($0)) + 4|0);
   ;HEAP32[$_282$sroa$0$0$$sroa_idx19>>2]=HEAP32[$res>>2]|0;HEAP32[$_282$sroa$0$0$$sroa_idx19+4>>2]=HEAP32[$res+4>>2]|0;HEAP32[$_282$sroa$0$0$$sroa_idx19+8>>2]=HEAP32[$res+8>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 108) {
  $225 = ___cxa_find_matching_catch_2()|0;
  $226 = tempRet0;
  $lpad$phi$index = $225;$lpad$phi$index2 = $226;
 }
 $227 = HEAP32[$_3$sroa$4$0$$sroa_idx3$i>>2]|0;
 $not$$i$i$i$i$i = ($227|0)==(0);
 if ($not$$i$i$i$i$i) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $228 = HEAP32[$res>>2]|0;
 ___rust_deallocate($228,$227,1);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZN66__LT_collections__string__String_u20_as_u20_core__clone__Clone_GT_5clone17h581d7b45aa8df381E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_3 = 0, $not$$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i = 0, $vector$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vector$i$i$i = sp + 16|0;
 $_3 = sp;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 if ($5) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 }
 $7 = ($4|0)==(0);
 if ($7) {
  $ptr$0$i$i$i$i$i = (1);
 } else {
  $8 = (___rust_allocate($4,1)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   __ZN5alloc3oom3oom17h9c08827c36eab673E();
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i = $8;
  }
 }
 $10 = $ptr$0$i$i$i$i$i;
 HEAP32[$vector$i$i$i>>2] = $10;
 $11 = ((($vector$i$i$i)) + 4|0);
 HEAP32[$11>>2] = $4;
 $12 = ((($vector$i$i$i)) + 8|0);
 HEAP32[$12>>2] = 0;
 __THREW__ = 0;
 invoke_vii(367,($vector$i$i$i|0),($4|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $18 = HEAP32[$12>>2]|0;
  $19 = (($18) + ($4))|0;
  HEAP32[$12>>2] = $19;
  $20 = HEAP32[$vector$i$i$i>>2]|0;
  $21 = (($20) + ($18)|0);
  _memcpy(($21|0),($2|0),($4|0))|0;
  ;HEAP32[$_3>>2]=HEAP32[$vector$i$i$i>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$vector$i$i$i+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$vector$i$i$i+8>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_3+8>>2]|0;
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $16 = HEAP32[$11>>2]|0;
 $not$$i$i$i$i$i$i$i = ($16|0)==(0);
 if ($not$$i$i$i$i$i$i$i) {
  ___resumeException($6|0);
  // unreachable;
 }
 $17 = HEAP32[$vector$i$i$i>>2]|0;
 ___rust_deallocate($17,$16,1);
 ___resumeException($6|0);
 // unreachable;
}
function __ZN93__LT_collections__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17he1798c51f55475c1E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h77a7452d11da03e2E($0,$1,$2);
 return;
}
function __ZN11collections6string116__LT_impl_u20_core__convert__From_LT_collections__string__String_GT__u20_for_u20_collections__vec__Vec_LT_u8_GT__GT_4from17hf375255348a6ced2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 return;
}
function __ZN97__LT_collections__vec__Vec_LT_u8_GT__u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17hb40f5aa900072974E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i = 0, $vector$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vector$i$i$i = sp;
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3200);
  // unreachable;
 }
 $5 = ($2|0)==(0);
 if ($5) {
  $ptr$0$i$i$i$i$i = (1);
 } else {
  $6 = (___rust_allocate($2,1)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   __ZN5alloc3oom3oom17h9c08827c36eab673E();
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i = $6;
  }
 }
 $8 = $ptr$0$i$i$i$i$i;
 HEAP32[$vector$i$i$i>>2] = $8;
 $9 = ((($vector$i$i$i)) + 4|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($vector$i$i$i)) + 8|0);
 HEAP32[$10>>2] = 0;
 __THREW__ = 0;
 invoke_vii(367,($vector$i$i$i|0),($2|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  $16 = HEAP32[$10>>2]|0;
  $17 = (($16) + ($2))|0;
  HEAP32[$10>>2] = $17;
  $18 = HEAP32[$vector$i$i$i>>2]|0;
  $19 = (($18) + ($16)|0);
  _memcpy(($19|0),($1|0),($2|0))|0;
  ;HEAP32[$0>>2]=HEAP32[$vector$i$i$i>>2]|0;HEAP32[$0+4>>2]=HEAP32[$vector$i$i$i+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$vector$i$i$i+8>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $14 = HEAP32[$9>>2]|0;
 $not$$i$i$i$i$i$i$i = ($14|0)==(0);
 if ($not$$i$i$i$i$i$i$i) {
  ___resumeException($4|0);
  // unreachable;
 }
 $15 = HEAP32[$vector$i$i$i>>2]|0;
 ___rust_deallocate($15,$14,1);
 ___resumeException($4|0);
 // unreachable;
}
function __ZN11std_unicode6tables23trie_lookup_range_table17h18f8a19b1d1dda05E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(2048);
 if ($2) {
  $3 = $0 >>> 6;
  $4 = (($1) + ($3<<3)|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = $0 & 63;
  $12 = (_bitshift64Shl(1,0,($11|0))|0);
  $13 = tempRet0;
  $14 = $7 & $12;
  $15 = $10 & $13;
  $76 = $14;$78 = $15;
  $75 = ($76|0)!=(0);
  $77 = ($78|0)!=(0);
  $79 = $75 | $77;
  return ($79|0);
 }
 $16 = ($0>>>0)<(65536);
 if ($16) {
  $17 = $0 >>> 6;
  $18 = (($17) + -32)|0;
  $19 = ($18>>>0)<(992);
  if (!($19)) {
   __ZN4core9panicking18panic_bounds_check17h50f56530062f9abfE(3084,$18,992);
   // unreachable;
  }
  $20 = (((($1)) + 280|0) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ((($1)) + 260|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22>>>0)<($24>>>0);
  if (!($25)) {
   __ZN4core9panicking18panic_bounds_check17h50f56530062f9abfE(3108,$22,$24);
   // unreachable;
  }
  $47 = ((($1)) + 256|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($22<<3)|0);
  $50 = $49;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = $0 & 63;
  $57 = (_bitshift64Shl(1,0,($56|0))|0);
  $58 = tempRet0;
  $59 = $52 & $57;
  $60 = $55 & $58;
  $76 = $59;$78 = $60;
  $75 = ($76|0)!=(0);
  $77 = ($78|0)!=(0);
  $79 = $75 | $77;
  return ($79|0);
 }
 $26 = $0 >>> 12;
 $27 = (($26) + -16)|0;
 $28 = ($27>>>0)<(256);
 if (!($28)) {
  __ZN4core9panicking18panic_bounds_check17h50f56530062f9abfE(3084,$27,256);
  // unreachable;
 }
 $29 = (((($1)) + 1272|0) + ($27)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = ((($1)) + 268|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $30&255;
 $34 = $33 << 6;
 $35 = $0 >>> 6;
 $36 = $35 & 63;
 $37 = $34 | $36;
 $38 = ($37>>>0)<($32>>>0);
 if (!($38)) {
  __ZN4core9panicking18panic_bounds_check17h50f56530062f9abfE(3084,$37,$32);
  // unreachable;
 }
 $39 = ((($1)) + 264|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + ($37)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ((($1)) + 276|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($43>>>0)<($45>>>0);
 if (!($46)) {
  __ZN4core9panicking18panic_bounds_check17h50f56530062f9abfE(3096,$43,$45);
  // unreachable;
 }
 $61 = ((($1)) + 272|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + ($43<<3)|0);
 $64 = $63;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = $0 & 63;
 $71 = (_bitshift64Shl(1,0,($70|0))|0);
 $72 = tempRet0;
 $73 = $66 & $71;
 $74 = $69 & $72;
 $76 = $73;$78 = $74;
 $75 = ($76|0)!=(0);
 $77 = ($78|0)!=(0);
 $79 = $75 | $77;
 return ($79|0);
}
function __ZN11std_unicode6tables16general_category1N17h656ca9f9f8d41e39E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN11std_unicode6tables23trie_lookup_range_table17h18f8a19b1d1dda05E($0,408)|0);
 return ($1|0);
}
function _rust_eh_personality($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (___gxx_personality_v0(($0|0),($1|0),($2|0),($3|0),($4|0),($5|0))|0);
 return ($6|0);
}
function ___rust_maybe_catch_panic($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sroa_idx$i$i = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi($0|0,($1|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $_0$0 = 0;
  return ($_0$0|0);
 }
 $6 = ___cxa_find_matching_catch_3(0|0)|0;
 $7 = tempRet0;
 $8 = ($6|0)==(0|0);
 if ($8) {
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3140);
  // unreachable;
 }
 $9 = HEAP32[$6>>2]|0;
 $$sroa_idx$i$i = ((($6)) + 4|0);
 $10 = HEAP32[$$sroa_idx$i$i>>2]|0;
 ___cxa_free_exception(($6|0));
 HEAP32[$2>>2] = $9;
 HEAP32[$3>>2] = $10;
 $_0$0 = 1;
 return ($_0$0|0);
}
function ___rust_start_panic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0;
 $3 = $1;
 $4 = (___cxa_allocate_exception(8)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  HEAP32[$4>>2] = $2;
  $12 = ((($4)) + 4|0);
  HEAP32[$12>>2] = $3;
  ___cxa_throw(($4|0),(0|0),(0|0));
  __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3120);
  // unreachable;
 }
 $6 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vi[$6 & 511]($2);
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  return 3;
 }
 $10 = ((($3)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 ___rust_deallocate($2,$8,$11);
 return 3;
}
function __ZN5alloc3oom3oom17h9c08827c36eab673E() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[805]|0;
 $1 = $0;
 FUNCTION_TABLE_v[$1 & 511]();
 // unreachable;
}
function __ZN5alloc3oom19default_oom_handler17h7d5e4045944c7055E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _llvm_trap();
 // unreachable;
}
function __ZN5alloc3oom3imp15set_oom_handler17h2289765fbbf55766E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 HEAP32[805] = $1;
 return;
}
function ___rust_allocate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0$0$i = 0, $out$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i = sp;
 $2 = ($1>>>0)<(9);
 if ($2) {
  $3 = (_malloc($0)|0);
  $_0$0$i = $3;
  STACKTOP = sp;return ($_0$0$i|0);
 } else {
  HEAP32[$out$i$i>>2] = 0;
  $4 = (_posix_memalign($out$i$i,$1,$0)|0);
  $5 = ($4|0)==(0);
  $6 = HEAP32[$out$i$i>>2]|0;
  $$$i$i = $5 ? $6 : 0;
  $_0$0$i = $$$i$i;
  STACKTOP = sp;return ($_0$0$i|0);
 }
 return (0)|0;
}
function ___rust_deallocate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function ___rust_reallocate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i = 0, $_0$0$sroa$speculated$i$i = 0, $not$$i = 0, $out$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i$i = sp;
 $4 = ($3>>>0)<(9);
 if ($4) {
  $5 = (_realloc($0,$2)|0);
  $_0$0$i = $5;
  STACKTOP = sp;return ($_0$0$i|0);
 }
 HEAP32[$out$i$i$i>>2] = 0;
 $6 = (_posix_memalign($out$i$i$i,$3,$2)|0);
 $7 = HEAP32[$out$i$i$i>>2]|0;
 $8 = ($7|0)==(0|0);
 $not$$i = ($6|0)!=(0);
 $9 = $not$$i | $8;
 if ($9) {
  $_0$0$i = 0;
  STACKTOP = sp;return ($_0$0$i|0);
 }
 $10 = ($2>>>0)<=($1>>>0);
 $_0$0$sroa$speculated$i$i = $10 ? $2 : $1;
 _memmove(($7|0),($0|0),($_0$0$sroa$speculated$i$i|0))|0;
 _free($0);
 $_0$0$i = $7;
 STACKTOP = sp;return ($_0$0$i|0);
}
function __ZN4core5slice20slice_index_len_fail17h94caf57088443fc0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $index = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $index = sp + 44|0;
 $len = sp + 40|0;
 $_5 = sp + 16|0;
 $_10 = sp;
 HEAP32[$index>>2] = $0;
 HEAP32[$len>>2] = $1;
 $2 = $index;
 $3 = $len;
 HEAP32[$_10>>2] = $2;
 $4 = ((($_10)) + 4|0);
 HEAP32[$4>>2] = (197);
 $5 = ((($_10)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_10)) + 12|0);
 HEAP32[$6>>2] = (197);
 HEAP32[$_5>>2] = 3452;
 $7 = ((($_5)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = ((($_5)) + 16|0);
 HEAP32[$8>>2] = $_10;
 $9 = ((($_5)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_5,3400);
 // unreachable;
}
function __ZN4core9panicking18panic_bounds_check17h50f56530062f9abfE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_7 = 0, $index = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $index = sp + 44|0;
 $len = sp + 40|0;
 $_7 = sp + 16|0;
 $_12 = sp;
 HEAP32[$index>>2] = $1;
 HEAP32[$len>>2] = $2;
 $3 = $len;
 $4 = $index;
 HEAP32[$_12>>2] = $3;
 $5 = ((($_12)) + 4|0);
 HEAP32[$5>>2] = (197);
 $6 = ((($_12)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($_12)) + 12|0);
 HEAP32[$7>>2] = (197);
 HEAP32[$_7>>2] = 3436;
 $8 = ((($_7)) + 4|0);
 HEAP32[$8>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_7)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $9 = ((($_7)) + 16|0);
 HEAP32[$9>>2] = $_12;
 $10 = ((($_7)) + 20|0);
 HEAP32[$10>>2] = 2;
 __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_7,$0);
 // unreachable;
}
function __ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hdb8c33b52f357f07E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf31 = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf31 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)>(9999);
 if ($3) {
  $curr$0 = 20;$n$1 = $2;
  while(1) {
   $4 = (($n$1>>>0) % 10000)&-1;
   $5 = (($n$1>>>0) / 10000)&-1;
   $6 = (($4>>>0) / 100)&-1;
   $7 = $6 << 1;
   $8 = (($4>>>0) % 100)&-1;
   $9 = $8 << 1;
   $10 = (($curr$0) + -4)|0;
   $11 = (13147 + ($7)|0);
   $12 = (($buf31) + ($10)|0);
   $13 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=$13>>8;
   $14 = (13147 + ($9)|0);
   $15 = (($curr$0) + -2)|0;
   $16 = (($buf31) + ($15)|0);
   $17 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $10;$n$1 = $5;
   } else {
    $curr$1 = $10;$n$2 = $5;
    break;
   }
  }
 } else {
  $curr$1 = 20;$n$2 = $2;
 }
 $18 = ($n$2|0)>(99);
 if ($18) {
  $19 = (($n$2>>>0) % 100)&-1;
  $20 = $19 << 1;
  $21 = (($n$2>>>0) / 100)&-1;
  $22 = (($curr$1) + -2)|0;
  $23 = (13147 + ($20)|0);
  $24 = (($buf31) + ($22)|0);
  $25 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
  HEAP8[$24>>0]=$25&255;HEAP8[$24+1>>0]=$25>>8;
  $curr$2 = $22;$n1$0 = $21;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $26 = ($n1$0|0)<(10);
 if ($26) {
  $27 = (($curr$2) + -1)|0;
  $28 = $n1$0&255;
  $29 = (($buf31) + ($27)|0);
  $30 = (($28) + 48)<<24>>24;
  HEAP8[$29>>0] = $30;
  $curr$3 = $27;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (20 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($1,1,16608,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 } else {
  $31 = $n1$0 << 1;
  $32 = (($curr$2) + -2)|0;
  $33 = (13147 + ($31)|0);
  $34 = (($buf31) + ($32)|0);
  $35 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
  HEAP8[$34>>0]=$35&255;HEAP8[$34+1>>0]=$35>>8;
  $curr$3 = $32;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (20 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($1,1,16608,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_7 = 0, $_7$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_7$byval_copy = sp + 24|0;
 $_7 = sp;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$_7>>2]=HEAP32[$0>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_7+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_7+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_7+20>>2]=HEAP32[$0+20>>2]|0;
 ;HEAP32[$_7$byval_copy>>2]=HEAP32[$_7>>2]|0;HEAP32[$_7$byval_copy+4>>2]=HEAP32[$_7+4>>2]|0;HEAP32[$_7$byval_copy+8>>2]=HEAP32[$_7+8>>2]|0;HEAP32[$_7$byval_copy+12>>2]=HEAP32[$_7+12>>2]|0;HEAP32[$_7$byval_copy+16>>2]=HEAP32[$_7+16>>2]|0;HEAP32[$_7$byval_copy+20>>2]=HEAP32[$_7+20>>2]|0;
 _rust_begin_unwind($_7$byval_copy,$2,$4,$6);
 // unreachable;
}
function __ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$202 = 0, $$pre = 0, $$pre$phi214Z2D = 0, $$pre$phi218Z2D = 0, $$pre211 = 0, $$pre213 = 0, $$pre215 = 0, $$pre217 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$sroa$0$1 = 0, $_15$sroa$0$0$i = 0, $_15$sroa$0$0$i99 = 0, $_15$sroa$6$0$i = 0, $_15$sroa$6$0$i100 = 0;
 var $_16$i = 0, $_16$i$i$i = 0, $_16$i51 = 0, $_16$i72 = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $align$0$off0$i97 = 0, $align$0$off0$i97$clear = 0, $cond$i = 0, $cond$i95 = 0, $cont_bytes$0$lcssa$i = 0, $cont_bytes$021$i = 0, $extract$t$i = 0, $extract$t$i96 = 0, $fill$i = 0, $fill$i93 = 0, $iter$sroa$0$0$i = 0, $iter$sroa$0$0$i103 = 0, $iter2$sroa$0$0$i = 0, $iter2$sroa$0$0$i113 = 0;
 var $len$0$i$i = 0, $len$0$i$i126 = 0, $not$switch4$i = 0, $not$switch4$i$i = 0, $not$switch4$i$i$i = 0, $not$switch4$i$i$i$i = 0, $not$switch4$i$i115 = 0, $not$switch4$i$i45 = 0, $not$switch4$i$i55 = 0, $not$switch4$i$i76 = 0, $not$switch4$i2$i = 0, $not$switch4$i2$i105 = 0, $not$switch4$i62 = 0, $not$switch4$i8$i = 0, $not$switch4$i8$i108 = 0, $not$switch4$i83 = 0, $prefixed$0 = 0, $sign$sroa$0$0 = 0, $sign$sroa$10$0 = 0, $switch = 0;
 var $switch4$i = 0, $switch4$i$i$i = 0, $switch4$i52 = 0, $switch4$i73 = 0, $width$0 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_16$i$i$i = sp + 20|0;
 $fill$i93 = sp + 16|0;
 $_16$i72 = sp + 12|0;
 $_16$i51 = sp + 8|0;
 $_16$i = sp + 4|0;
 $fill$i = sp;
 if ($1) {
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & 1;
  $$202 = (($8) + ($5))|0;
  $10 = $7;$sign$sroa$0$0 = $8;$sign$sroa$10$0 = 43;$width$0 = $$202;
 } else {
  $6 = (($5) + 1)|0;
  $$pre = HEAP32[$0>>2]|0;
  $10 = $$pre;$sign$sroa$0$0 = 1;$sign$sroa$10$0 = 45;$width$0 = $6;
 }
 $9 = $10 & 4;
 $11 = ($9|0)==(0);
 if ($11) {
  $prefixed$0 = 0;$width$1 = $width$0;
 } else {
  $12 = (($2) + ($3)|0);
  $13 = ($3|0)==(0);
  if ($13) {
   $cont_bytes$0$lcssa$i = 0;
  } else {
   $15 = $2;$cont_bytes$021$i = 0;
   while(1) {
    $14 = ((($15)) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 & -64;
    $18 = ($17<<24>>24)==(-128);
    $19 = $18&1;
    $20 = (($19) + ($cont_bytes$021$i))|0;
    $21 = ($14|0)==($12|0);
    if ($21) {
     $cont_bytes$0$lcssa$i = $20;
     break;
    } else {
     $15 = $14;$cont_bytes$021$i = $20;
    }
   }
  }
  $22 = (($width$0) + ($3))|0;
  $23 = (($22) - ($cont_bytes$0$lcssa$i))|0;
  $prefixed$0 = 1;$width$1 = $23;
 }
 $24 = ((($0)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $switch = ($25|0)==(1);
 if (!($switch)) {
  $switch4$i = ($sign$sroa$0$0|0)==(1);
  if ($switch4$i) {
   $26 = ((($0)) + 24|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($0)) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$_16$i>>2] = 0;
   HEAP8[$_16$i>>0] = $sign$sroa$10$0;
   $30 = ((($29)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (FUNCTION_TABLE_iiii[$31 & 511]($27,$_16$i,1)|0);
   $not$switch4$i$i45 = ($32<<24>>24)==(0);
   if (!($not$switch4$i$i45)) {
    $_0$sroa$0$1 = 1;
    STACKTOP = sp;return ($_0$sroa$0$1|0);
   }
  }
  $33 = ($prefixed$0<<24>>24)==(0);
  $$pre215 = ((($0)) + 24|0);
  if ($33) {
   $$pre217 = ((($0)) + 28|0);
   $$pre$phi218Z2D = $$pre217;
  } else {
   $34 = HEAP32[$$pre215>>2]|0;
   $35 = ((($0)) + 28|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (FUNCTION_TABLE_iiii[$38 & 511]($34,$2,$3)|0);
   $not$switch4$i = ($39<<24>>24)==(0);
   if ($not$switch4$i) {
    $$pre$phi218Z2D = $35;
   } else {
    $_0$sroa$0$1 = 1;
    STACKTOP = sp;return ($_0$sroa$0$1|0);
   }
  }
  $156 = HEAP32[$$pre215>>2]|0;
  $157 = HEAP32[$$pre$phi218Z2D>>2]|0;
  $158 = ((($157)) + 12|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (FUNCTION_TABLE_iiii[$159 & 511]($156,$4,$5)|0);
  $_0$sroa$0$1 = $160;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 $70 = ((($0)) + 12|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71>>>0)>($width$1>>>0);
 if (!($72)) {
  $switch4$i52 = ($sign$sroa$0$0|0)==(1);
  if ($switch4$i52) {
   $40 = ((($0)) + 24|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($0)) + 28|0);
   $43 = HEAP32[$42>>2]|0;
   HEAP32[$_16$i51>>2] = 0;
   HEAP8[$_16$i51>>0] = $sign$sroa$10$0;
   $44 = ((($43)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (FUNCTION_TABLE_iiii[$45 & 511]($41,$_16$i51,1)|0);
   $not$switch4$i$i55 = ($46<<24>>24)==(0);
   if (!($not$switch4$i$i55)) {
    $_0$sroa$0$1 = 1;
    STACKTOP = sp;return ($_0$sroa$0$1|0);
   }
  }
  $47 = ($prefixed$0<<24>>24)==(0);
  $$pre211 = ((($0)) + 24|0);
  if ($47) {
   $$pre213 = ((($0)) + 28|0);
   $$pre$phi214Z2D = $$pre213;
  } else {
   $48 = HEAP32[$$pre211>>2]|0;
   $49 = ((($0)) + 28|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 511]($48,$2,$3)|0);
   $not$switch4$i62 = ($53<<24>>24)==(0);
   if ($not$switch4$i62) {
    $$pre$phi214Z2D = $49;
   } else {
    $_0$sroa$0$1 = 1;
    STACKTOP = sp;return ($_0$sroa$0$1|0);
   }
  }
  $161 = HEAP32[$$pre211>>2]|0;
  $162 = HEAP32[$$pre$phi214Z2D>>2]|0;
  $163 = ((($162)) + 12|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (FUNCTION_TABLE_iiii[$164 & 511]($161,$4,$5)|0);
  $_0$sroa$0$1 = $165;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 $73 = $10 & 8;
 $74 = ($73|0)==(0);
 if ($74) {
  $75 = (($71) - ($width$1))|0;
  $76 = ((($0)) + 48|0);
  $extract$t$i96 = HEAP8[$76>>0]|0;
  $cond$i95 = ($extract$t$i96<<24>>24)==(3);
  $align$0$off0$i97 = $cond$i95 ? 1 : $extract$t$i96;
  $align$0$off0$i97$clear = $align$0$off0$i97 & 3;
  switch ($align$0$off0$i97$clear<<24>>24) {
  case 0:  {
   $_15$sroa$0$0$i99 = 0;$_15$sroa$6$0$i100 = $75;
   break;
  }
  case 3: case 1:  {
   $_15$sroa$0$0$i99 = $75;$_15$sroa$6$0$i100 = 0;
   break;
  }
  case 2:  {
   $80 = $75 >>> 1;
   $81 = (($75) + 1)|0;
   $82 = $81 >>> 1;
   $_15$sroa$0$0$i99 = $80;$_15$sroa$6$0$i100 = $82;
   break;
  }
  default: {
   // unreachable;
  }
  }
  HEAP32[$fill$i93>>2] = 0;
  $77 = ((($0)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78>>>0)<(128);
  do {
   if ($79) {
    $115 = $78&255;
    HEAP8[$fill$i93>>0] = $115;
    $len$0$i$i126 = 1;
   } else {
    $116 = ($78>>>0)<(2048);
    if ($116) {
     $117 = $78 >>> 6;
     $118 = $117 & 31;
     $119 = $118&255;
     $120 = $119 | -64;
     HEAP8[$fill$i93>>0] = $120;
     $121 = $78 & 63;
     $122 = $121&255;
     $123 = ((($fill$i93)) + 1|0);
     $124 = $122 | -128;
     HEAP8[$123>>0] = $124;
     $len$0$i$i126 = 2;
     break;
    }
    $125 = ($78>>>0)<(65536);
    if ($125) {
     $126 = $78 >>> 12;
     $127 = $126 & 15;
     $128 = $127&255;
     $129 = $128 | -32;
     HEAP8[$fill$i93>>0] = $129;
     $130 = $78 >>> 6;
     $131 = $130 & 63;
     $132 = $131&255;
     $133 = ((($fill$i93)) + 1|0);
     $134 = $132 | -128;
     HEAP8[$133>>0] = $134;
     $135 = $78 & 63;
     $136 = $135&255;
     $137 = ((($fill$i93)) + 2|0);
     $138 = $136 | -128;
     HEAP8[$137>>0] = $138;
     $len$0$i$i126 = 3;
     break;
    } else {
     $139 = $78 >>> 18;
     $140 = $139&255;
     $141 = $140 | -16;
     HEAP8[$fill$i93>>0] = $141;
     $142 = $78 >>> 12;
     $143 = $142 & 63;
     $144 = $143&255;
     $145 = ((($fill$i93)) + 1|0);
     $146 = $144 | -128;
     HEAP8[$145>>0] = $146;
     $147 = $78 >>> 6;
     $148 = $147 & 63;
     $149 = $148&255;
     $150 = ((($fill$i93)) + 2|0);
     $151 = $149 | -128;
     HEAP8[$150>>0] = $151;
     $152 = $78 & 63;
     $153 = $152&255;
     $154 = ((($fill$i93)) + 3|0);
     $155 = $153 | -128;
     HEAP8[$154>>0] = $155;
     $len$0$i$i126 = 4;
     break;
    }
   }
  } while(0);
  $86 = ((($0)) + 24|0);
  $88 = ((($0)) + 28|0);
  $iter$sroa$0$0$i103 = 0;
  while(1) {
   $83 = ($iter$sroa$0$0$i103>>>0)<($_15$sroa$0$0$i99>>>0);
   if (!($83)) {
    break;
   }
   $84 = (($iter$sroa$0$0$i103) + 1)|0;
   $85 = HEAP32[$86>>2]|0;
   $87 = HEAP32[$88>>2]|0;
   $89 = ((($87)) + 12|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (FUNCTION_TABLE_iiii[$90 & 511]($85,$fill$i93,$len$0$i$i126)|0);
   $not$switch4$i2$i105 = ($91<<24>>24)==(0);
   if ($not$switch4$i2$i105) {
    $iter$sroa$0$0$i103 = $84;
   } else {
    label = 36;
    break;
   }
  }
  if ((label|0) == 36) {
   $_0$sroa$0$1 = 1;
   STACKTOP = sp;return ($_0$sroa$0$1|0);
  }
  $switch4$i$i$i = ($sign$sroa$0$0|0)==(1);
  if ($switch4$i$i$i) {
   $92 = HEAP32[$86>>2]|0;
   $93 = HEAP32[$88>>2]|0;
   HEAP32[$_16$i$i$i>>2] = 0;
   HEAP8[$_16$i$i$i>>0] = $sign$sroa$10$0;
   $94 = ((($93)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (FUNCTION_TABLE_iiii[$95 & 511]($92,$_16$i$i$i,1)|0);
   $not$switch4$i$i$i$i = ($96<<24>>24)==(0);
   if ($not$switch4$i$i$i$i) {
    label = 33;
   }
  } else {
   label = 33;
  }
  do {
   if ((label|0) == 33) {
    $97 = ($prefixed$0<<24>>24)==(0);
    if (!($97)) {
     $98 = HEAP32[$86>>2]|0;
     $99 = HEAP32[$88>>2]|0;
     $100 = ((($99)) + 12|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (FUNCTION_TABLE_iiii[$101 & 511]($98,$2,$3)|0);
     $not$switch4$i$i$i = ($102<<24>>24)==(0);
     if (!($not$switch4$i$i$i)) {
      break;
     }
    }
    $103 = HEAP32[$86>>2]|0;
    $104 = HEAP32[$88>>2]|0;
    $105 = ((($104)) + 12|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (FUNCTION_TABLE_iiii[$106 & 511]($103,$4,$5)|0);
    $not$switch4$i8$i108 = ($107<<24>>24)==(0);
    if ($not$switch4$i8$i108) {
     $iter2$sroa$0$0$i113 = 0;
     while(1) {
      $108 = ($iter2$sroa$0$0$i113>>>0)<($_15$sroa$6$0$i100>>>0);
      if (!($108)) {
       label = 40;
       break;
      }
      $109 = (($iter2$sroa$0$0$i113) + 1)|0;
      $110 = HEAP32[$86>>2]|0;
      $111 = HEAP32[$88>>2]|0;
      $112 = ((($111)) + 12|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = (FUNCTION_TABLE_iiii[$113 & 511]($110,$fill$i93,$len$0$i$i126)|0);
      $not$switch4$i$i115 = ($114<<24>>24)==(0);
      if ($not$switch4$i$i115) {
       $iter2$sroa$0$0$i113 = $109;
      } else {
       label = 41;
       break;
      }
     }
     if ((label|0) == 40) {
      $_0$sroa$0$1 = 0;
      STACKTOP = sp;return ($_0$sroa$0$1|0);
     }
     else if ((label|0) == 41) {
      $_0$sroa$0$1 = 1;
      STACKTOP = sp;return ($_0$sroa$0$1|0);
     }
    }
   }
  } while(0);
  $_0$sroa$0$1 = 1;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 $54 = ((($0)) + 4|0);
 HEAP32[$54>>2] = 48;
 $switch4$i73 = ($sign$sroa$0$0|0)==(1);
 if ($switch4$i73) {
  $55 = ((($0)) + 24|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($0)) + 28|0);
  $58 = HEAP32[$57>>2]|0;
  HEAP32[$_16$i72>>2] = 0;
  HEAP8[$_16$i72>>0] = $sign$sroa$10$0;
  $59 = ((($58)) + 12|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (FUNCTION_TABLE_iiii[$60 & 511]($56,$_16$i72,1)|0);
  $not$switch4$i$i76 = ($61<<24>>24)==(0);
  if (!($not$switch4$i$i76)) {
   $_0$sroa$0$1 = 1;
   STACKTOP = sp;return ($_0$sroa$0$1|0);
  }
 }
 $62 = ($prefixed$0<<24>>24)==(0);
 if (!($62)) {
  $63 = ((($0)) + 24|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($0)) + 28|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (FUNCTION_TABLE_iiii[$68 & 511]($64,$2,$3)|0);
  $not$switch4$i83 = ($69<<24>>24)==(0);
  if (!($not$switch4$i83)) {
   $_0$sroa$0$1 = 1;
   STACKTOP = sp;return ($_0$sroa$0$1|0);
  }
 }
 $166 = (($71) - ($width$1))|0;
 $167 = ((($0)) + 48|0);
 $extract$t$i = HEAP8[$167>>0]|0;
 $cond$i = ($extract$t$i<<24>>24)==(3);
 $align$0$off0$i = $cond$i ? 1 : $extract$t$i;
 $align$0$off0$i$clear = $align$0$off0$i & 3;
 switch ($align$0$off0$i$clear<<24>>24) {
 case 0:  {
  $_15$sroa$0$0$i = 0;$_15$sroa$6$0$i = $166;
  break;
 }
 case 3: case 1:  {
  $_15$sroa$0$0$i = $166;$_15$sroa$6$0$i = 0;
  break;
 }
 case 2:  {
  $170 = $166 >>> 1;
  $171 = (($166) + 1)|0;
  $172 = $171 >>> 1;
  $_15$sroa$0$0$i = $170;$_15$sroa$6$0$i = $172;
  break;
 }
 default: {
  // unreachable;
 }
 }
 HEAP32[$fill$i>>2] = 0;
 $168 = HEAP32[$54>>2]|0;
 $169 = ($168>>>0)<(128);
 do {
  if ($169) {
   $192 = $168&255;
   HEAP8[$fill$i>>0] = $192;
   $len$0$i$i = 1;
  } else {
   $193 = ($168>>>0)<(2048);
   if ($193) {
    $194 = $168 >>> 6;
    $195 = $194 & 31;
    $196 = $195&255;
    $197 = $196 | -64;
    HEAP8[$fill$i>>0] = $197;
    $198 = $168 & 63;
    $199 = $198&255;
    $200 = ((($fill$i)) + 1|0);
    $201 = $199 | -128;
    HEAP8[$200>>0] = $201;
    $len$0$i$i = 2;
    break;
   }
   $202 = ($168>>>0)<(65536);
   if ($202) {
    $203 = $168 >>> 12;
    $204 = $203 & 15;
    $205 = $204&255;
    $206 = $205 | -32;
    HEAP8[$fill$i>>0] = $206;
    $207 = $168 >>> 6;
    $208 = $207 & 63;
    $209 = $208&255;
    $210 = ((($fill$i)) + 1|0);
    $211 = $209 | -128;
    HEAP8[$210>>0] = $211;
    $212 = $168 & 63;
    $213 = $212&255;
    $214 = ((($fill$i)) + 2|0);
    $215 = $213 | -128;
    HEAP8[$214>>0] = $215;
    $len$0$i$i = 3;
    break;
   } else {
    $216 = $168 >>> 18;
    $217 = $216&255;
    $218 = $217 | -16;
    HEAP8[$fill$i>>0] = $218;
    $219 = $168 >>> 12;
    $220 = $219 & 63;
    $221 = $220&255;
    $222 = ((($fill$i)) + 1|0);
    $223 = $221 | -128;
    HEAP8[$222>>0] = $223;
    $224 = $168 >>> 6;
    $225 = $224 & 63;
    $226 = $225&255;
    $227 = ((($fill$i)) + 2|0);
    $228 = $226 | -128;
    HEAP8[$227>>0] = $228;
    $229 = $168 & 63;
    $230 = $229&255;
    $231 = ((($fill$i)) + 3|0);
    $232 = $230 | -128;
    HEAP8[$231>>0] = $232;
    $len$0$i$i = 4;
    break;
   }
  }
 } while(0);
 $175 = ((($0)) + 24|0);
 $177 = ((($0)) + 28|0);
 $iter$sroa$0$0$i = 0;
 while(1) {
  $173 = ($iter$sroa$0$0$i>>>0)<($_15$sroa$0$0$i>>>0);
  $174 = HEAP32[$175>>2]|0;
  $176 = HEAP32[$177>>2]|0;
  if (!($173)) {
   break;
  }
  $178 = (($iter$sroa$0$0$i) + 1)|0;
  $179 = ((($176)) + 12|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (FUNCTION_TABLE_iiii[$180 & 511]($174,$fill$i,$len$0$i$i)|0);
  $not$switch4$i2$i = ($181<<24>>24)==(0);
  if ($not$switch4$i2$i) {
   $iter$sroa$0$0$i = $178;
  } else {
   label = 60;
   break;
  }
 }
 if ((label|0) == 60) {
  $_0$sroa$0$1 = 1;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 $182 = ((($176)) + 12|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = (FUNCTION_TABLE_iiii[$183 & 511]($174,$4,$5)|0);
 $not$switch4$i8$i = ($184<<24>>24)==(0);
 if ($not$switch4$i8$i) {
  $iter2$sroa$0$0$i = 0;
 } else {
  $_0$sroa$0$1 = 1;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 while(1) {
  $185 = ($iter2$sroa$0$0$i>>>0)<($_15$sroa$6$0$i>>>0);
  if (!($185)) {
   label = 64;
   break;
  }
  $186 = (($iter2$sroa$0$0$i) + 1)|0;
  $187 = HEAP32[$175>>2]|0;
  $188 = HEAP32[$177>>2]|0;
  $189 = ((($188)) + 12|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (FUNCTION_TABLE_iiii[$190 & 511]($187,$fill$i,$len$0$i$i)|0);
  $not$switch4$i$i = ($191<<24>>24)==(0);
  if ($not$switch4$i$i) {
   $iter2$sroa$0$0$i = $186;
  } else {
   label = 65;
   break;
  }
 }
 if ((label|0) == 64) {
  $_0$sroa$0$1 = 0;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 else if ((label|0) == 65) {
  $_0$sroa$0$1 = 1;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 return (0)|0;
}
function __ZN4core9panicking5panic17h59646bf1cf7ad6f8E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_17 = 0, $_6 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_6 = sp + 24|0;
 $_10 = sp + 16|0;
 $_17 = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$_10>>2] = $1;
 $10 = ((($_10)) + 4|0);
 HEAP32[$10>>2] = $3;
 HEAP32[$_6>>2] = $_10;
 $11 = ((($_6)) + 4|0);
 HEAP32[$11>>2] = 1;
 $_6$sroa$0$0$$sroa_idx$i = ((($_6)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $12 = ((($_6)) + 16|0);
 HEAP32[$12>>2] = 16064;
 $13 = ((($_6)) + 20|0);
 HEAP32[$13>>2] = 0;
 HEAP32[$_17>>2] = $5;
 $14 = ((($_17)) + 4|0);
 HEAP32[$14>>2] = $7;
 $15 = ((($_17)) + 8|0);
 HEAP32[$15>>2] = $9;
 __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_6,$_17);
 // unreachable;
}
function __ZN4core5slice22slice_index_order_fail17hba8ec71a2aed226bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $end = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $index = sp + 44|0;
 $end = sp + 40|0;
 $_5 = sp + 16|0;
 $_10 = sp;
 HEAP32[$index>>2] = $0;
 HEAP32[$end>>2] = $1;
 $2 = $index;
 $3 = $end;
 HEAP32[$_10>>2] = $2;
 $4 = ((($_10)) + 4|0);
 HEAP32[$4>>2] = (197);
 $5 = ((($_10)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_10)) + 12|0);
 HEAP32[$6>>2] = (197);
 HEAP32[$_5>>2] = 3468;
 $7 = ((($_5)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = ((($_5)) + 16|0);
 HEAP32[$8>>2] = $_10;
 $9 = ((($_5)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_5,3388);
 // unreachable;
}
function __ZN4core3fmt9Formatter3pad17h73e9e4d07f9315a5E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast$i$i$i$i = 0, $$cast$i$i21$i$i = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$sroa$0$0 = 0, $_15$sroa$0$0$i = 0, $_15$sroa$6$0$i = 0;
 var $_17$sroa$0$0 = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $cond$i = 0, $cont_bytes$0$lcssa$i = 0, $cont_bytes$0$lcssa$i31 = 0, $cont_bytes$021$i = 0, $cont_bytes$021$i32 = 0, $extract$t$i = 0, $fill$i = 0, $iter$sroa$0$0$i = 0, $iter2$sroa$0$0$i = 0, $len$0$i$i = 0, $n$020$i$i = 0, $not$$i$i = 0, $not$switch4$i$i = 0, $not$switch4$i2$i = 0, $not$switch4$i8$i = 0, $or$cond = 0, $or$cond$i$i = 0;
 var $s1$sroa$10$0 = 0, $s1$sroa$10$096 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fill$i = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 $$phi$trans$insert = ((($0)) + 16|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $switch = ($$pre|0)==(1);
 if ($5) {
  if ($switch) {
   label = 6;
  } else {
   $s1$sroa$10$096 = $2;
  }
 } else {
  if ($switch) {
   label = 6;
  } else {
   $6 = ((($0)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 28|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (FUNCTION_TABLE_iiii[$11 & 511]($7,$1,$2)|0);
   $_0$sroa$0$0 = $12;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 }
 if ((label|0) == 6) {
  $13 = ((($0)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($1) + ($2)|0);
  $16 = ($14|0)==(0);
  $17 = ($2|0)==(0);
  $or$cond = $16 | $17;
  L8: do {
   if ($or$cond) {
    $s1$sroa$10$0 = 0;
   } else {
    $18 = $1;
    $$cast$i$i21$i$i = $1;$20 = $18;$_17$sroa$0$0 = 0;$n$020$i$i = $14;
    while(1) {
     $25 = ((($$cast$i$i21$i$i)) + 1|0);
     $26 = HEAP8[$$cast$i$i21$i$i>>0]|0;
     $27 = ($26<<24>>24)>(-1);
     $28 = $25;
     if ($27) {
      $22 = $28;
     } else {
      $29 = ($25|0)==($15|0);
      $30 = ((($$cast$i$i21$i$i)) + 2|0);
      $31 = $30;
      $32 = $29 ? $28 : $31;
      $33 = $29 ? $15 : $30;
      $34 = ($26&255)>(223);
      if ($34) {
       $35 = ($33|0)==($15|0);
       $36 = ((($33)) + 1|0);
       $37 = $36;
       $38 = $35 ? $32 : $37;
       $39 = $35 ? $15 : $36;
       $40 = ($26&255)>(239);
       if ($40) {
        $41 = ($39|0)==($15|0);
        $42 = ((($39)) + 1|0);
        $43 = $42;
        $44 = $41 ? $38 : $43;
        $22 = $44;
       } else {
        $22 = $38;
       }
      } else {
       $22 = $32;
      }
     }
     $45 = ($n$020$i$i|0)==(0);
     if ($45) {
      break;
     }
     $19 = (($_17$sroa$0$0) - ($20))|0;
     $21 = (($19) + ($22))|0;
     $23 = (($n$020$i$i) + -1)|0;
     $$cast$i$i$i$i = $22;
     $24 = ($$cast$i$i$i$i|0)==($15|0);
     if ($24) {
      $s1$sroa$10$0 = $2;
      break L8;
     } else {
      $$cast$i$i21$i$i = $$cast$i$i$i$i;$20 = $22;$_17$sroa$0$0 = $21;$n$020$i$i = $23;
     }
    }
    $46 = ($_17$sroa$0$0|0)==(0);
    $47 = ($_17$sroa$0$0|0)==($2|0);
    $or$cond$i$i = $46 | $47;
    if ($or$cond$i$i) {
     $s1$sroa$10$0 = $_17$sroa$0$0;
    } else {
     $not$$i$i = ($_17$sroa$0$0>>>0)<($2>>>0);
     if (!($not$$i$i)) {
      __ZN4core3str16slice_error_fail17h8c0c80047367e832E($1,$2,0,$_17$sroa$0$0);
      // unreachable;
     }
     $48 = (($1) + ($_17$sroa$0$0)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ($49<<24>>24)>(-65);
     if ($50) {
      $s1$sroa$10$0 = $_17$sroa$0$0;
     } else {
      __ZN4core3str16slice_error_fail17h8c0c80047367e832E($1,$2,0,$_17$sroa$0$0);
      // unreachable;
     }
    }
   }
  } while(0);
  if ($5) {
   $s1$sroa$10$096 = $s1$sroa$10$0;
  } else {
   $51 = ((($0)) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($0)) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (FUNCTION_TABLE_iiii[$56 & 511]($52,$1,$s1$sroa$10$0)|0);
   $_0$sroa$0$0 = $57;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 }
 $65 = ((($0)) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($1) + ($s1$sroa$10$096)|0);
 $68 = ($s1$sroa$10$096|0)==(0);
 if ($68) {
  $cont_bytes$0$lcssa$i31 = 0;
 } else {
  $70 = $1;$cont_bytes$021$i32 = 0;
  while(1) {
   $69 = ((($70)) + 1|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71 & -64;
   $73 = ($72<<24>>24)==(-128);
   $74 = $73&1;
   $75 = (($74) + ($cont_bytes$021$i32))|0;
   $76 = ($69|0)==($67|0);
   if ($76) {
    $cont_bytes$0$lcssa$i31 = $75;
    break;
   } else {
    $70 = $69;$cont_bytes$021$i32 = $75;
   }
  }
 }
 $77 = (($s1$sroa$10$096) - ($cont_bytes$0$lcssa$i31))|0;
 $78 = ($77>>>0)<($66>>>0);
 if (!($78)) {
  $58 = ((($0)) + 24|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($0)) + 28|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (FUNCTION_TABLE_iiii[$63 & 511]($59,$1,$s1$sroa$10$096)|0);
  $_0$sroa$0$0 = $64;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 if ($68) {
  $cont_bytes$0$lcssa$i = 0;
 } else {
  $80 = $1;$cont_bytes$021$i = 0;
  while(1) {
   $79 = ((($80)) + 1|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81 & -64;
   $83 = ($82<<24>>24)==(-128);
   $84 = $83&1;
   $85 = (($84) + ($cont_bytes$021$i))|0;
   $86 = ($79|0)==($67|0);
   if ($86) {
    $cont_bytes$0$lcssa$i = $85;
    break;
   } else {
    $80 = $79;$cont_bytes$021$i = $85;
   }
  }
 }
 $87 = (($cont_bytes$0$lcssa$i) - ($s1$sroa$10$096))|0;
 $88 = (($87) + ($66))|0;
 $89 = ((($0)) + 48|0);
 $extract$t$i = HEAP8[$89>>0]|0;
 $cond$i = ($extract$t$i<<24>>24)==(3);
 $align$0$off0$i = $cond$i ? 0 : $extract$t$i;
 $align$0$off0$i$clear = $align$0$off0$i & 3;
 switch ($align$0$off0$i$clear<<24>>24) {
 case 0:  {
  $_15$sroa$0$0$i = 0;$_15$sroa$6$0$i = $88;
  break;
 }
 case 3: case 1:  {
  $_15$sroa$0$0$i = $88;$_15$sroa$6$0$i = 0;
  break;
 }
 case 2:  {
  $93 = $88 >>> 1;
  $94 = (($88) + 1)|0;
  $95 = $94 >>> 1;
  $_15$sroa$0$0$i = $93;$_15$sroa$6$0$i = $95;
  break;
 }
 default: {
  // unreachable;
 }
 }
 HEAP32[$fill$i>>2] = 0;
 $90 = ((($0)) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91>>>0)<(128);
 do {
  if ($92) {
   $115 = $91&255;
   HEAP8[$fill$i>>0] = $115;
   $len$0$i$i = 1;
  } else {
   $116 = ($91>>>0)<(2048);
   if ($116) {
    $117 = $91 >>> 6;
    $118 = $117 & 31;
    $119 = $118&255;
    $120 = $119 | -64;
    HEAP8[$fill$i>>0] = $120;
    $121 = $91 & 63;
    $122 = $121&255;
    $123 = ((($fill$i)) + 1|0);
    $124 = $122 | -128;
    HEAP8[$123>>0] = $124;
    $len$0$i$i = 2;
    break;
   }
   $125 = ($91>>>0)<(65536);
   if ($125) {
    $126 = $91 >>> 12;
    $127 = $126 & 15;
    $128 = $127&255;
    $129 = $128 | -32;
    HEAP8[$fill$i>>0] = $129;
    $130 = $91 >>> 6;
    $131 = $130 & 63;
    $132 = $131&255;
    $133 = ((($fill$i)) + 1|0);
    $134 = $132 | -128;
    HEAP8[$133>>0] = $134;
    $135 = $91 & 63;
    $136 = $135&255;
    $137 = ((($fill$i)) + 2|0);
    $138 = $136 | -128;
    HEAP8[$137>>0] = $138;
    $len$0$i$i = 3;
    break;
   } else {
    $139 = $91 >>> 18;
    $140 = $139&255;
    $141 = $140 | -16;
    HEAP8[$fill$i>>0] = $141;
    $142 = $91 >>> 12;
    $143 = $142 & 63;
    $144 = $143&255;
    $145 = ((($fill$i)) + 1|0);
    $146 = $144 | -128;
    HEAP8[$145>>0] = $146;
    $147 = $91 >>> 6;
    $148 = $147 & 63;
    $149 = $148&255;
    $150 = ((($fill$i)) + 2|0);
    $151 = $149 | -128;
    HEAP8[$150>>0] = $151;
    $152 = $91 & 63;
    $153 = $152&255;
    $154 = ((($fill$i)) + 3|0);
    $155 = $153 | -128;
    HEAP8[$154>>0] = $155;
    $len$0$i$i = 4;
    break;
   }
  }
 } while(0);
 $98 = ((($0)) + 24|0);
 $100 = ((($0)) + 28|0);
 $iter$sroa$0$0$i = 0;
 while(1) {
  $96 = ($iter$sroa$0$0$i>>>0)<($_15$sroa$0$0$i>>>0);
  $97 = HEAP32[$98>>2]|0;
  $99 = HEAP32[$100>>2]|0;
  if (!($96)) {
   break;
  }
  $101 = (($iter$sroa$0$0$i) + 1)|0;
  $102 = ((($99)) + 12|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (FUNCTION_TABLE_iiii[$103 & 511]($97,$fill$i,$len$0$i$i)|0);
  $not$switch4$i2$i = ($104<<24>>24)==(0);
  if ($not$switch4$i2$i) {
   $iter$sroa$0$0$i = $101;
  } else {
   label = 33;
   break;
  }
 }
 if ((label|0) == 33) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 $105 = ((($99)) + 12|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (FUNCTION_TABLE_iiii[$106 & 511]($97,$1,$s1$sroa$10$096)|0);
 $not$switch4$i8$i = ($107<<24>>24)==(0);
 if ($not$switch4$i8$i) {
  $iter2$sroa$0$0$i = 0;
 } else {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 while(1) {
  $108 = ($iter2$sroa$0$0$i>>>0)<($_15$sroa$6$0$i>>>0);
  if (!($108)) {
   label = 37;
   break;
  }
  $109 = (($iter2$sroa$0$0$i) + 1)|0;
  $110 = HEAP32[$98>>2]|0;
  $111 = HEAP32[$100>>2]|0;
  $112 = ((($111)) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (FUNCTION_TABLE_iiii[$113 & 511]($110,$fill$i,$len$0$i$i)|0);
  $not$switch4$i$i = ($114<<24>>24)==(0);
  if ($not$switch4$i$i) {
   $iter2$sroa$0$0$i = $109;
  } else {
   label = 38;
   break;
  }
 }
 if ((label|0) == 37) {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 38) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN4core3str16slice_error_fail17h8c0c80047367e832E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$27 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_18 = 0, $_23 = 0, $_47 = 0, $_52 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i8 = 0, $_9$sroa$0$0 = 0, $_9$sroa$8$0 = 0, $begin = 0, $ellipsis = 0, $end = 0, $max$0$i25 = 0, $not$$i$i = 0, $or$cond$i$i = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $begin = sp + 132|0;
 $end = sp + 128|0;
 $s = sp + 120|0;
 $ellipsis = sp + 112|0;
 $_18 = sp + 88|0;
 $_23 = sp + 56|0;
 $_47 = sp + 32|0;
 $_52 = sp;
 HEAP32[$begin>>2] = $2;
 HEAP32[$end>>2] = $3;
 $4 = ($1>>>0)<(257);
 L1: do {
  if ($4) {
   $_9$sroa$0$0 = 1;$_9$sroa$8$0 = $1;
  } else {
   $max$0$i25 = 256;
   while(1) {
    $not$$i$i = ($max$0$i25>>>0)<($1>>>0);
    if ($not$$i$i) {
     $5 = (($0) + ($max$0$i25)|0);
     $6 = HEAP8[$5>>0]|0;
     $7 = ($6<<24>>24)>(-65);
     if ($7) {
      $_9$sroa$0$0 = 0;$_9$sroa$8$0 = $max$0$i25;
      break L1;
     }
    }
    $8 = (($max$0$i25) + -1)|0;
    $9 = ($8|0)==(0);
    $10 = ($8|0)==($1|0);
    $or$cond$i$i = $9 | $10;
    if ($or$cond$i$i) {
     $_9$sroa$0$0 = 0;$_9$sroa$8$0 = $8;
     break;
    } else {
     $max$0$i25 = $8;
    }
   }
  }
 } while(0);
 $11 = $0;
 HEAP32[$s>>2] = $11;
 $12 = ((($s)) + 4|0);
 HEAP32[$12>>2] = $_9$sroa$8$0;
 $$ = $_9$sroa$0$0 ? 16608 : 13422;
 $$27 = $_9$sroa$0$0 ? 0 : 5;
 HEAP32[$ellipsis>>2] = $$;
 $13 = ((($ellipsis)) + 4|0);
 HEAP32[$13>>2] = $$27;
 $14 = ($2>>>0)>($3>>>0);
 if ($14) {
  $15 = $begin;
  $16 = $end;
  $17 = $s;
  $18 = $ellipsis;
  HEAP32[$_23>>2] = $15;
  $19 = ((($_23)) + 4|0);
  HEAP32[$19>>2] = (197);
  $20 = ((($_23)) + 8|0);
  HEAP32[$20>>2] = $16;
  $21 = ((($_23)) + 12|0);
  HEAP32[$21>>2] = (197);
  $22 = ((($_23)) + 16|0);
  HEAP32[$22>>2] = $17;
  $23 = ((($_23)) + 20|0);
  HEAP32[$23>>2] = (368);
  $24 = ((($_23)) + 24|0);
  HEAP32[$24>>2] = $18;
  $25 = ((($_23)) + 28|0);
  HEAP32[$25>>2] = (368);
  HEAP32[$_18>>2] = 3484;
  $26 = ((($_18)) + 4|0);
  HEAP32[$26>>2] = 4;
  $_6$sroa$0$0$$sroa_idx$i = ((($_18)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $27 = ((($_18)) + 16|0);
  HEAP32[$27>>2] = $_23;
  $28 = ((($_18)) + 20|0);
  HEAP32[$28>>2] = 4;
  __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_18,3376);
  // unreachable;
 } else {
  $29 = $begin;
  $30 = $end;
  $31 = $s;
  $32 = $ellipsis;
  HEAP32[$_52>>2] = $29;
  $33 = ((($_52)) + 4|0);
  HEAP32[$33>>2] = (197);
  $34 = ((($_52)) + 8|0);
  HEAP32[$34>>2] = $30;
  $35 = ((($_52)) + 12|0);
  HEAP32[$35>>2] = (197);
  $36 = ((($_52)) + 16|0);
  HEAP32[$36>>2] = $31;
  $37 = ((($_52)) + 20|0);
  HEAP32[$37>>2] = (368);
  $38 = ((($_52)) + 24|0);
  HEAP32[$38>>2] = $32;
  $39 = ((($_52)) + 28|0);
  HEAP32[$39>>2] = (368);
  HEAP32[$_47>>2] = 3516;
  $40 = ((($_47)) + 4|0);
  HEAP32[$40>>2] = 5;
  $_6$sroa$0$0$$sroa_idx$i8 = ((($_47)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i8>>2] = 0;
  $41 = ((($_47)) + 16|0);
  HEAP32[$41>>2] = $_52;
  $42 = ((($_47)) + 20|0);
  HEAP32[$42>>2] = 4;
  __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_47,3364);
  // unreachable;
 }
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17ha3b8a98364490850E_596($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN4core3fmt9Formatter3pad17h73e9e4d07f9315a5E($1,$2,$4)|0);
 return ($5|0);
}
function __ZN4core3fmt5write17he0deec3411c715a1E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx = 0, $$sroa_idx203 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$sroa$0$0 = 0, $_12$sroa$8$2$i = 0, $_6$sroa$0$0$$sroa_idx = 0, $_7$sroa$0$0$$sroa_idx = 0, $_8$sroa$8$2$i = 0;
 var $args$sroa$0$0$copyload = 0, $args$sroa$12$0$$sroa_idx63 = 0, $args$sroa$12$0$copyload = 0, $args$sroa$5$0$$sroa_idx48 = 0, $args$sroa$5$0$copyload = 0, $args$sroa$6$0$$sroa_idx51 = 0, $args$sroa$6$0$copyload = 0, $args$sroa$8$0$$sroa_idx55 = 0, $args$sroa$8$0$copyload = 0, $args$sroa$9$0$$sroa_idx58 = 0, $args$sroa$9$0$copyload = 0, $formatter = 0, $iter$sroa$0$0 = 0, $iter2$sroa$0$0 = 0, $not$switch4$i = 0, $not$switch4$i68 = 0, $not$switch4$i70 = 0, $not$switch4$i72 = 0, $not$switch4$i74 = 0, $or$cond = 0;
 var $pieces$sroa$0$0 = 0, $pieces$sroa$0$1 = 0, $pieces$sroa$0$4 = 0, $switch$i = 0, $switch21tmp = 0, $switch22tmp = 0, $switchtmp = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i5$i = 0, $trunc$i5$i$clear = 0, $value$sroa$0$0$i = 0, $value$sroa$0$0$in$i = 0, $value$sroa$5$0$i = 0, $value$sroa$5$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $formatter = sp;
 $args$sroa$0$0$copyload = HEAP32[$2>>2]|0;
 $args$sroa$5$0$$sroa_idx48 = ((($2)) + 4|0);
 $args$sroa$5$0$copyload = HEAP32[$args$sroa$5$0$$sroa_idx48>>2]|0;
 $args$sroa$6$0$$sroa_idx51 = ((($2)) + 8|0);
 $args$sroa$6$0$copyload = HEAP32[$args$sroa$6$0$$sroa_idx51>>2]|0;
 $args$sroa$8$0$$sroa_idx55 = ((($2)) + 12|0);
 $args$sroa$8$0$copyload = HEAP32[$args$sroa$8$0$$sroa_idx55>>2]|0;
 $args$sroa$9$0$$sroa_idx58 = ((($2)) + 16|0);
 $args$sroa$9$0$copyload = HEAP32[$args$sroa$9$0$$sroa_idx58>>2]|0;
 $args$sroa$12$0$$sroa_idx63 = ((($2)) + 20|0);
 $args$sroa$12$0$copyload = HEAP32[$args$sroa$12$0$$sroa_idx63>>2]|0;
 $3 = (($args$sroa$9$0$copyload) + ($args$sroa$12$0$copyload<<3)|0);
 $4 = $args$sroa$9$0$copyload;
 $5 = $3;
 HEAP32[$formatter>>2] = 0;
 $6 = ((($formatter)) + 4|0);
 HEAP32[$6>>2] = 32;
 $7 = ((($formatter)) + 48|0);
 HEAP8[$7>>0] = 3;
 $_6$sroa$0$0$$sroa_idx = ((($formatter)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx>>2] = 0;
 $_7$sroa$0$0$$sroa_idx = ((($formatter)) + 16|0);
 HEAP32[$_7$sroa$0$0$$sroa_idx>>2] = 0;
 $8 = ((($formatter)) + 24|0);
 HEAP32[$8>>2] = $0;
 $9 = ((($formatter)) + 28|0);
 HEAP32[$9>>2] = $1;
 $$sroa_idx = ((($formatter)) + 32|0);
 HEAP32[$$sroa_idx>>2] = $4;
 $$sroa_idx203 = ((($formatter)) + 36|0);
 HEAP32[$$sroa_idx203>>2] = $5;
 $10 = ((($formatter)) + 40|0);
 HEAP32[$10>>2] = $args$sroa$9$0$copyload;
 $11 = ((($formatter)) + 44|0);
 HEAP32[$11>>2] = $args$sroa$12$0$copyload;
 $12 = (($args$sroa$0$0$copyload) + ($args$sroa$5$0$copyload<<3)|0);
 $switchtmp = ($args$sroa$6$0$copyload|0)==(0|0);
 L1: do {
  if ($switchtmp) {
   $iter$sroa$0$0 = $args$sroa$9$0$copyload;$pieces$sroa$0$1 = $args$sroa$0$0$copyload;
   while(1) {
    $18 = ($iter$sroa$0$0|0)==($3|0);
    if ($18) {
     $pieces$sroa$0$0 = $pieces$sroa$0$1;
     label = 3;
     break L1;
    }
    $19 = ((($iter$sroa$0$0)) + 8|0);
    $20 = ($pieces$sroa$0$1|0)==($12|0);
    if ($20) {
     label = 43;
     break L1;
    }
    $21 = ((($pieces$sroa$0$1)) + 8|0);
    $switch22tmp = ($iter$sroa$0$0|0)==(0|0);
    if ($switch22tmp) {
     $pieces$sroa$0$0 = $21;
     label = 3;
     break L1;
    }
    $22 = HEAP32[$8>>2]|0;
    $23 = HEAP32[$9>>2]|0;
    $24 = HEAP32[$pieces$sroa$0$1>>2]|0;
    $25 = ((($pieces$sroa$0$1)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($23)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iiii[$28 & 511]($22,$24,$26)|0);
    $not$switch4$i74 = ($29<<24>>24)==(0);
    if (!($not$switch4$i74)) {
     label = 10;
     break L1;
    }
    $30 = ((($iter$sroa$0$0)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP32[$iter$sroa$0$0>>2]|0;
    $33 = (FUNCTION_TABLE_iii[$31 & 511]($32,$formatter)|0);
    $not$switch4$i72 = ($33<<24>>24)==(0);
    if ($not$switch4$i72) {
     $iter$sroa$0$0 = $19;$pieces$sroa$0$1 = $21;
    } else {
     label = 10;
     break;
    }
   }
  } else {
   $13 = (($args$sroa$6$0$copyload) + (($args$sroa$8$0$copyload*36)|0)|0);
   $14 = ((($formatter)) + 8|0);
   $15 = ((($formatter)) + 16|0);
   $16 = ((($formatter)) + 32|0);
   $iter2$sroa$0$0 = $args$sroa$6$0$copyload;$pieces$sroa$0$4 = $args$sroa$0$0$copyload;
   L9: while(1) {
    $34 = ($iter2$sroa$0$0|0)==($13|0);
    if ($34) {
     $pieces$sroa$0$0 = $pieces$sroa$0$4;
     label = 3;
     break L1;
    }
    $35 = ((($iter2$sroa$0$0)) + 36|0);
    $36 = ($pieces$sroa$0$4|0)==($12|0);
    if ($36) {
     label = 43;
     break L1;
    }
    $37 = ((($pieces$sroa$0$4)) + 8|0);
    $38 = HEAP32[$8>>2]|0;
    $39 = HEAP32[$9>>2]|0;
    $40 = HEAP32[$pieces$sroa$0$4>>2]|0;
    $41 = ((($pieces$sroa$0$4)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($39)) + 12|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (FUNCTION_TABLE_iiii[$44 & 511]($38,$40,$42)|0);
    $not$switch4$i70 = ($45<<24>>24)==(0);
    if (!($not$switch4$i70)) {
     label = 10;
     break L1;
    }
    $46 = ((($iter2$sroa$0$0)) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    HEAP32[$6>>2] = $47;
    $48 = ((($iter2$sroa$0$0)) + 32|0);
    $49 = HEAP8[$48>>0]|0;
    HEAP8[$7>>0] = $49;
    $50 = ((($iter2$sroa$0$0)) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    HEAP32[$formatter>>2] = $51;
    $52 = ((($iter2$sroa$0$0)) + 24|0);
    $53 = HEAP32[$52>>2]|0;
    $trunc$i$i = $53&255;
    $trunc$i$i$clear = $trunc$i$i & 3;
    switch ($trunc$i$i$clear<<24>>24) {
    case 0:  {
     $63 = ((($iter2$sroa$0$0)) + 28|0);
     $64 = HEAP32[$63>>2]|0;
     $77 = 0;$80 = 1;$_8$sroa$8$2$i = $64;
     break;
    }
    case 1:  {
     $65 = ((($iter2$sroa$0$0)) + 28|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = HEAP32[$11>>2]|0;
     $68 = ($66>>>0)<($67>>>0);
     if (!($68)) {
      label = 23;
      break L9;
     }
     $69 = HEAP32[$10>>2]|0;
     $70 = (((($69) + ($66<<3)|0)) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)==((369)|0);
     if ($72) {
      $73 = (($69) + ($66<<3)|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = HEAP32[$74>>2]|0;
      $77 = 0;$80 = 1;$_8$sroa$8$2$i = $75;
     } else {
      $77 = 0;$80 = 0;$_8$sroa$8$2$i = 0;
     }
     break;
    }
    case 2:  {
     $54 = HEAP32[$16>>2]|0;
     $55 = HEAP32[$$sroa_idx203>>2]|0;
     $56 = ($54|0)==($55|0);
     if ($56) {
      $77 = 0;$80 = 0;$_8$sroa$8$2$i = 0;
     } else {
      $57 = ((($54)) + 8|0);
      HEAP32[$16>>2] = $57;
      $58 = ((($54)) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($59|0)==((369)|0);
      if ($60) {
       $61 = HEAP32[$54>>2]|0;
       $62 = HEAP32[$61>>2]|0;
       $77 = 0;$80 = 1;$_8$sroa$8$2$i = $62;
      } else {
       $77 = 0;$80 = 0;$_8$sroa$8$2$i = 0;
      }
     }
     break;
    }
    case 3:  {
     $77 = 0;$80 = 0;$_8$sroa$8$2$i = 0;
     break;
    }
    default: {
     label = 22;
     break L9;
    }
    }
    $76 = $_8$sroa$8$2$i | $77;
    $78 = $14;
    $79 = $78;
    HEAP32[$79>>2] = $80;
    $81 = (($78) + 4)|0;
    $82 = $81;
    HEAP32[$82>>2] = $76;
    $83 = ((($iter2$sroa$0$0)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    $trunc$i5$i = $84&255;
    $trunc$i5$i$clear = $trunc$i5$i & 3;
    switch ($trunc$i5$i$clear<<24>>24) {
    case 0:  {
     $94 = ((($iter2$sroa$0$0)) + 20|0);
     $95 = HEAP32[$94>>2]|0;
     $108 = 0;$111 = 1;$_12$sroa$8$2$i = $95;
     break;
    }
    case 1:  {
     $96 = ((($iter2$sroa$0$0)) + 20|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = HEAP32[$11>>2]|0;
     $99 = ($97>>>0)<($98>>>0);
     if (!($99)) {
      label = 33;
      break L9;
     }
     $100 = HEAP32[$10>>2]|0;
     $101 = (((($100) + ($97<<3)|0)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)==((369)|0);
     if ($103) {
      $104 = (($100) + ($97<<3)|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = HEAP32[$105>>2]|0;
      $108 = 0;$111 = 1;$_12$sroa$8$2$i = $106;
     } else {
      $108 = 0;$111 = 0;$_12$sroa$8$2$i = 0;
     }
     break;
    }
    case 2:  {
     $85 = HEAP32[$16>>2]|0;
     $86 = HEAP32[$$sroa_idx203>>2]|0;
     $87 = ($85|0)==($86|0);
     if ($87) {
      $108 = 0;$111 = 0;$_12$sroa$8$2$i = 0;
     } else {
      $88 = ((($85)) + 8|0);
      HEAP32[$16>>2] = $88;
      $89 = ((($85)) + 4|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90|0)==((369)|0);
      if ($91) {
       $92 = HEAP32[$85>>2]|0;
       $93 = HEAP32[$92>>2]|0;
       $108 = 0;$111 = 1;$_12$sroa$8$2$i = $93;
      } else {
       $108 = 0;$111 = 0;$_12$sroa$8$2$i = 0;
      }
     }
     break;
    }
    case 3:  {
     $108 = 0;$111 = 0;$_12$sroa$8$2$i = 0;
     break;
    }
    default: {
     label = 32;
     break L9;
    }
    }
    $107 = $_12$sroa$8$2$i | $108;
    $109 = $15;
    $110 = $109;
    HEAP32[$110>>2] = $111;
    $112 = (($109) + 4)|0;
    $113 = $112;
    HEAP32[$113>>2] = $107;
    $114 = HEAP32[$iter2$sroa$0$0>>2]|0;
    $switch$i = ($114|0)==(1);
    if ($switch$i) {
     $120 = ((($iter2$sroa$0$0)) + 4|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = HEAP32[$11>>2]|0;
     $123 = ($121>>>0)<($122>>>0);
     if (!($123)) {
      label = 40;
      break;
     }
     $124 = HEAP32[$10>>2]|0;
     $125 = (($124) + ($121<<3)|0);
     $126 = (((($124) + ($121<<3)|0)) + 4|0);
     $value$sroa$0$0$in$i = $125;$value$sroa$5$0$in$i = $126;
    } else {
     $115 = HEAP32[$16>>2]|0;
     $116 = HEAP32[$$sroa_idx203>>2]|0;
     $117 = ($115|0)==($116|0);
     if ($117) {
      label = 37;
      break;
     }
     $118 = ((($115)) + 8|0);
     HEAP32[$16>>2] = $118;
     $119 = ((($115)) + 4|0);
     $value$sroa$0$0$in$i = $115;$value$sroa$5$0$in$i = $119;
    }
    $value$sroa$5$0$i = HEAP32[$value$sroa$5$0$in$i>>2]|0;
    $value$sroa$0$0$i = HEAP32[$value$sroa$0$0$in$i>>2]|0;
    $127 = (FUNCTION_TABLE_iii[$value$sroa$5$0$i & 511]($value$sroa$0$0$i,$formatter)|0);
    $not$switch4$i68 = ($127<<24>>24)==(0);
    if ($not$switch4$i68) {
     $iter2$sroa$0$0 = $35;$pieces$sroa$0$4 = $37;
    } else {
     label = 10;
     break L1;
    }
   }
   if ((label|0) == 22) {
    // unreachable;
   }
   else if ((label|0) == 23) {
    __ZN4core9panicking18panic_bounds_check17h50f56530062f9abfE(3556,$66,$67);
    // unreachable;
   }
   else if ((label|0) == 32) {
    // unreachable;
   }
   else if ((label|0) == 33) {
    __ZN4core9panicking18panic_bounds_check17h50f56530062f9abfE(3556,$97,$98);
    // unreachable;
   }
   else if ((label|0) == 37) {
    __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3288);
    // unreachable;
   }
   else if ((label|0) == 40) {
    __ZN4core9panicking18panic_bounds_check17h50f56530062f9abfE(3568,$121,$122);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $17 = ($pieces$sroa$0$0|0)==($12|0);
  $switch21tmp = ($pieces$sroa$0$0|0)==(0|0);
  $or$cond = $17 | $switch21tmp;
  if ($or$cond) {
   label = 43;
  } else {
   $128 = HEAP32[$8>>2]|0;
   $129 = HEAP32[$9>>2]|0;
   $130 = HEAP32[$pieces$sroa$0$0>>2]|0;
   $131 = ((($pieces$sroa$0$0)) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($129)) + 12|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (FUNCTION_TABLE_iiii[$134 & 511]($128,$130,$132)|0);
   $not$switch4$i = ($135<<24>>24)==(0);
   if ($not$switch4$i) {
    label = 43;
   } else {
    label = 10;
   }
  }
 }
 if ((label|0) == 10) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 43) {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN4core3fmt10ArgumentV110show_usize17hafea74842859ac5eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hdb8c33b52f357f07E($0,$1)|0);
 return ($2|0);
}
function __ZN4core3fmt8builders10DebugTuple5field17hfd6be2ee9fdea117E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i = 0, $$15$i$i = 0, $$16$i$i = 0, $$elt = 0, $$unpack = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0$sroa$0$0$i = 0, $_0$sroa$0$0$i$i = 0, $_15$i$i = 0, $_20$i$i = 0, $_34$sroa$4$0$$sroa_idx19$i$i = 0, $_34$sroa$5$0$$sroa_idx21$i$i = 0, $_34$sroa$624$0$$sroa_idx26$i$i = 0, $_34$sroa$7$0$$sroa_idx28$i$i = 0, $_39$i$i = 0, $_7$i$i$i = 0, $_8$sroa$0$0$$sroa_idx$i$i$i = 0, $_8$sroa$4$0$$sroa_idx2$i$i$i = 0, $prefix$i$i = 0, $space$i$i = 0, $switch3$i = 0, $value = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_7$i$i$i = sp + 96|0;
 $prefix$i$i = sp + 88|0;
 $space$i$i = sp + 80|0;
 $writer$i$i = sp + 72|0;
 $_15$i$i = sp + 48|0;
 $_20$i$i = sp + 32|0;
 $_39$i$i = sp + 8|0;
 $value = sp;
 HEAP32[$value>>2] = $1;
 $3 = ((($value)) + 4|0);
 HEAP32[$3>>2] = $2;
 $$elt = ((($0)) + 8|0);
 $$unpack = HEAP8[$$elt>>0]|0;
 $4 = $value;
 $switch3$i = ($$unpack<<24>>24)==(0);
 $5 = ((($0)) + 4|0);
 if (!($switch3$i)) {
  $_0$sroa$0$0$i = 1;
  HEAP8[$$elt>>0] = $_0$sroa$0$0$i;
  $37 = HEAP32[$5>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$5>>2] = $38;
  STACKTOP = sp;return ($0|0);
 }
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 $$$i$i = $7 ? 8360 : 8369;
 $$15$i$i = $7 ? 16608 : 13611;
 $8 = $7&1;
 $$16$i$i = $8 ^ 1;
 HEAP32[$prefix$i$i>>2] = $$$i$i;
 $9 = ((($prefix$i$i)) + 4|0);
 HEAP32[$9>>2] = 1;
 HEAP32[$space$i$i>>2] = $$15$i$i;
 $10 = ((($space$i$i)) + 4|0);
 HEAP32[$10>>2] = $$16$i$i;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 4;
 $14 = ($13|0)==(0);
 if ($14) {
  $25 = $prefix$i$i;
  $26 = $space$i$i;
  HEAP32[$_39$i$i>>2] = $25;
  $27 = ((($_39$i$i)) + 4|0);
  HEAP32[$27>>2] = (368);
  $28 = ((($_39$i$i)) + 8|0);
  HEAP32[$28>>2] = $26;
  $29 = ((($_39$i$i)) + 12|0);
  HEAP32[$29>>2] = (368);
  $30 = ((($_39$i$i)) + 16|0);
  HEAP32[$30>>2] = $4;
  $31 = ((($_39$i$i)) + 20|0);
  HEAP32[$31>>2] = (370);
  $32 = ((($11)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($11)) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$_7$i$i$i>>2] = 3668;
  $_34$sroa$4$0$$sroa_idx19$i$i = ((($_7$i$i$i)) + 4|0);
  HEAP32[$_34$sroa$4$0$$sroa_idx19$i$i>>2] = 3;
  $_34$sroa$5$0$$sroa_idx21$i$i = ((($_7$i$i$i)) + 8|0);
  HEAP32[$_34$sroa$5$0$$sroa_idx21$i$i>>2] = 0;
  $_34$sroa$624$0$$sroa_idx26$i$i = ((($_7$i$i$i)) + 16|0);
  HEAP32[$_34$sroa$624$0$$sroa_idx26$i$i>>2] = $_39$i$i;
  $_34$sroa$7$0$$sroa_idx28$i$i = ((($_7$i$i$i)) + 20|0);
  HEAP32[$_34$sroa$7$0$$sroa_idx28$i$i>>2] = 3;
  $36 = (__ZN4core3fmt5write17he0deec3411c715a1E($33,$35,$_7$i$i$i)|0);
  $_0$sroa$0$0$i$i = $36;
 } else {
  $15 = $11;
  HEAP32[$writer$i$i>>2] = $15;
  $16 = ((($writer$i$i)) + 4|0);
  HEAP8[$16>>0] = 0;
  $17 = $prefix$i$i;
  HEAP32[$_20$i$i>>2] = $17;
  $18 = ((($_20$i$i)) + 4|0);
  HEAP32[$18>>2] = (368);
  $19 = ((($_20$i$i)) + 8|0);
  HEAP32[$19>>2] = $4;
  $20 = ((($_20$i$i)) + 12|0);
  HEAP32[$20>>2] = (370);
  HEAP32[$_15$i$i>>2] = 3580;
  $21 = ((($_15$i$i)) + 4|0);
  HEAP32[$21>>2] = 2;
  $_8$sroa$0$0$$sroa_idx$i$i$i = ((($_15$i$i)) + 8|0);
  HEAP32[$_8$sroa$0$0$$sroa_idx$i$i$i>>2] = 3596;
  $_8$sroa$4$0$$sroa_idx2$i$i$i = ((($_15$i$i)) + 12|0);
  HEAP32[$_8$sroa$4$0$$sroa_idx2$i$i$i>>2] = 2;
  $22 = ((($_15$i$i)) + 16|0);
  HEAP32[$22>>2] = $_20$i$i;
  $23 = ((($_15$i$i)) + 20|0);
  HEAP32[$23>>2] = 2;
  $24 = (__ZN4core3fmt5write17he0deec3411c715a1E($writer$i$i,2144,$_15$i$i)|0);
  $_0$sroa$0$0$i$i = $24;
 }
 $_0$sroa$0$0$i = $_0$sroa$0$0$i$i;
 HEAP8[$$elt>>0] = $_0$sroa$0$0$i;
 $37 = HEAP32[$5>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[$5>>2] = $38;
 STACKTOP = sp;return ($0|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h28546fd507c84a95E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 511]($2,$1)|0);
 return ($7|0);
}
function __ZN4drop17h17e944006edb68e8E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h9969e5a45e783d02E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i$i = 0, $$cast$i$i$i$i$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $9 = 0, $_0$0$i15$i$i$i$i$i$i$i = 0, $_0$0$i22$i$i$i$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i$i = 0, $_0$sroa$0$0 = 0, $_3$sroa$0$0$i$i$i = 0, $_3$sroa$7$0$i$i$i = 0, $_3$sroa$7$1$i$i$i = 0, $_5$sroa$4$0$ph$i$i$i$i$i = 0, $_7$sroa$6$0$i = 0, $_7$sroa$6$1$i = 0, $not$$i$i = 0, $not$$i$i$i = 0, $not$$i$i44 = 0, $not$switch4$i = 0, $not$switch4$i41 = 0, $or$cond$i$i43 = 0, $phitmp$i$i$i$i$i$i$i = 0;
 var $phitmp31$i$i$i$i$i$i$i = 0, $phitmp32$i$i$i$i$i$i$i = 0, $s$sroa$0$062 = 0, $s$sroa$10$063 = 0, $split$0 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $_0$sroa$0$0 = 0;
  return ($_0$sroa$0$0|0);
 }
 $4 = ((($0)) + 4|0);
 $s$sroa$0$062 = $1;$s$sroa$10$063 = $2;
 L4: while(1) {
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   $7 = HEAP32[$0>>2]|0;
   $8 = ((($7)) + 24|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($7)) + 28|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_iiii[$13 & 511]($9,13612,4)|0);
   $not$switch4$i = ($14<<24>>24)==(0);
   if (!($not$switch4$i)) {
    $_0$sroa$0$0 = 1;
    label = 5;
    break;
   }
  }
  $15 = (($s$sroa$0$062) + ($s$sroa$10$063)|0);
  $16 = $s$sroa$0$062;
  $17 = $16;$_3$sroa$7$0$i$i$i = 0;$_7$sroa$6$0$i = 0;
  L9: while(1) {
   $$cast$i$i$i$i$i = $17;
   $18 = ($$cast$i$i$i$i$i|0)==($15|0);
   if ($18) {
    $78 = $17;$_3$sroa$0$0$i$i$i = 2;$_3$sroa$7$1$i$i$i = $_3$sroa$7$0$i$i$i;$_7$sroa$6$1$i = $_7$sroa$6$0$i;
   } else {
    $21 = ((($$cast$i$i$i$i$i)) + 1|0);
    $20 = HEAP8[$$cast$i$i$i$i$i>>0]|0;
    $22 = ($20<<24>>24)>(-1);
    $23 = $21;
    if ($22) {
     $19 = $20&255;
     $58 = $23;$_5$sroa$4$0$ph$i$i$i$i$i = $19;
    } else {
     $24 = $20 & 31;
     $25 = $24&255;
     $26 = ($21|0)==($15|0);
     if ($26) {
      $35 = $15;$79 = $23;$_0$0$i22$i$i$i$i$i$i$i = 0;
     } else {
      $27 = ((($$cast$i$i$i$i$i)) + 2|0);
      $28 = HEAP8[$21>>0]|0;
      $phitmp$i$i$i$i$i$i$i = $28 & 63;
      $29 = $27;
      $35 = $27;$79 = $29;$_0$0$i22$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i;
     }
     $30 = $25 << 6;
     $31 = $_0$0$i22$i$i$i$i$i$i$i&255;
     $32 = $31 | $30;
     $33 = ($20&255)>(223);
     if ($33) {
      $34 = ($35|0)==($15|0);
      if ($34) {
       $46 = $15;$80 = $79;$_0$0$i15$i$i$i$i$i$i$i = 0;
      } else {
       $36 = ((($35)) + 1|0);
       $37 = HEAP8[$35>>0]|0;
       $phitmp31$i$i$i$i$i$i$i = $37 & 63;
       $38 = $36;
       $46 = $36;$80 = $38;$_0$0$i15$i$i$i$i$i$i$i = $phitmp31$i$i$i$i$i$i$i;
      }
      $39 = $31 << 6;
      $40 = $_0$0$i15$i$i$i$i$i$i$i&255;
      $41 = $40 | $39;
      $42 = $25 << 12;
      $43 = $41 | $42;
      $44 = ($20&255)>(239);
      if ($44) {
       $45 = ($46|0)==($15|0);
       if ($45) {
        $81 = $80;$_0$0$i9$i$i$i$i$i$i$i = 0;
       } else {
        $47 = ((($46)) + 1|0);
        $48 = HEAP8[$46>>0]|0;
        $phitmp32$i$i$i$i$i$i$i = $48 & 63;
        $49 = $47;
        $81 = $49;$_0$0$i9$i$i$i$i$i$i$i = $phitmp32$i$i$i$i$i$i$i;
       }
       $50 = $25 << 18;
       $51 = $50 & 1835008;
       $52 = $41 << 6;
       $53 = $_0$0$i9$i$i$i$i$i$i$i&255;
       $54 = $52 | $51;
       $55 = $54 | $53;
       $58 = $81;$_5$sroa$4$0$ph$i$i$i$i$i = $55;
      } else {
       $58 = $80;$_5$sroa$4$0$ph$i$i$i$i$i = $43;
      }
     } else {
      $58 = $79;$_5$sroa$4$0$ph$i$i$i$i$i = $32;
     }
    }
    $56 = (($_7$sroa$6$0$i) - ($17))|0;
    $57 = (($56) + ($58))|0;
    $not$$i$i$i = ($_5$sroa$4$0$ph$i$i$i$i$i|0)!=(10);
    $$$i$i$i = $not$$i$i$i&1;
    $78 = $58;$_3$sroa$0$0$i$i$i = $$$i$i$i;$_3$sroa$7$1$i$i$i = $_7$sroa$6$0$i;$_7$sroa$6$1$i = $57;
   }
   $trunc$i$i$i = $_3$sroa$0$0$i$i$i&255;
   $trunc$i$i$i$clear = $trunc$i$i$i & 3;
   switch ($trunc$i$i$i$clear<<24>>24) {
   case 1:  {
    $17 = $78;$_3$sroa$7$0$i$i$i = $_3$sroa$7$1$i$i$i;$_7$sroa$6$0$i = $_7$sroa$6$1$i;
    break;
   }
   case 0:  {
    label = 23;
    break L9;
    break;
   }
   case 2:  {
    label = 22;
    break L9;
    break;
   }
   default: {
    label = 21;
    break L4;
   }
   }
  }
  if ((label|0) == 22) {
   label = 0;
   HEAP8[$4>>0] = 0;
   $split$0 = $s$sroa$10$063;
  }
  else if ((label|0) == 23) {
   label = 0;
   HEAP8[$4>>0] = 1;
   $59 = (($_3$sroa$7$1$i$i$i) + 1)|0;
   $split$0 = $59;
  }
  $60 = HEAP32[$0>>2]|0;
  $61 = ($split$0|0)==(0);
  $62 = ($s$sroa$10$063|0)==($split$0|0);
  $or$cond$i$i43 = $61 | $62;
  if (!($or$cond$i$i43)) {
   $not$$i$i44 = ($s$sroa$10$063>>>0)>($split$0>>>0);
   if (!($not$$i$i44)) {
    label = 27;
    break;
   }
   $63 = (($s$sroa$0$062) + ($split$0)|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = ($64<<24>>24)>(-65);
   if (!($65)) {
    label = 27;
    break;
   }
  }
  $66 = ((($60)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($60)) + 28|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (FUNCTION_TABLE_iiii[$71 & 511]($67,$s$sroa$0$062,$split$0)|0);
  $not$switch4$i41 = ($72<<24>>24)==(0);
  if (!($not$switch4$i41)) {
   $_0$sroa$0$0 = 1;
   label = 5;
   break;
  }
  if ($or$cond$i$i43) {
   $$pre$i = (($s$sroa$0$062) + ($split$0)|0);
   $$pre$phi$iZ2D = $$pre$i;
  } else {
   $not$$i$i = ($s$sroa$10$063>>>0)>($split$0>>>0);
   if (!($not$$i$i)) {
    label = 33;
    break;
   }
   $73 = (($s$sroa$0$062) + ($split$0)|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = ($74<<24>>24)>(-65);
   if ($75) {
    $$pre$phi$iZ2D = $73;
   } else {
    label = 33;
    break;
   }
  }
  $76 = (($s$sroa$10$063) - ($split$0))|0;
  $77 = ($76|0)==(0);
  if ($77) {
   $_0$sroa$0$0 = 0;
   label = 5;
   break;
  } else {
   $s$sroa$0$062 = $$pre$phi$iZ2D;$s$sroa$10$063 = $76;
  }
 }
 if ((label|0) == 5) {
  return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 21) {
  // unreachable;
 }
 else if ((label|0) == 27) {
  __ZN4core3str16slice_error_fail17h8c0c80047367e832E($s$sroa$0$062,$s$sroa$10$063,0,$split$0);
  // unreachable;
 }
 else if ((label|0) == 33) {
  __ZN4core3str16slice_error_fail17h8c0c80047367e832E($s$sroa$0$062,$s$sroa$10$063,$split$0,$s$sroa$10$063);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core3fmt5Write10write_char17h2d4a9fe3ac2c4589E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $_12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $_12 = sp + 8|0;
 HEAP32[$_12>>2] = 0;
 __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817h6e66fdcf584d84f0E_619($2,$1,$_12);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h9969e5a45e783d02E($0,$$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3fmt5Write9write_fmt17ha6de7e94cdeed88cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_10 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8 = sp + 24|0;
 $_10 = sp;
 HEAP32[$_8>>2] = $0;
 ;HEAP32[$_10>>2]=HEAP32[$1>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17he0deec3411c715a1E($_8,2168,$_10)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hda949738c35cc53dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h9969e5a45e783d02E($3,$1,$2)|0);
 return ($4|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17he2b84c48d81bac4dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i = 0, $len$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_12$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_12$i>>2] = 0;
 $3 = ($1>>>0)<(128);
 do {
  if ($3) {
   $4 = $1&255;
   HEAP8[$_12$i>>0] = $4;
   $len$0$i = 1;
  } else {
   $5 = ($1>>>0)<(2048);
   if ($5) {
    $6 = $1 >>> 6;
    $7 = $6 & 31;
    $8 = $7&255;
    $9 = $8 | -64;
    HEAP8[$_12$i>>0] = $9;
    $10 = $1 & 63;
    $11 = $10&255;
    $12 = ((($_12$i)) + 1|0);
    $13 = $11 | -128;
    HEAP8[$12>>0] = $13;
    $len$0$i = 2;
    break;
   }
   $14 = ($1>>>0)<(65536);
   if ($14) {
    $15 = $1 >>> 12;
    $16 = $15 & 15;
    $17 = $16&255;
    $18 = $17 | -32;
    HEAP8[$_12$i>>0] = $18;
    $19 = $1 >>> 6;
    $20 = $19 & 63;
    $21 = $20&255;
    $22 = ((($_12$i)) + 1|0);
    $23 = $21 | -128;
    HEAP8[$22>>0] = $23;
    $24 = $1 & 63;
    $25 = $24&255;
    $26 = ((($_12$i)) + 2|0);
    $27 = $25 | -128;
    HEAP8[$26>>0] = $27;
    $len$0$i = 3;
    break;
   } else {
    $28 = $1 >>> 18;
    $29 = $28 & 7;
    $30 = $29&255;
    $31 = $30 | -16;
    HEAP8[$_12$i>>0] = $31;
    $32 = $1 >>> 12;
    $33 = $32 & 63;
    $34 = $33&255;
    $35 = ((($_12$i)) + 1|0);
    $36 = $34 | -128;
    HEAP8[$35>>0] = $36;
    $37 = $1 >>> 6;
    $38 = $37 & 63;
    $39 = $38&255;
    $40 = ((($_12$i)) + 2|0);
    $41 = $39 | -128;
    HEAP8[$40>>0] = $41;
    $42 = $1 & 63;
    $43 = $42&255;
    $44 = ((($_12$i)) + 3|0);
    $45 = $43 | -128;
    HEAP8[$44>>0] = $45;
    $len$0$i = 4;
    break;
   }
  }
 } while(0);
 $46 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h9969e5a45e783d02E($2,$_12$i,$len$0$i)|0);
 STACKTOP = sp;return ($46|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hc5c47a29e3a8a380E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i = sp + 24|0;
 $_10$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17he0deec3411c715a1E($_8$i,2168,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817h6e66fdcf584d84f0E_619($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $len$0 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(128);
 do {
  if ($2) {
   $3 = $0&255;
   HEAP8[$1>>0] = $3;
   $len$0 = 1;
  } else {
   $4 = ($0>>>0)<(2048);
   if ($4) {
    $5 = $0 >>> 6;
    $6 = $5 & 31;
    $7 = $6&255;
    $8 = $7 | -64;
    HEAP8[$1>>0] = $8;
    $9 = $0 & 63;
    $10 = $9&255;
    $11 = ((($1)) + 1|0);
    $12 = $10 | -128;
    HEAP8[$11>>0] = $12;
    $len$0 = 2;
    break;
   }
   $13 = ($0>>>0)<(65536);
   if ($13) {
    $14 = $0 >>> 12;
    $15 = $14 & 15;
    $16 = $15&255;
    $17 = $16 | -32;
    HEAP8[$1>>0] = $17;
    $18 = $0 >>> 6;
    $19 = $18 & 63;
    $20 = $19&255;
    $21 = ((($1)) + 1|0);
    $22 = $20 | -128;
    HEAP8[$21>>0] = $22;
    $23 = $0 & 63;
    $24 = $23&255;
    $25 = ((($1)) + 2|0);
    $26 = $24 | -128;
    HEAP8[$25>>0] = $26;
    $len$0 = 3;
    break;
   } else {
    $27 = $0 >>> 18;
    $28 = $27 & 7;
    $29 = $28&255;
    $30 = $29 | -16;
    HEAP8[$1>>0] = $30;
    $31 = $0 >>> 12;
    $32 = $31 & 63;
    $33 = $32&255;
    $34 = ((($1)) + 1|0);
    $35 = $33 | -128;
    HEAP8[$34>>0] = $35;
    $36 = $0 >>> 6;
    $37 = $36 & 63;
    $38 = $37&255;
    $39 = ((($1)) + 2|0);
    $40 = $38 | -128;
    HEAP8[$39>>0] = $40;
    $41 = $0 & 63;
    $42 = $41&255;
    $43 = ((($1)) + 3|0);
    $44 = $42 | -128;
    HEAP8[$43>>0] = $44;
    $len$0 = 4;
    break;
   }
  }
 } while(0);
 HEAP32[$retVal>>2] = $1;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $len$0;
 return;
}
function __ZN60__LT_core__cell__BorrowError_u20_as_u20_core__fmt__Debug_GT_3fmt17h8b8daee27e6d3129E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 511]($3,13616,11)|0);
 return ($8|0);
}
function __ZN63__LT_core__cell__BorrowMutError_u20_as_u20_core__fmt__Debug_GT_3fmt17hbe85a4caa29b8a8eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 511]($3,13627,14)|0);
 return ($8|0);
}
function __ZN4core6option13expect_failed17he4838b1eef3c5645E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_3 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_8 = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $msg = sp + 32|0;
 $_3 = sp + 8|0;
 $_8 = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = $msg;
 HEAP32[$_8>>2] = $3;
 $4 = ((($_8)) + 4|0);
 HEAP32[$4>>2] = (368);
 HEAP32[$_3>>2] = 3692;
 $5 = ((($_3)) + 4|0);
 HEAP32[$5>>2] = 1;
 $_6$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $6 = ((($_3)) + 16|0);
 HEAP32[$6>>2] = $_8;
 $7 = ((($_3)) + 20|0);
 HEAP32[$7>>2] = 1;
 __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_3,3412);
 // unreachable;
}
function __ZN4core3str9Utf8Error11valid_up_to17h59af9f9ea6a17b0bE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN4core3str9from_utf817he0e1c9036739d488E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$off$i = 0, $$off114$i = 0, $$off116$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond12$i = 0, $cond13$i = 0, $cond14$i = 0, $cond15$i = 0;
 var $cond19$i = 0, $cond7$i = 0, $offset$0$be$i = 0, $offset$0131$i = 0, $offset$1$i = 0, $offset$2126$i = 0, $offset$3$ph$i = 0, $offset$3128$i = 0, $or$cond$i = 0, $or$cond100$i = 0, $or$cond103$i = 0, $or$cond104$i = 0, $or$cond106$i = 0, $or$cond107$i = 0, $or$cond108$i = 0, $or$cond109$i = 0, $or$cond110$i = 0, $or$cond111$i = 0, $or$cond112$i = 0, $or$cond113$i = 0;
 var $or$cond89$i = 0, $or$cond91$i = 0, $or$cond92$i = 0, $or$cond93$i = 0, $or$cond94$i = 0, $or$cond95$i = 0, $or$cond96$i = 0, $or$cond98$i = 0, $or$cond99$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if (!($3)) {
   $4 = $1;
   $5 = ($2>>>0)<(8);
   $6 = (($2) + -8)|0;
   $offset$0131$i = 0;
   L3: while(1) {
    $7 = (($1) + ($offset$0131$i)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)<(0);
    L5: do {
     if ($9) {
      $13 = (($offset$0131$i) + 1)|0;
      $14 = ($13>>>0)<($2>>>0);
      if (!($14)) {
       break L3;
      }
      $15 = $8&255;
      $16 = (12740 + ($15)|0);
      $17 = HEAP8[$16>>0]|0;
      $18 = (($1) + ($13)|0);
      $19 = HEAP8[$18>>0]|0;
      switch ($17<<24>>24) {
      case 2:  {
       $20 = $19 & -64;
       $21 = ($20<<24>>24)==(-128);
       if ($21) {
        $offset$1$i = $13;
       } else {
        break L3;
       }
       break;
      }
      case 3:  {
       $22 = (($offset$0131$i) + 2)|0;
       $23 = ($22>>>0)<($2>>>0);
       if (!($23)) {
        break L3;
       }
       $27 = (($1) + ($22)|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28 & -64;
       $cond14$i = ($8<<24>>24)==(-32);
       $30 = ($19&255)<(192);
       $31 = $19 & -32;
       $32 = ($31<<24>>24)==(-96);
       $33 = $cond14$i & $32;
       $cond19$i = ($29<<24>>24)==(-128);
       $or$cond89$i = $33 & $cond19$i;
       if ($or$cond89$i) {
        $offset$1$i = $22;
       } else {
        $$off116$i = (($8) + 31)<<24>>24;
        $34 = ($$off116$i&255)<(12);
        $35 = ($19<<24>>24)<(0);
        $or$cond91$i = $34 & $35;
        $or$cond92$i = $30 & $or$cond91$i;
        $or$cond93$i = $or$cond92$i & $cond19$i;
        if ($or$cond93$i) {
         $offset$1$i = $22;
        } else {
         $cond15$i = ($8<<24>>24)==(-19);
         $or$cond94$i = $cond15$i & $35;
         $36 = ($19&255)<(160);
         $or$cond95$i = $36 & $or$cond94$i;
         $or$cond96$i = $or$cond95$i & $cond19$i;
         if ($or$cond96$i) {
          $offset$1$i = $22;
         } else {
          $37 = $8 & -2;
          $38 = ($37<<24>>24)==(-18);
          $or$cond98$i = $38 & $35;
          $or$cond99$i = $30 & $or$cond98$i;
          $or$cond100$i = $or$cond99$i & $cond19$i;
          if ($or$cond100$i) {
           $offset$1$i = $22;
          } else {
           break L3;
          }
         }
        }
       }
       break;
      }
      case 4:  {
       $24 = (($offset$0131$i) + 2)|0;
       $25 = ($24>>>0)<($2>>>0);
       if (!($25)) {
        break L3;
       }
       $39 = (($offset$0131$i) + 3)|0;
       $40 = ($39>>>0)<($2>>>0);
       if (!($40)) {
        break L3;
       }
       $41 = (($1) + ($24)|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = $42 & -64;
       $44 = (($1) + ($39)|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45 & -64;
       $cond$i = ($8<<24>>24)==(-16);
       $$off$i = (($19) + 112)<<24>>24;
       $47 = ($$off$i&255)<(48);
       $48 = $cond$i & $47;
       $cond12$i = ($43<<24>>24)==(-128);
       $or$cond103$i = $48 & $cond12$i;
       $cond13$i = ($46<<24>>24)==(-128);
       $or$cond104$i = $or$cond103$i & $cond13$i;
       if ($or$cond104$i) {
        $offset$1$i = $39;
       } else {
        $49 = ($19&255)<(192);
        $$off114$i = (($8) + 15)<<24>>24;
        $50 = ($$off114$i&255)<(3);
        $51 = ($19<<24>>24)<(0);
        $or$cond106$i = $50 & $51;
        $or$cond107$i = $49 & $or$cond106$i;
        $or$cond108$i = $or$cond107$i & $cond12$i;
        $or$cond109$i = $or$cond108$i & $cond13$i;
        if ($or$cond109$i) {
         $offset$1$i = $39;
        } else {
         $cond7$i = ($8<<24>>24)==(-12);
         $or$cond110$i = $cond7$i & $51;
         $52 = ($19&255)<(144);
         $or$cond111$i = $52 & $or$cond110$i;
         $or$cond112$i = $or$cond111$i & $cond12$i;
         $or$cond113$i = $or$cond112$i & $cond13$i;
         if ($or$cond113$i) {
          $offset$1$i = $39;
         } else {
          break L3;
         }
        }
       }
       break;
      }
      default: {
       break L3;
      }
      }
      $26 = (($offset$1$i) + 1)|0;
      $offset$0$be$i = $26;
     } else {
      $10 = (($offset$0131$i) + ($4))|0;
      $11 = $10 & 3;
      $12 = ($11|0)==(0);
      if (!($12)) {
       $54 = (($offset$0131$i) + 1)|0;
       $offset$0$be$i = $54;
       break;
      }
      $53 = ($offset$0131$i>>>0)>($6>>>0);
      $or$cond$i = $5 | $53;
      L25: do {
       if ($or$cond$i) {
        $offset$3$ph$i = $offset$0131$i;
       } else {
        $offset$2126$i = $offset$0131$i;
        while(1) {
         $56 = (($1) + ($offset$2126$i)|0);
         $57 = HEAP32[$56>>2]|0;
         $58 = (($offset$2126$i) + 4)|0;
         $59 = (($1) + ($58)|0);
         $60 = HEAP32[$59>>2]|0;
         $61 = $60 | $57;
         $62 = $61 & -2139062144;
         $63 = ($62|0)==(0);
         if (!($63)) {
          $offset$3$ph$i = $offset$2126$i;
          break L25;
         }
         $65 = (($offset$2126$i) + 8)|0;
         $66 = ($65>>>0)>($6>>>0);
         if ($66) {
          $offset$3$ph$i = $65;
          break;
         } else {
          $offset$2126$i = $65;
         }
        }
       }
      } while(0);
      $64 = ($offset$3$ph$i>>>0)<($2>>>0);
      if ($64) {
       $offset$3128$i = $offset$3$ph$i;
       while(1) {
        $67 = (($1) + ($offset$3128$i)|0);
        $68 = HEAP8[$67>>0]|0;
        $69 = ($68<<24>>24)>(-1);
        if (!($69)) {
         $offset$0$be$i = $offset$3128$i;
         break L5;
        }
        $70 = (($offset$3128$i) + 1)|0;
        $71 = ($70>>>0)<($2>>>0);
        if ($71) {
         $offset$3128$i = $70;
        } else {
         $offset$0$be$i = $70;
         break;
        }
       }
      } else {
       $offset$0$be$i = $offset$3$ph$i;
      }
     }
    } while(0);
    $55 = ($offset$0$be$i>>>0)<($2>>>0);
    if ($55) {
     $offset$0131$i = $offset$0$be$i;
    } else {
     break L1;
    }
   }
   HEAP32[$0>>2] = 1;
   $74 = ((($0)) + 4|0);
   HEAP32[$74>>2] = $offset$0131$i;
   return;
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $72 = ((($0)) + 4|0);
 HEAP32[$72>>2] = $1;
 $73 = ((($0)) + 8|0);
 HEAP32[$73>>2] = $2;
 return;
}
function __ZN4core3fmt8builders11DebugStruct5field17hb6095a6ccb348274E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$$i$i = 0, $$25$i$i = 0, $$elt = 0, $$pre = 0, $$pre$phiZ2D = 0, $$unpack = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0$sroa$0$0$i = 0, $_0$sroa$0$0$i$i = 0, $_12$i$i = 0, $_17$i$i = 0, $_36$sroa$4$0$$sroa_idx15$i$i = 0, $_36$sroa$5$0$$sroa_idx17$i$i = 0, $_36$sroa$620$0$$sroa_idx22$i$i = 0, $_36$sroa$7$0$$sroa_idx24$i$i = 0, $_41$i$i = 0, $_7$i$i$i = 0, $_8$sroa$0$0$$sroa_idx$i$i$i = 0, $_8$sroa$4$0$$sroa_idx2$i$i$i = 0, $name = 0, $prefix$i$i = 0, $switch3$i = 0, $value = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_7$i$i$i = sp + 104|0;
 $prefix$i$i = sp + 96|0;
 $writer$i$i = sp + 88|0;
 $_12$i$i = sp + 64|0;
 $_17$i$i = sp + 40|0;
 $_41$i$i = sp + 16|0;
 $name = sp + 8|0;
 $value = sp;
 HEAP32[$name>>2] = $1;
 $5 = ((($name)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$value>>2] = $3;
 $6 = ((($value)) + 4|0);
 HEAP32[$6>>2] = $4;
 $$elt = ((($0)) + 4|0);
 $$unpack = HEAP8[$$elt>>0]|0;
 $7 = $name;
 $8 = $value;
 $switch3$i = ($$unpack<<24>>24)==(0);
 if (!($switch3$i)) {
  $$pre = ((($0)) + 5|0);
  $$pre$phiZ2D = $$pre;$_0$sroa$0$0$i = 1;
  HEAP8[$$elt>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return ($0|0);
 }
 $9 = ((($0)) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 $$$i$i = $11 ? 13641 : 8369;
 $$25$i$i = $11 ? 2 : 1;
 HEAP32[$prefix$i$i>>2] = $$$i$i;
 $12 = ((($prefix$i$i)) + 4|0);
 HEAP32[$12>>2] = $$25$i$i;
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 4;
 $16 = ($15|0)==(0);
 if ($16) {
  $29 = $prefix$i$i;
  HEAP32[$_41$i$i>>2] = $29;
  $30 = ((($_41$i$i)) + 4|0);
  HEAP32[$30>>2] = (368);
  $31 = ((($_41$i$i)) + 8|0);
  HEAP32[$31>>2] = $7;
  $32 = ((($_41$i$i)) + 12|0);
  HEAP32[$32>>2] = (368);
  $33 = ((($_41$i$i)) + 16|0);
  HEAP32[$33>>2] = $8;
  $34 = ((($_41$i$i)) + 20|0);
  HEAP32[$34>>2] = (370);
  $35 = ((($13)) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($13)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$_7$i$i$i>>2] = 3832;
  $_36$sroa$4$0$$sroa_idx15$i$i = ((($_7$i$i$i)) + 4|0);
  HEAP32[$_36$sroa$4$0$$sroa_idx15$i$i>>2] = 3;
  $_36$sroa$5$0$$sroa_idx17$i$i = ((($_7$i$i$i)) + 8|0);
  HEAP32[$_36$sroa$5$0$$sroa_idx17$i$i>>2] = 0;
  $_36$sroa$620$0$$sroa_idx22$i$i = ((($_7$i$i$i)) + 16|0);
  HEAP32[$_36$sroa$620$0$$sroa_idx22$i$i>>2] = $_41$i$i;
  $_36$sroa$7$0$$sroa_idx24$i$i = ((($_7$i$i$i)) + 20|0);
  HEAP32[$_36$sroa$7$0$$sroa_idx24$i$i>>2] = 3;
  $39 = (__ZN4core3fmt5write17he0deec3411c715a1E($36,$38,$_7$i$i$i)|0);
  $_0$sroa$0$0$i$i = $39;
 } else {
  $17 = $13;
  HEAP32[$writer$i$i>>2] = $17;
  $18 = ((($writer$i$i)) + 4|0);
  HEAP8[$18>>0] = 0;
  $19 = $prefix$i$i;
  HEAP32[$_17$i$i>>2] = $19;
  $20 = ((($_17$i$i)) + 4|0);
  HEAP32[$20>>2] = (368);
  $21 = ((($_17$i$i)) + 8|0);
  HEAP32[$21>>2] = $7;
  $22 = ((($_17$i$i)) + 12|0);
  HEAP32[$22>>2] = (368);
  $23 = ((($_17$i$i)) + 16|0);
  HEAP32[$23>>2] = $8;
  $24 = ((($_17$i$i)) + 20|0);
  HEAP32[$24>>2] = (370);
  HEAP32[$_12$i$i>>2] = 3700;
  $25 = ((($_12$i$i)) + 4|0);
  HEAP32[$25>>2] = 3;
  $_8$sroa$0$0$$sroa_idx$i$i$i = ((($_12$i$i)) + 8|0);
  HEAP32[$_8$sroa$0$0$$sroa_idx$i$i$i>>2] = 3724;
  $_8$sroa$4$0$$sroa_idx2$i$i$i = ((($_12$i$i)) + 12|0);
  HEAP32[$_8$sroa$4$0$$sroa_idx2$i$i$i>>2] = 3;
  $26 = ((($_12$i$i)) + 16|0);
  HEAP32[$26>>2] = $_17$i$i;
  $27 = ((($_12$i$i)) + 20|0);
  HEAP32[$27>>2] = 3;
  $28 = (__ZN4core3fmt5write17he0deec3411c715a1E($writer$i$i,2144,$_12$i$i)|0);
  $_0$sroa$0$0$i$i = $28;
 }
 $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $_0$sroa$0$0$i$i;
 HEAP8[$$elt>>0] = $_0$sroa$0$0$i;
 HEAP8[$$pre$phiZ2D>>0] = 1;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3fmt8builders15debug_tuple_new17hf289acaae08eb593E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$repack = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iiii[$9 & 511]($5,$2,$3)|0);
 $11 = ($3|0)==(0);
 HEAP32[$0>>2] = $1;
 $$repack = ((($0)) + 8|0);
 HEAP8[$$repack>>0] = $10;
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 9|0);
 $14 = $11&1;
 HEAP8[$13>>0] = $14;
 return;
}
function __ZN4core3fmt8builders10DebugTuple6finish17hfc15bc664174c0e7E($0) {
 $0 = $0|0;
 var $$elt$phi$trans$insert = 0, $$pre = 0, $$unpack = 0, $$unpack$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0;
 var $not$switch4$i$i$i = 0, $not$switch4$i19$i$i = 0, $switch4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $$elt$phi$trans$insert = ((($0)) + 8|0);
 $$unpack$pre = HEAP8[$$elt$phi$trans$insert>>0]|0;
 if ($3) {
  $$unpack = $$unpack$pre;
  return ($$unpack|0);
 }
 $switch4$i = ($$unpack$pre<<24>>24)==(0);
 do {
  if ($switch4$i) {
   $4 = HEAP32[$0>>2]|0;
   $5 = HEAP32[$4>>2]|0;
   $6 = $5 & 4;
   $7 = ($6|0)==(0);
   if ($7) {
    $16 = $2;
   } else {
    $8 = ((($4)) + 24|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($4)) + 28|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($11)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 511]($9,13609,1)|0);
    $not$switch4$i$i$i = ($14<<24>>24)==(0);
    if (!($not$switch4$i$i$i)) {
     $_0$sroa$0$0$i = 1;
     break;
    }
    $$pre = HEAP32[$1>>2]|0;
    $16 = $$pre;
   }
   $15 = ($16|0)==(1);
   if ($15) {
    $17 = ((($0)) + 9|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if (!($19)) {
     $20 = HEAP32[$0>>2]|0;
     $21 = ((($20)) + 24|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($20)) + 28|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($24)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (FUNCTION_TABLE_iiii[$26 & 511]($22,8369,1)|0);
     $not$switch4$i19$i$i = ($27<<24>>24)==(0);
     if (!($not$switch4$i19$i$i)) {
      $_0$sroa$0$0$i = 1;
      break;
     }
    }
   }
   $28 = HEAP32[$0>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_iiii[$34 & 511]($30,13610,1)|0);
   $_0$sroa$0$0$i = $35;
  } else {
   $_0$sroa$0$0$i = 1;
  }
 } while(0);
 HEAP8[$$elt$phi$trans$insert>>0] = $_0$sroa$0$0$i;
 $$unpack = $_0$sroa$0$0$i;
 return ($$unpack|0);
}
function __ZN4core3fmt8builders10DebugInner5entry17hd21ce782c272b8f8E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i = 0, $$25$i$i = 0, $$26$i$i = 0, $$elt = 0, $$pre = 0, $$pre$phiZ2D = 0, $$unpack = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0;
 var $_12$i$i = 0, $_17$i$i = 0, $_33$sroa$4$0$$sroa_idx12$i$i = 0, $_33$sroa$5$0$$sroa_idx14$i$i = 0, $_33$sroa$617$0$$sroa_idx19$i$i = 0, $_33$sroa$7$0$$sroa_idx21$i$i = 0, $_38$i$i = 0, $_7$i$i$i = 0, $_8$sroa$0$0$$sroa_idx$i$i$i = 0, $_8$sroa$4$0$$sroa_idx2$i$i$i = 0, $entry = 0, $prefix$i$i = 0, $prefix1$i$i = 0, $switch3$i = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_7$i$i$i = sp + 88|0;
 $writer$i$i = sp + 80|0;
 $prefix$i$i = sp + 72|0;
 $_12$i$i = sp + 48|0;
 $_17$i$i = sp + 32|0;
 $prefix1$i$i = sp + 24|0;
 $_38$i$i = sp + 8|0;
 $entry = sp;
 HEAP32[$entry>>2] = $1;
 $3 = ((($entry)) + 4|0);
 HEAP32[$3>>2] = $2;
 $$elt = ((($0)) + 4|0);
 $$unpack = HEAP8[$$elt>>0]|0;
 $4 = $entry;
 $switch3$i = ($$unpack<<24>>24)==(0);
 if (!($switch3$i)) {
  $$pre = ((($0)) + 5|0);
  $$pre$phiZ2D = $$pre;$_0$sroa$0$0$i = 1;
  HEAP8[$$elt>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4;
 $8 = ($7|0)==(0);
 $9 = ((($0)) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 if ($8) {
  $24 = ($10<<24>>24)==(0);
  $$25$i$i = $24 ? 16608 : 13647;
  $$26$i$i = $24 ? 0 : 2;
  HEAP32[$prefix1$i$i>>2] = $$25$i$i;
  $25 = ((($prefix1$i$i)) + 4|0);
  HEAP32[$25>>2] = $$26$i$i;
  $26 = $prefix1$i$i;
  HEAP32[$_38$i$i>>2] = $26;
  $27 = ((($_38$i$i)) + 4|0);
  HEAP32[$27>>2] = (368);
  $28 = ((($_38$i$i)) + 8|0);
  HEAP32[$28>>2] = $4;
  $29 = ((($_38$i$i)) + 12|0);
  HEAP32[$29>>2] = (370);
  $30 = ((($5)) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($5)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$_7$i$i$i>>2] = 3856;
  $_33$sroa$4$0$$sroa_idx12$i$i = ((($_7$i$i$i)) + 4|0);
  HEAP32[$_33$sroa$4$0$$sroa_idx12$i$i>>2] = 2;
  $_33$sroa$5$0$$sroa_idx14$i$i = ((($_7$i$i$i)) + 8|0);
  HEAP32[$_33$sroa$5$0$$sroa_idx14$i$i>>2] = 0;
  $_33$sroa$617$0$$sroa_idx19$i$i = ((($_7$i$i$i)) + 16|0);
  HEAP32[$_33$sroa$617$0$$sroa_idx19$i$i>>2] = $_38$i$i;
  $_33$sroa$7$0$$sroa_idx21$i$i = ((($_7$i$i$i)) + 20|0);
  HEAP32[$_33$sroa$7$0$$sroa_idx21$i$i>>2] = 2;
  $34 = (__ZN4core3fmt5write17he0deec3411c715a1E($31,$33,$_7$i$i$i)|0);
  $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $34;
  HEAP8[$$elt>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $11 = $5;
  HEAP32[$writer$i$i>>2] = $11;
  $12 = ((($writer$i$i)) + 4|0);
  HEAP8[$12>>0] = 0;
  $13 = ($10<<24>>24)==(0);
  $$$i$i = $13 ? 16608 : 8369;
  $14 = $10&255;
  HEAP32[$prefix$i$i>>2] = $$$i$i;
  $15 = ((($prefix$i$i)) + 4|0);
  HEAP32[$15>>2] = $14;
  $16 = $prefix$i$i;
  HEAP32[$_17$i$i>>2] = $16;
  $17 = ((($_17$i$i)) + 4|0);
  HEAP32[$17>>2] = (368);
  $18 = ((($_17$i$i)) + 8|0);
  HEAP32[$18>>2] = $4;
  $19 = ((($_17$i$i)) + 12|0);
  HEAP32[$19>>2] = (370);
  HEAP32[$_12$i$i>>2] = 3580;
  $20 = ((($_12$i$i)) + 4|0);
  HEAP32[$20>>2] = 2;
  $_8$sroa$0$0$$sroa_idx$i$i$i = ((($_12$i$i)) + 8|0);
  HEAP32[$_8$sroa$0$0$$sroa_idx$i$i$i>>2] = 3596;
  $_8$sroa$4$0$$sroa_idx2$i$i$i = ((($_12$i$i)) + 12|0);
  HEAP32[$_8$sroa$4$0$$sroa_idx2$i$i$i>>2] = 2;
  $21 = ((($_12$i$i)) + 16|0);
  HEAP32[$21>>2] = $_17$i$i;
  $22 = ((($_12$i$i)) + 20|0);
  HEAP32[$22>>2] = 2;
  $23 = (__ZN4core3fmt5write17he0deec3411c715a1E($writer$i$i,2144,$_12$i$i)|0);
  $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $23;
  HEAP8[$$elt>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 }
}
function __ZN4core3fmt8builders14debug_list_new17hfb5edf4ccfed274fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_11$sroa$4$0$$sroa_idx = 0, $_11$sroa$5$0$$sroa_idx = 0, $_5$sroa$4$0$$sroa_idx11 = 0, $_5$sroa$5$0$$sroa_idx13 = 0, $_5$sroa$616$0$$sroa_idx18 = 0, $_5$sroa$7$0$$sroa_idx20 = 0, $_7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7$i = sp;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$_7$i>>2] = 3872;
 $_5$sroa$4$0$$sroa_idx11 = ((($_7$i)) + 4|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx11>>2] = 1;
 $_5$sroa$5$0$$sroa_idx13 = ((($_7$i)) + 8|0);
 HEAP32[$_5$sroa$5$0$$sroa_idx13>>2] = 0;
 $_5$sroa$616$0$$sroa_idx18 = ((($_7$i)) + 16|0);
 HEAP32[$_5$sroa$616$0$$sroa_idx18>>2] = 16064;
 $_5$sroa$7$0$$sroa_idx20 = ((($_7$i)) + 20|0);
 HEAP32[$_5$sroa$7$0$$sroa_idx20>>2] = 0;
 $6 = (__ZN4core3fmt5write17he0deec3411c715a1E($3,$5,$_7$i)|0);
 HEAP32[$0>>2] = $1;
 $_11$sroa$4$0$$sroa_idx = ((($0)) + 4|0);
 HEAP8[$_11$sroa$4$0$$sroa_idx>>0] = $6;
 $_11$sroa$5$0$$sroa_idx = ((($0)) + 5|0);
 HEAP8[$_11$sroa$5$0$$sroa_idx>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN4core3fmt8builders9DebugList5entry17h6afdc9252b3c4f64E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3fmt8builders10DebugInner5entry17hd21ce782c272b8f8E($0,$1,$2);
 return ($0|0);
}
function __ZN4core3fmt8builders9DebugList6finish17had71afb3be90762eE($0) {
 $0 = $0|0;
 var $$elt$i = 0, $$unpack$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $prefix$sroa$0$0$i = 0, $prefix$sroa$5$0$i = 0, $switch3$i$i = 0, $switch4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if ($4) {
  label = 3;
 } else {
  $5 = ((($0)) + 5|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   label = 3;
  } else {
   $prefix$sroa$0$0$i = 13609;$prefix$sroa$5$0$i = 1;
  }
 }
 if ((label|0) == 3) {
  $prefix$sroa$0$0$i = 16608;$prefix$sroa$5$0$i = 0;
 }
 $$elt$i = ((($0)) + 4|0);
 $$unpack$i = HEAP8[$$elt$i>>0]|0;
 $switch3$i$i = ($$unpack$i<<24>>24)==(0);
 if (!($switch3$i$i)) {
  HEAP8[$$elt$i>>0] = 1;
  $_0$sroa$0$0$i = 1;
  return ($_0$sroa$0$0$i|0);
 }
 $8 = ((($1)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$13 & 511]($9,$prefix$sroa$0$0$i,$prefix$sroa$5$0$i)|0);
 HEAP8[$$elt$i>>0] = $14;
 $switch4$i = ($14<<24>>24)==(0);
 if (!($switch4$i)) {
  $_0$sroa$0$0$i = 1;
  return ($_0$sroa$0$0$i|0);
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($15)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_iiii[$21 & 511]($17,8399,1)|0);
 $_0$sroa$0$0$i = $22;
 return ($_0$sroa$0$0$i|0);
}
function __ZN4core3fmt10ArgumentV110from_usize17h347264f94481e409E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 369;
 return;
}
function __ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17hbbafb0c65faa4cd4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7 = sp;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[$_7>>2]=HEAP32[$0>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_7+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_7+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_7+20>>2]=HEAP32[$0+20>>2]|0;
 $6 = (__ZN4core3fmt5write17he0deec3411c715a1E($3,$5,$_7)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3fmt9Formatter9write_fmt17h0f0e81f3f99c1f62E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7 = sp;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[$_7>>2]=HEAP32[$1>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_7+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_7+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_7+20>>2]=HEAP32[$1+20>>2]|0;
 $6 = (__ZN4core3fmt5write17he0deec3411c715a1E($3,$5,$_7)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3fmt9Formatter9alternate17h9afd1eceb525c669E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)!=(0);
 return ($3|0);
}
function __ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h51cb268862c67feeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$i50 = 0, $$cast$i = 0, $$cast$i223 = 0, $$cast$i223234 = 0, $$cast$i226 = 0, $$iter2$sroa$11$0 = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$sink$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $_0$0$i = 0, $_0$0$i15$i$i$i = 0, $_0$0$i22$i$i$i = 0, $_0$0$i9$i$i$i = 0, $_0$sroa$0$0 = 0, $_4$0$i$i$i$i$i = 0, $_5$sroa$4$0$ph$i = 0, $_53$sroa$14$2$ph = 0, $from$0$ph$lcssa222 = 0, $from$0$ph$lcssa222276 = 0, $from$0$ph$lcssa222277 = 0, $from$0$ph232 = 0, $init_state$sroa$0$0$i = 0, $init_state$sroa$15$0$i$off0 = 0, $init_state$sroa$9$0$i = 0, $iter$sroa$0$0$ph230 = 0, $iter$sroa$0$0224 = 0, $iter$sroa$6$0$ph231 = 0;
 var $iter$sroa$6$0225 = 0, $iter$sroa$6$1 = 0, $iter$sroa$6$2 = 0, $iter$sroa$6$3 = 0, $iter$sroa$6$4 = 0, $iter2$sroa$0$0 = 0, $iter2$sroa$0$1$ph = 0, $iter2$sroa$11$2$ph = 0, $iter2$sroa$9$0 = 0, $iter2$sroa$9$2$ph = 0, $not$$i$i = 0, $not$$i$i67 = 0, $not$$i8$i = 0, $not$switch4$i = 0, $not$switch4$i48 = 0, $not$switch4$i53 = 0, $not$switch4$i64 = 0, $or$cond$i$i = 0, $or$cond$i$i66 = 0, $or$cond$i7$i = 0;
 var $phitmp$i$i$i = 0, $phitmp31$i$i$i = 0, $phitmp32$i$i$i = 0, $trunc$i = 0, $trunc$i$clear = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$i$i = 0, $trunc$i$i$i$i$clear = 0, $trunc$i$i$i$i$i = 0, $trunc$i$i$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 511]($4,34)|0);
 $not$switch4$i = ($9<<24>>24)==(0);
 if (!($not$switch4$i)) {
  $_0$sroa$0$0 = 1;
  return ($_0$sroa$0$0|0);
 }
 $10 = (($0) + ($1)|0);
 $11 = ($1|0)==(0);
 do {
  if ($11) {
   $from$0$ph$lcssa222277 = 0;
   label = 17;
  } else {
   $12 = $0;
   $$cast$i223234 = $0;$from$0$ph232 = 0;$iter$sroa$0$0$ph230 = 0;$iter$sroa$6$0$ph231 = $12;
   L6: while(1) {
    $$cast$i226 = $$cast$i223234;$iter$sroa$0$0224 = $iter$sroa$0$0$ph230;$iter$sroa$6$0225 = $iter$sroa$6$0$ph231;
    L8: while(1) {
     $15 = ((($$cast$i226)) + 1|0);
     $16 = $15;
     $14 = HEAP8[$$cast$i226>>0]|0;
     $17 = ($14<<24>>24)>(-1);
     if ($17) {
      $13 = $14&255;
      $_5$sroa$4$0$ph$i = $13;$iter$sroa$6$4 = $16;
     } else {
      $18 = $14 & 31;
      $19 = $18&255;
      $20 = ($15|0)==($10|0);
      if ($20) {
       $29 = $10;$_0$0$i22$i$i$i = 0;$iter$sroa$6$1 = $16;
      } else {
       $21 = ((($$cast$i226)) + 2|0);
       $22 = $21;
       $23 = HEAP8[$15>>0]|0;
       $phitmp$i$i$i = $23 & 63;
       $29 = $21;$_0$0$i22$i$i$i = $phitmp$i$i$i;$iter$sroa$6$1 = $22;
      }
      $24 = $19 << 6;
      $25 = $_0$0$i22$i$i$i&255;
      $26 = $25 | $24;
      $27 = ($14&255)>(223);
      if ($27) {
       $28 = ($29|0)==($10|0);
       if ($28) {
        $40 = $10;$_0$0$i15$i$i$i = 0;$iter$sroa$6$2 = $iter$sroa$6$1;
       } else {
        $30 = ((($29)) + 1|0);
        $31 = $30;
        $32 = HEAP8[$29>>0]|0;
        $phitmp31$i$i$i = $32 & 63;
        $40 = $30;$_0$0$i15$i$i$i = $phitmp31$i$i$i;$iter$sroa$6$2 = $31;
       }
       $33 = $25 << 6;
       $34 = $_0$0$i15$i$i$i&255;
       $35 = $34 | $33;
       $36 = $19 << 12;
       $37 = $35 | $36;
       $38 = ($14&255)>(239);
       if ($38) {
        $39 = ($40|0)==($10|0);
        if ($39) {
         $_0$0$i9$i$i$i = 0;$iter$sroa$6$3 = $iter$sroa$6$2;
        } else {
         $41 = ((($40)) + 1|0);
         $42 = $41;
         $43 = HEAP8[$40>>0]|0;
         $phitmp32$i$i$i = $43 & 63;
         $_0$0$i9$i$i$i = $phitmp32$i$i$i;$iter$sroa$6$3 = $42;
        }
        $44 = $19 << 18;
        $45 = $44 & 1835008;
        $46 = $35 << 6;
        $47 = $_0$0$i9$i$i$i&255;
        $48 = $46 | $45;
        $49 = $48 | $47;
        $_5$sroa$4$0$ph$i = $49;$iter$sroa$6$4 = $iter$sroa$6$3;
       } else {
        $_5$sroa$4$0$ph$i = $37;$iter$sroa$6$4 = $iter$sroa$6$2;
       }
      } else {
       $_5$sroa$4$0$ph$i = $26;$iter$sroa$6$4 = $iter$sroa$6$1;
      }
     }
     $61 = (($iter$sroa$0$0224) - ($iter$sroa$6$0225))|0;
     $62 = (($61) + ($iter$sroa$6$4))|0;
     switch ($_5$sroa$4$0$ph$i|0) {
     case 9:  {
      $init_state$sroa$0$0$i = 2;$init_state$sroa$15$0$i$off0 = 0;$init_state$sroa$9$0$i = 116;$trunc$i$i$i$i$i = 0;
      break;
     }
     case 13:  {
      $init_state$sroa$0$0$i = 2;$init_state$sroa$15$0$i$off0 = 0;$init_state$sroa$9$0$i = 114;$trunc$i$i$i$i$i = 0;
      break;
     }
     case 10:  {
      $init_state$sroa$0$0$i = 2;$init_state$sroa$15$0$i$off0 = 0;$init_state$sroa$9$0$i = 110;$trunc$i$i$i$i$i = 0;
      break;
     }
     case 34: case 39: case 92:  {
      $init_state$sroa$0$0$i = 2;$init_state$sroa$15$0$i$off0 = 0;$init_state$sroa$9$0$i = $_5$sroa$4$0$ph$i;$trunc$i$i$i$i$i = 0;
      break;
     }
     default: {
      $63 = (__ZN4core12char_private12is_printable17h81ed310b5371e890E($_5$sroa$4$0$ph$i)|0);
      if ($63) {
       $init_state$sroa$0$0$i = 1;$init_state$sroa$15$0$i$off0 = 0;$init_state$sroa$9$0$i = $_5$sroa$4$0$ph$i;$trunc$i$i$i$i$i = 0;
      } else {
       $64 = $_5$sroa$4$0$ph$i | 1;
       $65 = (Math_clz32(($64|0))|0);
       $66 = (31 - ($65))|0;
       $67 = $66 >>> 2;
       $init_state$sroa$0$0$i = 3;$init_state$sroa$15$0$i$off0 = $67;$init_state$sroa$9$0$i = $_5$sroa$4$0$ph$i;$trunc$i$i$i$i$i = 5;
      }
     }
     }
     $trunc$i$i$i$i = $init_state$sroa$0$0$i&255;
     $trunc$i$i$i$i$clear = $trunc$i$i$i$i & 3;
     switch ($trunc$i$i$i$i$clear<<24>>24) {
     case 2: case 0:  {
      break L8;
      break;
     }
     case 1:  {
      break;
     }
     case 3:  {
      $trunc$i$i$i$i$i$clear = $trunc$i$i$i$i$i & 7;
      switch ($trunc$i$i$i$i$i$clear<<24>>24) {
      case 0:  {
       $_4$0$i$i$i$i$i = 0;
       break;
      }
      case 1:  {
       $_4$0$i$i$i$i$i = 1;
       break;
      }
      case 5:  {
       $_4$0$i$i$i$i$i = 5;
       break;
      }
      case 4:  {
       $_4$0$i$i$i$i$i = 4;
       break;
      }
      default: {
       label = 33;
       break L6;
      }
      }
      $68 = (($_4$0$i$i$i$i$i) + ($init_state$sroa$15$0$i$off0))|0;
      $69 = ($68|0)==(1);
      if (!($69)) {
       break L8;
      }
      break;
     }
     default: {
      label = 34;
      break L6;
     }
     }
     $$cast$i = $iter$sroa$6$4;
     $70 = ($$cast$i|0)==($10|0);
     if ($70) {
      $from$0$ph$lcssa222 = $from$0$ph232;
      label = 16;
      break L6;
     } else {
      $$cast$i226 = $$cast$i;$iter$sroa$0$0224 = $62;$iter$sroa$6$0225 = $iter$sroa$6$4;
     }
    }
    $71 = ($iter$sroa$0$0224>>>0)<($from$0$ph232>>>0);
    if ($71) {
     label = 38;
     break;
    }
    $77 = ($from$0$ph232|0)==(0);
    $78 = ($from$0$ph232|0)==($1|0);
    $or$cond$i7$i = $77 | $78;
    if (!($or$cond$i7$i)) {
     $not$$i8$i = ($from$0$ph232>>>0)<($1>>>0);
     if (!($not$$i8$i)) {
      label = 38;
      break;
     }
     $79 = (($0) + ($from$0$ph232)|0);
     $80 = HEAP8[$79>>0]|0;
     $81 = ($80<<24>>24)>(-65);
     if (!($81)) {
      label = 38;
      break;
     }
    }
    $72 = ($iter$sroa$0$0224|0)==(0);
    $73 = ($iter$sroa$0$0224|0)==($1|0);
    $or$cond$i$i = $72 | $73;
    if (!($or$cond$i$i)) {
     $not$$i$i = ($iter$sroa$0$0224>>>0)<($1>>>0);
     if (!($not$$i$i)) {
      label = 38;
      break;
     }
     $74 = (($0) + ($iter$sroa$0$0224)|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = ($75<<24>>24)>(-65);
     if (!($76)) {
      label = 38;
      break;
     }
    }
    $82 = (($0) + ($from$0$ph232)|0);
    $83 = (($iter$sroa$0$0224) - ($from$0$ph232))|0;
    $84 = HEAP32[$3>>2]|0;
    $85 = HEAP32[$5>>2]|0;
    $86 = ((($85)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (FUNCTION_TABLE_iiii[$87 & 511]($84,$82,$83)|0);
    $not$switch4$i53 = ($88<<24>>24)==(0);
    if ($not$switch4$i53) {
     $iter2$sroa$0$0 = $init_state$sroa$0$0$i;$iter2$sroa$9$0 = $init_state$sroa$15$0$i$off0;$trunc$i$i = $trunc$i$i$i$i$i;
    } else {
     $_0$sroa$0$0 = 1;
     label = 4;
     break;
    }
    L50: while(1) {
     $trunc$i = $iter2$sroa$0$0&255;
     $trunc$i$clear = $trunc$i & 3;
     L52: do {
      switch ($trunc$i$clear<<24>>24) {
      case 0:  {
       break L50;
       break;
      }
      case 1:  {
       $_53$sroa$14$2$ph = $init_state$sroa$9$0$i;$iter2$sroa$0$1$ph = 0;$iter2$sroa$11$2$ph = $trunc$i$i;$iter2$sroa$9$2$ph = $iter2$sroa$9$0;
       break;
      }
      case 2:  {
       $_53$sroa$14$2$ph = 92;$iter2$sroa$0$1$ph = 1;$iter2$sroa$11$2$ph = $trunc$i$i;$iter2$sroa$9$2$ph = $iter2$sroa$9$0;
       break;
      }
      case 3:  {
       $trunc$i$i$clear = $trunc$i$i & 7;
       switch ($trunc$i$i$clear<<24>>24) {
       case 0:  {
        break L50;
        break;
       }
       case 5:  {
        $_53$sroa$14$2$ph = 92;$iter2$sroa$0$1$ph = $iter2$sroa$0$0;$iter2$sroa$11$2$ph = 4;$iter2$sroa$9$2$ph = $iter2$sroa$9$0;
        break L52;
        break;
       }
       case 1:  {
        $_53$sroa$14$2$ph = 125;$iter2$sroa$0$1$ph = $iter2$sroa$0$0;$iter2$sroa$11$2$ph = 0;$iter2$sroa$9$2$ph = $iter2$sroa$9$0;
        break L52;
        break;
       }
       case 2:  {
        $89 = $iter2$sroa$9$0 << 2;
        $90 = $89 & 28;
        $91 = $init_state$sroa$9$0$i >>> $90;
        $92 = $91 & 15;
        $93 = $92&255;
        $94 = ($93&255)<(10);
        $95 = $92 | 48;
        $96 = (($92) + 87)|0;
        $$sink$i$i = $94 ? $95 : $96;
        $97 = $$sink$i$i & 127;
        $98 = ($iter2$sroa$9$0|0)==(0);
        $99 = (($iter2$sroa$9$0) + -1)|0;
        $$iter2$sroa$11$0 = $98 ? 1 : $trunc$i$i;
        $$ = $98 ? 0 : $99;
        $_53$sroa$14$2$ph = $97;$iter2$sroa$0$1$ph = $iter2$sroa$0$0;$iter2$sroa$11$2$ph = $$iter2$sroa$11$0;$iter2$sroa$9$2$ph = $$;
        break L52;
        break;
       }
       case 3:  {
        $_53$sroa$14$2$ph = 123;$iter2$sroa$0$1$ph = $iter2$sroa$0$0;$iter2$sroa$11$2$ph = 2;$iter2$sroa$9$2$ph = $iter2$sroa$9$0;
        break L52;
        break;
       }
       case 4:  {
        $_53$sroa$14$2$ph = 117;$iter2$sroa$0$1$ph = $iter2$sroa$0$0;$iter2$sroa$11$2$ph = 3;$iter2$sroa$9$2$ph = $iter2$sroa$9$0;
        break L52;
        break;
       }
       default: {
        label = 53;
        break L6;
       }
       }
       break;
      }
      default: {
       label = 54;
       break L6;
      }
      }
     } while(0);
     $105 = HEAP32[$3>>2]|0;
     $106 = HEAP32[$5>>2]|0;
     $107 = ((($106)) + 16|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = (FUNCTION_TABLE_iii[$108 & 511]($105,$_53$sroa$14$2$ph)|0);
     $not$switch4$i48 = ($109<<24>>24)==(0);
     if ($not$switch4$i48) {
      $iter2$sroa$0$0 = $iter2$sroa$0$1$ph;$iter2$sroa$9$0 = $iter2$sroa$9$2$ph;$trunc$i$i = $iter2$sroa$11$2$ph;
     } else {
      $_0$sroa$0$0 = 1;
      label = 4;
      break L6;
     }
    }
    $100 = ($_5$sroa$4$0$ph$i>>>0)<(128);
    if ($100) {
     $_0$0$i = 1;
    } else {
     $101 = ($_5$sroa$4$0$ph$i>>>0)<(2048);
     if ($101) {
      $_0$0$i = 2;
     } else {
      $102 = ($_5$sroa$4$0$ph$i>>>0)<(65536);
      $$$i50 = $102 ? 3 : 4;
      $_0$0$i = $$$i50;
     }
    }
    $103 = (($_0$0$i) + ($iter$sroa$0$0224))|0;
    $$cast$i223 = $iter$sroa$6$4;
    $104 = ($$cast$i223|0)==($10|0);
    if ($104) {
     $from$0$ph$lcssa222 = $103;
     label = 16;
     break;
    } else {
     $$cast$i223234 = $$cast$i223;$from$0$ph232 = $103;$iter$sroa$0$0$ph230 = $62;$iter$sroa$6$0$ph231 = $iter$sroa$6$4;
    }
   }
   if ((label|0) == 4) {
    return ($_0$sroa$0$0|0);
   }
   else if ((label|0) == 16) {
    $50 = ($from$0$ph$lcssa222|0)==(0);
    $51 = ($from$0$ph$lcssa222|0)==($1|0);
    $or$cond$i$i66 = $50 | $51;
    if ($or$cond$i$i66) {
     $from$0$ph$lcssa222277 = $from$0$ph$lcssa222;
     label = 17;
     break;
    }
    $not$$i$i67 = ($from$0$ph$lcssa222>>>0)<($1>>>0);
    if (!($not$$i$i67)) {
     __ZN4core3str16slice_error_fail17h8c0c80047367e832E($0,$1,$from$0$ph$lcssa222,$1);
     // unreachable;
    }
    $52 = (($0) + ($from$0$ph$lcssa222)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = ($53<<24>>24)>(-65);
    if ($54) {
     $$pre$phi$iZ2D = $52;$from$0$ph$lcssa222276 = $from$0$ph$lcssa222;
     break;
    }
    __ZN4core3str16slice_error_fail17h8c0c80047367e832E($0,$1,$from$0$ph$lcssa222,$1);
    // unreachable;
   }
   else if ((label|0) == 33) {
    // unreachable;
   }
   else if ((label|0) == 34) {
    // unreachable;
   }
   else if ((label|0) == 38) {
    __ZN4core3str16slice_error_fail17h8c0c80047367e832E($0,$1,$from$0$ph232,$iter$sroa$0$0224);
    // unreachable;
   }
   else if ((label|0) == 53) {
    // unreachable;
   }
   else if ((label|0) == 54) {
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $$pre$i = (($0) + ($from$0$ph$lcssa222277)|0);
  $$pre$phi$iZ2D = $$pre$i;$from$0$ph$lcssa222276 = $from$0$ph$lcssa222277;
 }
 $55 = (($1) - ($from$0$ph$lcssa222276))|0;
 $56 = HEAP32[$3>>2]|0;
 $57 = HEAP32[$5>>2]|0;
 $58 = ((($57)) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (FUNCTION_TABLE_iiii[$59 & 511]($56,$$pre$phi$iZ2D,$55)|0);
 $not$switch4$i64 = ($60<<24>>24)==(0);
 if (!($not$switch4$i64)) {
  $_0$sroa$0$0 = 1;
  return ($_0$sroa$0$0|0);
 }
 $110 = HEAP32[$3>>2]|0;
 $111 = HEAP32[$5>>2]|0;
 $112 = ((($111)) + 16|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (FUNCTION_TABLE_iii[$113 & 511]($110,34)|0);
 $_0$sroa$0$0 = $114;
 return ($_0$sroa$0$0|0);
}
function __ZN4core12char_private12is_printable17h81ed310b5371e890E($0) {
 $0 = $0|0;
 var $$off = 0, $$off10 = 0, $$off6 = 0, $$off8 = 0, $$off9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$shrunk = 0, $_0$0$sroa$speculated$i$i$i = 0, $_0$0$sroa$speculated$i$i$i26 = 0, $cond$i = 0, $cond$i29 = 0, $iter$sroa$0$0$in$i = 0, $iter$sroa$0$0$in$i17 = 0, $iter2$sroa$0$0$in$i = 0, $iter2$sroa$0$0$in$i24 = 0, $iter2$sroa$6$0$i = 0;
 var $iter2$sroa$6$0$i23 = 0, $not$ = 0, $or$cond = 0, $or$cond37 = 0, $or$cond39 = 0, $or$cond41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&65535;
 $2 = ($0>>>0)<(65536);
 if ($2) {
  $iter$sroa$0$0$in$i = 4016;
  while(1) {
   $3 = ($iter$sroa$0$0$in$i|0)==((4622)|0);
   if ($3) {
    break;
   }
   $4 = HEAP16[$iter$sroa$0$0$in$i>>1]|0;
   $5 = ($4<<16>>16)==($1<<16>>16);
   if ($5) {
    $_0$0$shrunk = 0;
    label = 22;
    break;
   }
   $6 = ((($iter$sroa$0$0$in$i)) + 2|0);
   $7 = ($4&65535)>($1&65535);
   if ($7) {
    break;
   } else {
    $iter$sroa$0$0$in$i = $6;
   }
  }
  if ((label|0) == 22) {
   return ($_0$0$shrunk|0);
  }
  $8 = $0 & 65535;
  $iter2$sroa$0$0$in$i = 4622;$iter2$sroa$6$0$i = 300;
  while(1) {
   $9 = ($iter2$sroa$6$0$i|0)==(0);
   if ($9) {
    $_0$0$shrunk = 1;
    label = 22;
    break;
   }
   $10 = ($iter2$sroa$6$0$i>>>0)>(2);
   $_0$0$sroa$speculated$i$i$i = $10 ? 2 : $iter2$sroa$6$0$i;
   $11 = (($iter2$sroa$0$0$in$i) + ($_0$0$sroa$speculated$i$i$i<<1)|0);
   $12 = (($iter2$sroa$6$0$i) - ($_0$0$sroa$speculated$i$i$i))|0;
   $cond$i = ($_0$0$sroa$speculated$i$i$i|0)==(1);
   if ($cond$i) {
    label = 10;
    break;
   }
   $13 = HEAP16[$iter2$sroa$0$0$in$i>>1]|0;
   $14 = $13&65535;
   $15 = (($8) - ($14))|0;
   $16 = ($15|0)>(-1);
   if (!($16)) {
    $_0$0$shrunk = 1;
    label = 22;
    break;
   }
   $17 = ((($iter2$sroa$0$0$in$i)) + 2|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $20 = ($15|0)<($19|0);
   if ($20) {
    $_0$0$shrunk = 0;
    label = 22;
    break;
   } else {
    $iter2$sroa$0$0$in$i = $11;$iter2$sroa$6$0$i = $12;
   }
  }
  if ((label|0) == 10) {
   __ZN4core9panicking18panic_bounds_check17h50f56530062f9abfE(3880,1,1);
   // unreachable;
  }
  else if ((label|0) == 22) {
   return ($_0$0$shrunk|0);
  }
 }
 $21 = ($0>>>0)<(131072);
 if ($21) {
  $iter$sroa$0$0$in$i17 = 5222;
 } else {
  $$off = (($0) + -173783)|0;
  $40 = ($$off>>>0)<(41);
  $$off6 = (($0) + -177973)|0;
  $41 = ($$off6>>>0)<(11);
  $or$cond = $40 | $41;
  $42 = $0 & -2;
  $43 = ($42|0)==(178206);
  $or$cond37 = $43 | $or$cond;
  $$off8 = (($0) + -183970)|0;
  $44 = ($$off8>>>0)<(10590);
  $or$cond39 = $44 | $or$cond37;
  $$off9 = (($0) + -195102)|0;
  $45 = ($$off9>>>0)<(722658);
  $or$cond41 = $45 | $or$cond39;
  if ($or$cond41) {
   $_0$0$shrunk = 0;
   return ($_0$0$shrunk|0);
  } else {
   $$off10 = (($0) + -918000)|0;
   $not$ = ($$off10>>>0)>(196111);
   return ($not$|0);
  }
 }
 while(1) {
  $22 = ($iter$sroa$0$0$in$i17|0)==((5514)|0);
  if ($22) {
   break;
  }
  $23 = HEAP16[$iter$sroa$0$0$in$i17>>1]|0;
  $24 = ($23<<16>>16)==($1<<16>>16);
  if ($24) {
   $_0$0$shrunk = 0;
   label = 22;
   break;
  }
  $25 = ((($iter$sroa$0$0$in$i17)) + 2|0);
  $26 = ($23&65535)>($1&65535);
  if ($26) {
   break;
  } else {
   $iter$sroa$0$0$in$i17 = $25;
  }
 }
 if ((label|0) == 22) {
  return ($_0$0$shrunk|0);
 }
 $27 = $0 & 65535;
 $iter2$sroa$0$0$in$i24 = 5514;$iter2$sroa$6$0$i23 = 302;
 while(1) {
  $28 = ($iter2$sroa$6$0$i23|0)==(0);
  if ($28) {
   $_0$0$shrunk = 1;
   label = 22;
   break;
  }
  $29 = ($iter2$sroa$6$0$i23>>>0)>(2);
  $_0$0$sroa$speculated$i$i$i26 = $29 ? 2 : $iter2$sroa$6$0$i23;
  $30 = (($iter2$sroa$0$0$in$i24) + ($_0$0$sroa$speculated$i$i$i26<<1)|0);
  $31 = (($iter2$sroa$6$0$i23) - ($_0$0$sroa$speculated$i$i$i26))|0;
  $cond$i29 = ($_0$0$sroa$speculated$i$i$i26|0)==(1);
  if ($cond$i29) {
   label = 20;
   break;
  }
  $32 = HEAP16[$iter2$sroa$0$0$in$i24>>1]|0;
  $33 = $32&65535;
  $34 = (($27) - ($33))|0;
  $35 = ($34|0)>(-1);
  if (!($35)) {
   $_0$0$shrunk = 1;
   label = 22;
   break;
  }
  $36 = ((($iter2$sroa$0$0$in$i24)) + 2|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = ($34|0)<($38|0);
  if ($39) {
   $_0$0$shrunk = 0;
   label = 22;
   break;
  } else {
   $iter2$sroa$0$0$in$i24 = $30;$iter2$sroa$6$0$i23 = $31;
  }
 }
 if ((label|0) == 20) {
  __ZN4core9panicking18panic_bounds_check17h50f56530062f9abfE(3880,1,1);
  // unreachable;
 }
 else if ((label|0) == 22) {
  return ($_0$0$shrunk|0);
 }
 return (0)|0;
}
function __ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17hded13da3919e24b6E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN4core3fmt9Formatter3pad17h73e9e4d07f9315a5E($2,$0,$1)|0);
 return ($3|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h9226ae6e0713ead4E_711($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hdb8c33b52f357f07E($2,$1)|0);
 return ($3|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17hbb919c313d78cc8fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf31 = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf31 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)>(9999);
 if ($3) {
  $curr$0 = 20;$n$1 = $2;
  while(1) {
   $4 = (($n$1>>>0) % 10000)&-1;
   $5 = (($n$1>>>0) / 10000)&-1;
   $6 = (($4>>>0) / 100)&-1;
   $7 = $6 << 1;
   $8 = (($4>>>0) % 100)&-1;
   $9 = $8 << 1;
   $10 = (($curr$0) + -4)|0;
   $11 = (13147 + ($7)|0);
   $12 = (($buf31) + ($10)|0);
   $13 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=$13>>8;
   $14 = (13147 + ($9)|0);
   $15 = (($curr$0) + -2)|0;
   $16 = (($buf31) + ($15)|0);
   $17 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $10;$n$1 = $5;
   } else {
    $curr$1 = $10;$n$2 = $5;
    break;
   }
  }
 } else {
  $curr$1 = 20;$n$2 = $2;
 }
 $18 = ($n$2|0)>(99);
 if ($18) {
  $19 = (($n$2>>>0) % 100)&-1;
  $20 = $19 << 1;
  $21 = (($n$2>>>0) / 100)&-1;
  $22 = (($curr$1) + -2)|0;
  $23 = (13147 + ($20)|0);
  $24 = (($buf31) + ($22)|0);
  $25 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
  HEAP8[$24>>0]=$25&255;HEAP8[$24+1>>0]=$25>>8;
  $curr$2 = $22;$n1$0 = $21;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $26 = ($n1$0|0)<(10);
 if ($26) {
  $27 = (($curr$2) + -1)|0;
  $28 = $n1$0&255;
  $29 = (($buf31) + ($27)|0);
  $30 = (($28) + 48)<<24>>24;
  HEAP8[$29>>0] = $30;
  $curr$3 = $27;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (20 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($1,1,16608,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 } else {
  $31 = $n1$0 << 1;
  $32 = (($curr$2) + -2)|0;
  $33 = (13147 + ($31)|0);
  $34 = (($buf31) + ($32)|0);
  $35 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
  HEAP8[$34>>0]=$35&255;HEAP8[$34+1>>0]=$35>>8;
  $curr$3 = $32;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (20 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($1,1,16608,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __ZN4core3num14from_str_radix17hc08edeba9699f2b1E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$arith = 0, $$arith2 = 0, $$denom = 0, $$div = 0, $$iszero = 0, $$off = 0, $$off$i47 = 0, $$off6$i52 = 0, $$off7$i54 = 0, $$overflow = 0, $$overflow3 = 0, $$same = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_12 = 0, $_17 = 0, $_41$sroa$10$0119 = 0, $_41$sroa$632$0118 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $cond = 0, $iter$sroa$0$0$in136 = 0, $not$ = 0, $radix = 0, $result$0137 = 0, $val$0$i56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $radix = sp + 32|0;
 $_12 = sp + 8|0;
 $_17 = sp;
 HEAP32[$radix>>2] = $3;
 $$off = (($3) + -2)|0;
 $not$ = ($$off>>>0)>(34);
 if ($not$) {
  $4 = $radix;
  HEAP32[$_17>>2] = $4;
  $5 = ((($_17)) + 4|0);
  HEAP32[$5>>2] = (322);
  HEAP32[$_12>>2] = 3892;
  $6 = ((($_12)) + 4|0);
  HEAP32[$6>>2] = 1;
  $_6$sroa$0$0$$sroa_idx$i = ((($_12)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $7 = ((($_12)) + 16|0);
  HEAP32[$7>>2] = $_17;
  $8 = ((($_12)) + 20|0);
  HEAP32[$8>>2] = 1;
  __ZN4core9panicking9panic_fmt17hf76b991e50dd1856E($_12,3424);
  // unreachable;
 }
 $9 = ($2|0)==(0);
 do {
  if ($9) {
   HEAP8[$0>>0] = 1;
   $10 = ((($0)) + 1|0);
   HEAP8[$10>>0] = 0;
  } else {
   $11 = HEAP8[$1>>0]|0;
   $cond = ($11<<24>>24)==(43);
   if ($cond) {
    $12 = ((($1)) + 1|0);
    $13 = (($2) + -1)|0;
    $14 = ($13|0)==(0);
    if ($14) {
     HEAP8[$0>>0] = 1;
     $15 = ((($0)) + 1|0);
     HEAP8[$15>>0] = 0;
     break;
    } else {
     $_41$sroa$10$0119 = $13;$_41$sroa$632$0118 = $12;
    }
   } else {
    $_41$sroa$10$0119 = $2;$_41$sroa$632$0118 = $1;
   }
   $16 = (($_41$sroa$632$0118) + ($_41$sroa$10$0119)|0);
   $17 = ($3>>>0)>(36);
   if ($17) {
    __ZN4core9panicking5panic17h59646bf1cf7ad6f8E(3224);
    // unreachable;
   } else {
    $iter$sroa$0$0$in136 = $_41$sroa$632$0118;$result$0137 = 0;
   }
   L13: while(1) {
    $18 = ((($iter$sroa$0$0$in136)) + 1|0);
    $19 = HEAP8[$iter$sroa$0$0$in136>>0]|0;
    $20 = $19&255;
    $$off$i47 = (($20) + -48)|0;
    $21 = ($$off$i47>>>0)<(10);
    do {
     if ($21) {
      $val$0$i56 = $$off$i47;
     } else {
      $$off6$i52 = (($20) + -97)|0;
      $24 = ($$off6$i52>>>0)<(26);
      if ($24) {
       $22 = (($20) + -87)|0;
       $val$0$i56 = $22;
       break;
      }
      $$off7$i54 = (($20) + -65)|0;
      $25 = ($$off7$i54>>>0)<(26);
      if (!($25)) {
       label = 18;
       break L13;
      }
      $23 = (($20) + -55)|0;
      $val$0$i56 = $23;
     }
    } while(0);
    $26 = ($val$0$i56>>>0)<($3>>>0);
    if (!($26)) {
     label = 18;
     break;
    }
    $$arith2 = Math_imul($result$0137, $3)|0;
    $$iszero = ($3|0)==(0);
    $$denom = $$iszero ? 1 : $3;
    $$div = (($$arith2>>>0) / ($$denom>>>0))&-1;
    $$same = ($$div|0)!=($result$0137|0);
    $$overflow3 = $$iszero ? 0 : $$same;
    if ($$overflow3) {
     label = 20;
     break;
    }
    $$arith = (($$arith2) + ($val$0$i56))|0;
    $$overflow = ($$arith>>>0)<($$arith2>>>0);
    if ($$overflow) {
     label = 22;
     break;
    }
    $30 = ($18|0)==($16|0);
    if ($30) {
     label = 24;
     break;
    } else {
     $iter$sroa$0$0$in136 = $18;$result$0137 = $$arith;
    }
   }
   if ((label|0) == 18) {
    HEAP8[$0>>0] = 1;
    $27 = ((($0)) + 1|0);
    HEAP8[$27>>0] = 1;
    break;
   }
   else if ((label|0) == 20) {
    HEAP8[$0>>0] = 1;
    $28 = ((($0)) + 1|0);
    HEAP8[$28>>0] = 2;
    break;
   }
   else if ((label|0) == 22) {
    HEAP8[$0>>0] = 1;
    $29 = ((($0)) + 1|0);
    HEAP8[$29>>0] = 2;
    break;
   }
   else if ((label|0) == 24) {
    HEAP8[$0>>0] = 0;
    $31 = ((($0)) + 4|0);
    HEAP32[$31>>2] = $$arith;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17ha76c0deb91486095E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3num14from_str_radix17hc08edeba9699f2b1E($0,$1,$2,10);
 return;
}
function __ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17h700df51eb028fdccE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$repack$i$i = 0, $$unpack$i = 0, $$unpack$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i$i = 0, $_17 = 0, $builder = 0, $switch4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $builder = sp;
 $_17 = sp + 8|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 511]($3,13827,13)|0);
 HEAP32[$builder>>2] = $1;
 $$repack$i$i = ((($builder)) + 4|0);
 HEAP8[$$repack$i$i>>0] = $8;
 $9 = ((($builder)) + 5|0);
 HEAP8[$9>>0] = 0;
 HEAP32[$_17>>2] = $0;
 (__ZN4core3fmt8builders11DebugStruct5field17hb6095a6ccb348274E($builder,13756,4,$_17,2208)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 $$unpack$pre$i = HEAP8[$$repack$i$i>>0]|0;
 if ($11) {
  $$unpack$i = $$unpack$pre$i;
  STACKTOP = sp;return ($$unpack$i|0);
 }
 $switch4$i$i = ($$unpack$pre$i<<24>>24)==(0);
 do {
  if ($switch4$i$i) {
   $12 = HEAP32[$builder>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 4;
   $15 = ($14|0)==(0);
   $16 = ((($12)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($12)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   if ($15) {
    $23 = (FUNCTION_TABLE_iiii[$21 & 511]($17,13645,2)|0);
    $_0$sroa$0$0$i$i = $23;
    break;
   } else {
    $22 = (FUNCTION_TABLE_iiii[$21 & 511]($17,13643,2)|0);
    $_0$sroa$0$0$i$i = $22;
    break;
   }
  } else {
   $_0$sroa$0$0$i$i = 1;
  }
 } while(0);
 HEAP8[$$repack$i$i>>0] = $_0$sroa$0$0$i$i;
 $$unpack$i = $_0$sroa$0$0$i$i;
 STACKTOP = sp;return ($$unpack$i|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h1187313413a087edE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $trunc$i = HEAP8[$2>>0]|0;
 $trunc$i$clear = $trunc$i & 3;
 switch ($trunc$i$clear<<24>>24) {
 case 0:  {
  $3 = ((($1)) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($1)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 511]($4,13760,5)|0);
  $_0$sroa$0$0$i = $9;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 case 1:  {
  $10 = ((($1)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($1)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_iiii[$15 & 511]($11,13840,12)|0);
  $_0$sroa$0$0$i = $16;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 case 2:  {
  $17 = ((($1)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($1)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (FUNCTION_TABLE_iiii[$22 & 511]($18,13852,8)|0);
  $_0$sroa$0$0$i = $23;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 case 3:  {
  $24 = ((($1)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($1)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (FUNCTION_TABLE_iiii[$29 & 511]($25,13860,9)|0);
  $_0$sroa$0$0$i = $30;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17h2cfb94c942bd9689E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf31$i = 0, $curr$232$i = 0, $curr$3$i = 0, $div$i = 0, $n1$033$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf31$i = sp;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2&255;
 $4 = ($2&255)>(99);
 if ($4) {
  $5 = (($2&255) % 100)&-1;
  $6 = $5&255;
  $7 = $6 << 1;
  $div$i = (($2&255) / 100)&-1;
  $8 = $div$i&255;
  $9 = (13147 + ($7)|0);
  $10 = ((($buf31$i)) + 18|0);
  $11 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
  HEAP8[$10>>0]=$11&255;HEAP8[$10+1>>0]=$11>>8;
  $curr$232$i = 17;$n1$033$i = $8;
  label = 4;
 } else {
  $12 = ($2&255)<(10);
  if ($12) {
   $curr$232$i = 19;$n1$033$i = $3;
   label = 4;
  } else {
   $16 = $3 << 1;
   $17 = (13147 + ($16)|0);
   $18 = ((($buf31$i)) + 18|0);
   $19 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $curr$3$i = 18;
  }
 }
 if ((label|0) == 4) {
  $13 = $n1$033$i&255;
  $14 = (($buf31$i) + ($curr$232$i)|0);
  $15 = (($13) + 48)<<24>>24;
  HEAP8[$14>>0] = $15;
  $curr$3$i = $curr$232$i;
 }
 $20 = (($buf31$i) + ($curr$3$i)|0);
 $21 = (20 - ($curr$3$i))|0;
 $22 = (__ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($1,1,16608,0,$20,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17hcd0b142db1905adfE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h5f706c2120c63b6eE($0,$1)|0);
 return ($2|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h5f706c2120c63b6eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf31 = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf31 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)>(-1);
 $4 = (0 - ($2))|0;
 $$ = $3 ? $2 : $4;
 $5 = ($$>>>0)>(9999);
 if ($5) {
  $curr$0 = 20;$n$1 = $$;
  while(1) {
   $6 = (($n$1>>>0) % 10000)&-1;
   $7 = (($n$1>>>0) / 10000)&-1;
   $8 = (($6>>>0) / 100)&-1;
   $9 = $8 << 1;
   $10 = (($6>>>0) % 100)&-1;
   $11 = $10 << 1;
   $12 = (($curr$0) + -4)|0;
   $13 = (13147 + ($9)|0);
   $14 = (($buf31) + ($12)|0);
   $15 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
   HEAP8[$14>>0]=$15&255;HEAP8[$14+1>>0]=$15>>8;
   $16 = (13147 + ($11)|0);
   $17 = (($curr$0) + -2)|0;
   $18 = (($buf31) + ($17)|0);
   $19 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $12;$n$1 = $7;
   } else {
    $curr$1 = $12;$n$2 = $7;
    break;
   }
  }
 } else {
  $curr$1 = 20;$n$2 = $$;
 }
 $20 = ($n$2|0)>(99);
 if ($20) {
  $21 = (($n$2>>>0) % 100)&-1;
  $22 = $21 << 1;
  $23 = (($n$2>>>0) / 100)&-1;
  $24 = (($curr$1) + -2)|0;
  $25 = (13147 + ($22)|0);
  $26 = (($buf31) + ($24)|0);
  $27 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8);
  HEAP8[$26>>0]=$27&255;HEAP8[$26+1>>0]=$27>>8;
  $curr$2 = $24;$n1$0 = $23;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $28 = ($n1$0|0)<(10);
 if ($28) {
  $29 = (($curr$2) + -1)|0;
  $30 = $n1$0&255;
  $31 = (($buf31) + ($29)|0);
  $32 = (($30) + 48)<<24>>24;
  HEAP8[$31>>0] = $32;
  $curr$3 = $29;
  $38 = (($buf31) + ($curr$3)|0);
  $39 = (20 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($1,$3,16608,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 } else {
  $33 = $n1$0 << 1;
  $34 = (($curr$2) + -2)|0;
  $35 = (13147 + ($33)|0);
  $36 = (($buf31) + ($34)|0);
  $37 = HEAPU8[$35>>0]|(HEAPU8[$35+1>>0]<<8);
  HEAP8[$36>>0]=$37&255;HEAP8[$36+1>>0]=$37>>8;
  $curr$3 = $34;
  $38 = (($buf31) + ($curr$3)|0);
  $39 = (20 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($1,$3,16608,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_isize_GT_3fmt17h5bbeb75286e8e893E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf31 = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf31 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)>(-1);
 $4 = (0 - ($2))|0;
 $$ = $3 ? $2 : $4;
 $5 = ($$>>>0)>(9999);
 if ($5) {
  $curr$0 = 20;$n$1 = $$;
  while(1) {
   $6 = (($n$1>>>0) % 10000)&-1;
   $7 = (($n$1>>>0) / 10000)&-1;
   $8 = (($6>>>0) / 100)&-1;
   $9 = $8 << 1;
   $10 = (($6>>>0) % 100)&-1;
   $11 = $10 << 1;
   $12 = (($curr$0) + -4)|0;
   $13 = (13147 + ($9)|0);
   $14 = (($buf31) + ($12)|0);
   $15 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
   HEAP8[$14>>0]=$15&255;HEAP8[$14+1>>0]=$15>>8;
   $16 = (13147 + ($11)|0);
   $17 = (($curr$0) + -2)|0;
   $18 = (($buf31) + ($17)|0);
   $19 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $12;$n$1 = $7;
   } else {
    $curr$1 = $12;$n$2 = $7;
    break;
   }
  }
 } else {
  $curr$1 = 20;$n$2 = $$;
 }
 $20 = ($n$2|0)>(99);
 if ($20) {
  $21 = (($n$2>>>0) % 100)&-1;
  $22 = $21 << 1;
  $23 = (($n$2>>>0) / 100)&-1;
  $24 = (($curr$1) + -2)|0;
  $25 = (13147 + ($22)|0);
  $26 = (($buf31) + ($24)|0);
  $27 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8);
  HEAP8[$26>>0]=$27&255;HEAP8[$26+1>>0]=$27>>8;
  $curr$2 = $24;$n1$0 = $23;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $28 = ($n1$0|0)<(10);
 if ($28) {
  $29 = (($curr$2) + -1)|0;
  $30 = $n1$0&255;
  $31 = (($buf31) + ($29)|0);
  $32 = (($30) + 48)<<24>>24;
  HEAP8[$31>>0] = $32;
  $curr$3 = $29;
  $38 = (($buf31) + ($curr$3)|0);
  $39 = (20 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($1,$3,16608,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 } else {
  $33 = $n1$0 << 1;
  $34 = (($curr$2) + -2)|0;
  $35 = (13147 + ($33)|0);
  $36 = (($buf31) + ($34)|0);
  $37 = HEAPU8[$35>>0]|(HEAPU8[$35+1>>0]<<8);
  HEAP8[$36>>0]=$37&255;HEAP8[$36+1>>0]=$37>>8;
  $curr$3 = $34;
  $38 = (($buf31) + ($curr$3)|0);
  $39 = (20 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($1,$3,16608,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17h3a658edfdb739efbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hdb8c33b52f357f07E($0,$1)|0);
 return ($2|0);
}
function __ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17h39589df3fc3f2693E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$repack$i$i = 0, $$unpack$i = 0, $$unpack$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i$i = 0, $_17 = 0, $builder = 0, $switch4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $builder = sp;
 $_17 = sp + 8|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 511]($3,13869,9)|0);
 HEAP32[$builder>>2] = $1;
 $$repack$i$i = ((($builder)) + 4|0);
 HEAP8[$$repack$i$i>>0] = $8;
 $9 = ((($builder)) + 5|0);
 HEAP8[$9>>0] = 0;
 HEAP32[$_17>>2] = $0;
 (__ZN4core3fmt8builders11DebugStruct5field17hb6095a6ccb348274E($builder,13878,11,$_17,2192)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 $$unpack$pre$i = HEAP8[$$repack$i$i>>0]|0;
 if ($11) {
  $$unpack$i = $$unpack$pre$i;
  STACKTOP = sp;return ($$unpack$i|0);
 }
 $switch4$i$i = ($$unpack$pre$i<<24>>24)==(0);
 do {
  if ($switch4$i$i) {
   $12 = HEAP32[$builder>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 4;
   $15 = ($14|0)==(0);
   $16 = ((($12)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($12)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   if ($15) {
    $23 = (FUNCTION_TABLE_iiii[$21 & 511]($17,13645,2)|0);
    $_0$sroa$0$0$i$i = $23;
    break;
   } else {
    $22 = (FUNCTION_TABLE_iiii[$21 & 511]($17,13643,2)|0);
    $_0$sroa$0$0$i$i = $22;
    break;
   }
  } else {
   $_0$sroa$0$0$i$i = 1;
  }
 } while(0);
 HEAP8[$$repack$i$i>>0] = $_0$sroa$0$0$i$i;
 $$unpack$i = $_0$sroa$0$0$i$i;
 STACKTOP = sp;return ($$unpack$i|0);
}
function __ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17hbe31468bb2b3b5d5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i15$i = 0, $buf$i = 0, $curr$0$i = 0, $iter$sroa$4$0$in$i = 0, $x$0$i = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $buf$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($buf$i)) + 64|0);
 dest=$buf$i; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $curr$0$i = 64;$iter$sroa$4$0$in$i = $3;$x$0$i = $2;
 while(1) {
  $4 = ((($iter$sroa$4$0$in$i)) + -1|0);
  $5 = $x$0$i & 15;
  $6 = $x$0$i >>> 4;
  $7 = $5&255;
  $8 = ($7&255)<(10);
  $9 = $7 | 48;
  $10 = (($7) + 87)<<24>>24;
  $_0$0$i15$i = $8 ? $9 : $10;
  HEAP8[$4>>0] = $_0$0$i15$i;
  $11 = (($curr$0$i) + -1)|0;
  $12 = ($6|0)==(0);
  if ($12) {
   break;
  } else {
   $curr$0$i = $11;$iter$sroa$4$0$in$i = $4;$x$0$i = $6;
  }
 }
 $13 = ($11>>>0)>(64);
 if ($13) {
  __ZN4core5slice22slice_index_order_fail17hba8ec71a2aed226bE($11,64);
  // unreachable;
 } else {
  $14 = (($buf$i) + ($11)|0);
  $15 = (65 - ($curr$0$i))|0;
  $16 = (__ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($1,1,13765,2,$14,$15)|0);
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZN4core3fmt3num53__LT_impl_u20_core__fmt__UpperHex_u20_for_u20_u32_GT_3fmt17h80358c5ccdff8f76E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i15$i = 0, $buf$i = 0, $curr$0$i = 0, $iter$sroa$4$0$in$i = 0, $x$0$i = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $buf$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($buf$i)) + 64|0);
 dest=$buf$i; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $curr$0$i = 64;$iter$sroa$4$0$in$i = $3;$x$0$i = $2;
 while(1) {
  $4 = ((($iter$sroa$4$0$in$i)) + -1|0);
  $5 = $x$0$i & 15;
  $6 = $x$0$i >>> 4;
  $7 = $5&255;
  $8 = ($7&255)<(10);
  $9 = $7 | 48;
  $10 = (($7) + 55)<<24>>24;
  $_0$0$i15$i = $8 ? $9 : $10;
  HEAP8[$4>>0] = $_0$0$i15$i;
  $11 = (($curr$0$i) + -1)|0;
  $12 = ($6|0)==(0);
  if ($12) {
   break;
  } else {
   $curr$0$i = $11;$iter$sroa$4$0$in$i = $4;$x$0$i = $6;
  }
 }
 $13 = ($11>>>0)>(64);
 if ($13) {
  __ZN4core5slice22slice_index_order_fail17hba8ec71a2aed226bE($11,64);
  // unreachable;
 } else {
  $14 = (($buf$i) + ($11)|0);
  $15 = (65 - ($curr$0$i))|0;
  $16 = (__ZN4core3fmt9Formatter12pad_integral17h41b8ff0df1b94a54E($1,1,13765,2,$14,$15)|0);
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZN53__LT_core__fmt__Error_u20_as_u20_core__fmt__Debug_GT_3fmt17h6ef010a3af2baf90E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 511]($3,13889,5)|0);
 return ($8|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[4016]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((371|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4016]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 16108;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _cleanup_387($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 372;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (13894 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 13982;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 13982;
  } else {
   $$01113 = 13982;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall4(4,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1003]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[1003]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((16092)|0));
   $$02325 = HEAP32[(16088)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $25 = $16;
     } else {
      $25 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $24 = ($25|0)==(0);
     if (!($24)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((16092)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 511]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 511]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _htons($0) {
 $0 = $0|0;
 var $rev$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev$i = (_llvm_bswap_i16(($0|0))|0);
 return ($rev$i|0);
}
function _htonl($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llvm_bswap_i32(($0|0))|0);
 return ($1|0);
}
function _ntohs($0) {
 $0 = $0|0;
 var $rev$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev$i = (_llvm_bswap_i16(($0|0))|0);
 return ($rev$i|0);
}
function _strerror_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($0)|0);
 $4 = (_strlen($3)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $9 = (($4) + 1)|0;
  _memcpy(($1|0),($3|0),($9|0))|0;
  $$0 = 0;
 } else {
  $6 = ($2|0)==(0);
  $7 = (($2) + -1)|0;
  if ($6) {
   $$0 = 34;
  } else {
   $8 = (($1) + ($7)|0);
   _memcpy(($1|0),($3|0),($7|0))|0;
   HEAP8[$8>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[4028]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (16152 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[4028] = $24;
     } else {
      $25 = HEAP32[(16128)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(16120)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (16152 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[4028] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(16128)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(16132)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (16152 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[4028] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(16128)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(16120)>>2] = $84;
     HEAP32[(16132)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(16116)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (16416 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(16128)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (16416 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(16116)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(16128)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(16128)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(16128)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(16132)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (16152 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[4028] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(16128)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(16120)>>2] = $$0191$i;
      HEAP32[(16132)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(16116)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (16416 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (16416 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(16120)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(16128)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (16416 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(16116)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(16128)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(16128)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(16128)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (16152 + ($425<<2)|0);
          $427 = HEAP32[4028]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[4028] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(16128)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (16416 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(16116)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(16128)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(16128)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(16120)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(16132)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(16132)>>2] = $511;
   HEAP32[(16120)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(16120)>>2] = 0;
   HEAP32[(16132)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(16124)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(16124)>>2] = $526;
  $527 = HEAP32[(16136)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(16136)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[4146]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(16592)>>2] = 4096;
  HEAP32[(16588)>>2] = 4096;
  HEAP32[(16596)>>2] = -1;
  HEAP32[(16600)>>2] = -1;
  HEAP32[(16604)>>2] = 0;
  HEAP32[(16556)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[4146] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(16592)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(16552)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(16544)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(16556)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(16136)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (16560);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(16588)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(16544)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(16552)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(16592)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(16556)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(16556)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(16544)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(16544)>>2] = $624;
  $625 = HEAP32[(16548)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(16548)>>2] = $624;
  }
  $627 = HEAP32[(16136)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(16128)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(16128)>>2] = $$748$i;
    }
    HEAP32[(16560)>>2] = $$748$i;
    HEAP32[(16564)>>2] = $$723947$i;
    HEAP32[(16572)>>2] = 0;
    $632 = HEAP32[4146]|0;
    HEAP32[(16148)>>2] = $632;
    HEAP32[(16144)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (16152 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(16136)>>2] = $646;
    HEAP32[(16124)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(16600)>>2]|0;
    HEAP32[(16140)>>2] = $652;
   } else {
    $$024370$i = (16560);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(16124)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(16136)>>2] = $676;
       HEAP32[(16124)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(16600)>>2]|0;
       HEAP32[(16140)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(16128)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(16128)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (16560);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (16560);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(16124)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(16124)>>2] = $724;
        HEAP32[(16136)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(16132)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(16120)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(16120)>>2] = $730;
         HEAP32[(16132)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (16152 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[4028]|0;
            $757 = $756 & $755;
            HEAP32[4028] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (16416 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(16116)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(16116)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(16128)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(16128)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(16128)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (16152 + ($834<<2)|0);
         $836 = HEAP32[4028]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[4028] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(16128)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (16416 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(16116)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(16116)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(16128)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(16128)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (16560);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(16136)>>2] = $944;
    HEAP32[(16124)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(16600)>>2]|0;
    HEAP32[(16140)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(16560)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(16560)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(16560)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(16560)+12>>2]|0;
    HEAP32[(16560)>>2] = $$748$i;
    HEAP32[(16564)>>2] = $$723947$i;
    HEAP32[(16572)>>2] = 0;
    HEAP32[(16568)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (16152 + ($965<<2)|0);
      $967 = HEAP32[4028]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[4028] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(16128)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (16416 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(16116)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(16116)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(16128)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(16128)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(16124)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(16124)>>2] = $1047;
   $1048 = HEAP32[(16136)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(16136)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(16128)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(16132)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(16120)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (16152 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[4028]|0;
     $38 = $37 & $36;
     HEAP32[4028] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (16416 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(16116)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(16116)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(16128)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(16128)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(16128)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(16136)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(16124)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(16124)>>2] = $123;
   HEAP32[(16136)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(16132)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(16132)>>2] = 0;
   HEAP32[(16120)>>2] = 0;
   return;
  }
  $128 = HEAP32[(16132)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(16120)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(16120)>>2] = $131;
   HEAP32[(16132)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (16152 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(16128)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[4028]|0;
     $155 = $154 & $153;
     HEAP32[4028] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(16128)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(16128)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(16128)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (16416 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(16116)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(16116)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(16128)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(16128)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(16128)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(16132)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(16120)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (16152 + ($236<<2)|0);
  $238 = HEAP32[4028]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[4028] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(16128)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (16416 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(16116)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(16116)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(16128)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(16128)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(16144)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(16144)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (16568);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(16144)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(16128)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(16592)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(16136)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(16124)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(16136)>>2] = $40;
  HEAP32[(16124)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(16132)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(16120)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(16120)>>2] = $storemerge1;
  HEAP32[(16132)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (16152 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[4028]|0;
    $93 = $92 & $91;
    HEAP32[4028] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (16416 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(16116)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(16116)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(16128)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(16128)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(16128)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(16128)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(16132)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(16120)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (16152 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[4028]|0;
     $34 = $33 & $32;
     HEAP32[4028] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (16416 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(16116)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(16116)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(16128)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(16128)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(16128)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(16128)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(16136)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(16124)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(16124)>>2] = $118;
   HEAP32[(16136)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(16132)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(16132)>>2] = 0;
   HEAP32[(16120)>>2] = 0;
   return;
  }
  $123 = HEAP32[(16132)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(16120)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(16120)>>2] = $126;
   HEAP32[(16132)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (16152 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[4028]|0;
     $149 = $148 & $147;
     HEAP32[4028] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (16416 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(16116)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(16116)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(16128)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(16128)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(16128)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(16132)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(16120)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (16152 + ($227<<2)|0);
  $229 = HEAP32[4028]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[4028] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(16128)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (16416 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(16116)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(16116)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(16128)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(16128)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function _internal_memalign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0100 = 0, $$099 = 0, $$1 = 0, $$198 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(16);
 $$ = $2 ? 16 : $0;
 $3 = (($$) + -1)|0;
 $4 = $3 & $$;
 $5 = ($4|0)==(0);
 if ($5) {
  $$1 = $$;
 } else {
  $$099 = 16;
  while(1) {
   $6 = ($$099>>>0)<($$>>>0);
   $7 = $$099 << 1;
   if ($6) {
    $$099 = $7;
   } else {
    $$1 = $$099;
    break;
   }
  }
 }
 $8 = (-64 - ($$1))|0;
 $9 = ($8>>>0)>($1>>>0);
 if (!($9)) {
  $10 = (___errno_location()|0);
  HEAP32[$10>>2] = 12;
  $$198 = 0;
  return ($$198|0);
 }
 $11 = ($1>>>0)<(11);
 $12 = (($1) + 11)|0;
 $13 = $12 & -8;
 $14 = $11 ? 16 : $13;
 $15 = (($14) + 12)|0;
 $16 = (($15) + ($$1))|0;
 $17 = (_malloc($16)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$198 = 0;
  return ($$198|0);
 }
 $19 = ((($17)) + -8|0);
 $20 = $17;
 $21 = (($$1) + -1)|0;
 $22 = $20 & $21;
 $23 = ($22|0)==(0);
 do {
  if ($23) {
   $$0100 = $19;
  } else {
   $24 = (($17) + ($$1)|0);
   $25 = ((($24)) + -1|0);
   $26 = $25;
   $27 = (0 - ($$1))|0;
   $28 = $26 & $27;
   $29 = $28;
   $30 = ((($29)) + -8|0);
   $31 = $30;
   $32 = $19;
   $33 = (($31) - ($32))|0;
   $34 = ($33>>>0)>(15);
   $35 = (($30) + ($$1)|0);
   $36 = $34 ? $30 : $35;
   $37 = $36;
   $38 = (($37) - ($32))|0;
   $39 = ((($17)) + -4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & -8;
   $42 = (($41) - ($38))|0;
   $43 = $40 & 3;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = HEAP32[$19>>2]|0;
    $46 = (($45) + ($38))|0;
    HEAP32[$36>>2] = $46;
    $47 = ((($36)) + 4|0);
    HEAP32[$47>>2] = $42;
    $$0100 = $36;
    break;
   } else {
    $48 = ((($36)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 1;
    $51 = $42 | $50;
    $52 = $51 | 2;
    HEAP32[$48>>2] = $52;
    $53 = (($36) + ($42)|0);
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 | 1;
    HEAP32[$54>>2] = $56;
    $57 = HEAP32[$39>>2]|0;
    $58 = $57 & 1;
    $59 = $38 | $58;
    $60 = $59 | 2;
    HEAP32[$39>>2] = $60;
    $61 = HEAP32[$48>>2]|0;
    $62 = $61 | 1;
    HEAP32[$48>>2] = $62;
    _dispose_chunk($19,$38);
    $$0100 = $36;
    break;
   }
  }
 } while(0);
 $63 = ((($$0100)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 3;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $67 = $64 & -8;
  $68 = (($14) + 16)|0;
  $69 = ($67>>>0)>($68>>>0);
  if ($69) {
   $70 = (($67) - ($14))|0;
   $71 = (($$0100) + ($14)|0);
   $72 = $64 & 1;
   $73 = $14 | $72;
   $74 = $73 | 2;
   HEAP32[$63>>2] = $74;
   $75 = ((($71)) + 4|0);
   $76 = $70 | 3;
   HEAP32[$75>>2] = $76;
   $77 = (($71) + ($70)|0);
   $78 = ((($77)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $79 | 1;
   HEAP32[$78>>2] = $80;
   _dispose_chunk($71,$70);
  }
 }
 $81 = ((($$0100)) + 8|0);
 $$198 = $81;
 return ($$198|0);
}
function _posix_memalign($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(8);
 do {
  if ($3) {
   $4 = (_malloc($2)|0);
   $$2 = $4;
  } else {
   $5 = $1 >>> 2;
   $6 = $1 & 3;
   $7 = ($6|0)!=(0);
   $8 = ($5|0)==(0);
   $or$cond = $7 | $8;
   if ($or$cond) {
    $$1 = 22;
    return ($$1|0);
   }
   $9 = (($5) + 1073741823)|0;
   $10 = $9 & $5;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $$1 = 22;
    return ($$1|0);
   }
   $12 = (-64 - ($1))|0;
   $13 = ($12>>>0)<($2>>>0);
   if ($13) {
    $$1 = 12;
    return ($$1|0);
   } else {
    $14 = ($1>>>0)<(16);
    $$ = $14 ? 16 : $1;
    $15 = (_internal_memalign($$,$2)|0);
    $$2 = $15;
    break;
   }
  }
 } while(0);
 $16 = ($$2|0)==(0|0);
 if ($16) {
  $$1 = 12;
  return ($$1|0);
 }
 HEAP32[$0>>2] = $$2;
 $$1 = 0;
 return ($$1|0);
}
function runPostSets() {
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _pthread_self() {
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2() {
 ; nullFunc_i(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function b7() {
 ; nullFunc_v(7);
}
function b8(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(8);return 0;
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(9);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0f176071ce95e943E,b0,b0,b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0f176071ce95e943E_254,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hde6a377d6898c273E,b0,b0,b0,b0,b0
,b0,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0fcc383b62cf1aa6E,b0,b0,b0,b0,b0,b0,b0,b0,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h7f81009b213a6effE,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0c2ff6996c6becbfE,b0,b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h9969e5a45e783d02E,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hda949738c35cc53dE,b0,b0,b0
,b0,b0,___stdout_write,___stdio_seek,__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE,b0,b0,b0,b0,b0,b0,b0,b0,__ZN59__LT__RF__u27_a_u20_str_u20_as_u20_webplatform__Interop_GT_6as_int17h0651b868b4423f0dE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17hf7aa56bc41f16c53E,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN11webplatform8HtmlNode12prop_get_i3217h2f048ba64c2304ebE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17hf7aa56bc41f16c53E_31,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h817e47a288b89ddbE,b0,b0
,b0,b0,__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17h0cf5d7fef51c6c5eE,__ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h56ac62c9886feaebE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17hefb432f9c1b0e606E,b0,b0,__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17h8dbfefd2bf0aae72E,__ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h6bc9bb7bb7d858f6E,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hca9fc5d4950f608fE_95,__ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17hf7aa56bc41f16c53E_96,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN4core3fmt5write17he0deec3411c715a1E,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17h51cb268862c67feeE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN4core3fmt9Arguments6new_v117h22aa263f6d4613b4E,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,__ZN9simpledom9simpledom2el17h7194554ad55be29dE,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN11webplatform8HtmlNode12prop_set_str17h91e26a3cbc5bcd7aE,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN4core3fmt9Arguments6new_v117h22aa263f6d4613b4E_14,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN9simpledom9simpledom7Element3new17h14ac9f3f9565561bE,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN4core3fmt9Arguments6new_v117h22aa263f6d4613b4E_128,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN3std2io5stdio6stdout11stdout_init17hd7b29264b5a2db63E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4core3mem7size_of17headfa8af309595d8E
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN11webplatform4init17h07bf258edc3ddd43E,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4core3mem7size_of17hd154145e87414f75E_17,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4core3mem7size_of17h01334bab523b4211E_39,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,__ZN4core3mem7size_of17hf25428224e4aa658E_69,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,__ZN5alloc2rc8RcBoxPtr10inc_strong28__u7b__u7b_closure_u7d__u7d_17h3351d02c83dc8abaE,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,__ZN4core3mem7size_of17h6b2a5e5b6654bff6E_99,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17hadbbbfd8ce4ffa28E,b2,b2,b2,__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h362dce70d8816be7E,__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17haf50d21ee5154093E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN3std2io5stdio6stdout17h5cd91a3f9d8da117E,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,__ZN4drop17h381dcdd9fdbdc868E,b3,b3,__ZN4drop17h6ebc62578d224f8eE,b3,b3,b3,__ZN3std6thread5local2os13destroy_value17hc9d966c98178e993E,__ZN3std6thread5local2os13destroy_value17hb4f010aad6eac5bbE,__ZN3std6thread5local2os13destroy_value17hb9cc2fd575b22d1cE,b3,__ZN4drop17h528e564b5eb6cac7E,b3,b3,b3,__ZN4drop17he16c838cc426c8f0E,b3,b3,b3,b3,b3,__ZN4drop17he03788aca3a174dbE,b3,b3,b3,__ZN4drop17h214d5866c0ceeae9E,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN50__LT_F_u20_as_u20_alloc__boxed__FnBox_LT_A_GT__GT_8call_box17h1edac03fba8b4340E,__ZN4drop17hf08af3c93d88269dE,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4drop17h17e944006edb68e8E,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17h38da251d6b68dc83E,b3,b3,b3,b3,__ZN4drop17hc2512a9167c6ec2fE,b3,b3,b3,b3,b3,__ZN4drop17h9988fea94e44325dE,b3,b3,__ZN4drop17h604dc3172dcac63fE,__ZN4drop17hccfc6765fb5309cfE,__ZN4core9panicking5panic17h59646bf1cf7ad6f8E,__ZN4drop17h87dfd1e8f8a4cb6dE,b3
,__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h0e8c7f4888ba14f8E,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN71__LT_webplatform__HtmlNode_LT__u27_a_GT__u20_as_u20_core__ops__Drop_GT_4drop17hc195ff3c5a7ba048E,__ZN60__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Drop_GT_4drop17h2bba541bafbc67a6E,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h402c6ed143bb9518E,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h427bc0b366c3f968E,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h1fecc8b91300da9eE,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h32cd9b80ae08eae3E,__ZN58__LT_alloc__rc__Rc_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h2d3c297eb02d11a4E,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h2e4caa7870aa83f2E,__ZN74__LT_core__cell__BorrowRefMut_LT__u27_b_GT__u20_as_u20_core__ops__Drop_GT_4drop17h4bf4109576084891E,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h02e82e970be211cdE,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17he9c3cb9d06350164E,__ZN58__LT_alloc__rc__Rc_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h7572d9a6c7fc2293E,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17hc38d5b175e1c5bfaE,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h0e26fdf6fdd614d7E,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h8d254c1a1463c9c8E,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3std2io5stdio6_print17hd5142059f0ff0076E,__ZN4drop17h534ba5ae66184666E,b3,b3,b3,b3,__ZN4drop17h0defdbdca0c80acfE,__ZN4drop17h921e5ca9ee3c1fefE,b3,__ZN4drop17h7681d5741b632c42E,b3,__ZN11collections6string6String3new17ha2893a9e26b91767E,b3
,b3,__ZN4drop17h348e10b97a61d454E,b3,b3,__ZN4drop17ha3594332bb7982ceE,b3,b3,b3,b3,b3,b3,b3,b3,__ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6unwrap17h6ec69ea39d63fca3E,__ZN4drop17hf176c6534ecd4046E,__ZN4drop17h49fe11cdc496b758E,b3,b3,b3,b3,b3,b3,__ZN4core3mem6forget17h6c8c051b67a6976aE,b3,__ZN4core3mem13uninitialized17h882ce1f8e2cecfbcE,__ZN71__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h1691776ccf0c35dfE,b3,b3,__ZN4drop17h8d9dbcdc390e199dE,__ZN4drop17h76015c8f4ddeadd4E
,__ZN4drop17h614c7861e005ad67E,__ZN4drop17h5655a31cee677dd4E,__ZN4drop17h170fadfae1d8e329E,__ZN4drop17hcce073e3bd646d8cE,__ZN4drop17hf6535ba4b994640bE,__ZN4drop17h168a6168c579fd89E,__ZN4drop17hbc72189bfe33c49bE,b3,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17hc38d5b175e1c5bfaE_15,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h427bc0b366c3f968E_16,b3,b3,b3,__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17ha8e0a9fbd8b773bdE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h02e82e970be211cdE_49,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h32cd9b80ae08eae3E_50,b3,b3,b3
,b3,b3,b3,__ZN4core3mem6forget17hd592a4aec2ffd3ddE,b3,__ZN4core3mem13uninitialized17he1d5f0b431aa3e0dE,__ZN71__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h374624c53c04d952E,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h402c6ed143bb9518E_67,__ZN58__LT_alloc__rc__Rc_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h2d3c297eb02d11a4E_52,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h8d254c1a1463c9c8E_68,__ZN4drop17h43148375c9029f4cE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4drop17hbbbef022467984b7E,b3,b3,b3,b3,__ZN80__LT_collections__vec__SetLenOnDrop_LT__u27_a_GT__u20_as_u20_core__ops__Drop_GT_4drop17h341ffcedab56f085E
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4drop17h9538293552a4ed9bE,b3,__ZN4drop17h1e23d488269719a9E,b3,b3,b3,b3,b3,b3
,b3,b3,__ZN4drop17hed62fb861afed8c2E,b3,__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h89230ed3ec57b141E,b3,b3,b3,b3,__ZN60__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Drop_GT_4drop17h2bba541bafbc67a6E_91,b3,b3,b3,b3,b3,b3,b3,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h02e82e970be211cdE_116,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h32cd9b80ae08eae3E_117,b3,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h2e4caa7870aa83f2E_139,b3,b3,b3,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h0e26fdf6fdd614d7E_140,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17h38da251d6b68dc83E_138,__ZN4drop17h357bb778b7856b74E,b3,b3,b3
,b3,b3,b3,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17he9c3cb9d06350164E_199,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h1fecc8b91300da9eE_200,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3std10sys_common4util10dumb_print17hb72d10ffb0bc3ffbE,__ZN3std9panicking12default_hook17he64268e81ff8a2c0E,b3,b3,b3,b3,b3,b3,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h59cec8bbd823021cE,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3std3sys3imp7condvar7Condvar4init17h8bd7ed7524ba72fdE,b3,__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17ha8e0a9fbd8b773bdE_246,b3,b3,b3,b3,b3,__ZN4core6result13unwrap_failed17h28539bcb78d1ee15E,b3,__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17hb5cb10922eb9a95dE,b3,b3,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h230c7157d950d2b1E,b3,b3,b3,b3,__ZN59__LT_std__sync__once__Finish_u20_as_u20_core__ops__Drop_GT_4drop17h8896f25cb1819fd6E
,b3,__ZN3std6thread6Thread6unpark17h4e8775de76de828aE,b3,b3,b3,b3,__ZN3std9panicking3try7do_call17h68fb98401edf6777E,b3,b3,b3,b3,b3,_cleanup_387,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,__ZN5hello4main28__u7b__u7b_closure_u7d__u7d_17hbad6f84482c78212E,__ZN4core3ops6FnOnce9call_once17hfa8c211b90e17b32E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17hcb854b32f78cb163E,b4,b4,b4,b4,b4,b4,b4,__ZN251__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17h80a522282c8c37b8E,__ZN3std5error5Error5cause17he19e4136b76adf6fE
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17h9ea84ea1f8d96723E,__ZN4core3ops6FnOnce9call_once17h766c5d88e7c78cdeE,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN4core3mem6forget17h9dff91a509cf3a14E,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN37__LT_core__cell__RefCell_LT_T_GT__GT_10borrow_mut17hec8fa778bac9e76aE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,__ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hf3883631d51e57dfE,b4,b4,b4,__ZN4core6result13unwrap_failed17h77140d60754f5e94E,b4,b4,b4,b4,b4,__ZN4core9panicking9panic_fmt17hf76b991e50dd1856E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17heb1f366c3384df31E,b4,__ZN11webplatform8HtmlNode6append17h23b95f36ac0f3245E,b4,b4,__ZN9simpledom9simpledom7Element4text17ha6dcaee61ad92d11E,b4,b4,__ZN9simpledom9simpledom16render_to_string17hbcc700c02b455c17E,__ZN64__LT_collections__string__String_u20_as_u20_core__ops__Deref_GT_5deref17hfe37c7570418f8e6E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN83__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h8b046957206682aeE
,__ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17heed2247bd7a1b8ceE,b4,__ZN68__LT_core__option__Option_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h55f5f3d3c24c66ddE,__ZN68__LT_core__option__Option_LT_T_GT__u20_as_u20_core__clone__Clone_GT_5clone17h4da121c8c745ff49E,b4,__ZN9simpledom9simpledom10write_attr17hd3fd120187f6612dE,__ZN9simpledom9simpledom18write_elem_content17h4a1a3d35b93a3a30E,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h8c8f16780fd7853fE_23,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN83__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hfdae0c8ab8850b51E,__ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h6b74da9df5f54aa5E,b4,b4
,b4,b4,b4,b4,b4,b4,b4,__ZN4core6result13unwrap_failed17h46d9d3a39ac48388E,b4,b4,b4,b4,b4,b4,__ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h87e2ccedc14ca01bE_33,b4,b4,__ZN4core3ptr5write17h27c1e8f7d85ca9c7E,b4,b4,b4,b4,b4,__ZN4core6option13expect_failed17he4838b1eef3c5645E,b4,b4,b4,__ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h46d68558d235d73bE_74,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_13with_capacity17h89e72f54edb7b8e6E,b4,__ZN4core4iter8iterator8Iterator6cloned17h712ca6cd9baaf425E,__ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_11spec_extend17h981c98029888b624E,__ZN78__LT_core__iter__Cloned_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h340de4d15ccdb2b7E,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16extend_desugared17h4773ef8d9d050bbeE,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17hbc12eeed7772b118E,__ZN11collections3vec12SetLenOnDrop3new17h7db2f00f2c1c0305E,__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h0113e11cee25a481E,__ZN78__LT_core__iter__Cloned_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h6cc8a38ae651fce0E,__ZN4core3ptr5write17h028a6b3a94432575E,__ZN11collections3vec12SetLenOnDrop13increment_len17h10904a32f05ced00E,b4,b4,b4,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17h8c4caf6d525b41d7E,b4
,__ZN53__LT_core__option__Option_LT__RF__u27_a_u20_T_GT__GT_6cloned28__u7b__u7b_closure_u7d__u7d_17hfc7276b622808d43E,b4,b4,b4,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_13with_capacity17h44699301d2ceb6fbE,b4,__ZN4core4iter8iterator8Iterator6cloned17he42d8b88915292aeE,__ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_11spec_extend17h7d76ce0ddad6cc50E,__ZN78__LT_core__iter__Cloned_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hdcfd1acf4d7931bdE,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16extend_desugared17hd872b8a6ac8f5fabE,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h90f92bc66b8ceb6eE,__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hc23990d35a161737E,__ZN78__LT_core__iter__Cloned_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h56950e8842ad5d12E,__ZN4core3ptr5write17h3320bd8f4e994860E,b4,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17h5cc1b21a2071e27fE,__ZN53__LT_core__option__Option_LT__RF__u27_a_u20_T_GT__GT_6cloned28__u7b__u7b_closure_u7d__u7d_17ha387fd490fb08637E,b4,b4,b4,b4,b4,b4,__ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6unwrap17h848dd51f972045adE,__ZN61__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Deref_GT_5deref17ha29d5957628f36e7E,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_4push17he3535db2a74cca90E,b4
,__ZN3std3ffi5c_str7CString4_new17h62cc352bb8d82f48E,b4,b4,b4,b4,__ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hbb28d721bf2c09f8E_100,b4,b4,__ZN4core3ptr5write17h62a7db69e6ff587bE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN37__LT_core__cell__RefCell_LT_T_GT__GT_3new17hb042ef98d78bbedcE,b4,__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3new17h7c3ac7beb3bf9f11E
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3std9panicking11begin_panic17hab4851815c22504eE,b4,b4,b4,b4,b4,b4,__ZN4core5slice20slice_index_len_fail17h94caf57088443fc0E,b4,b4,b4,b4,b4,b4,b4,__ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17hdc43db606f8dd8f0E,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h994e49272e95c367E_252,b4
,b4,b4,b4,b4,b4,b4,b4,b4,__ZN11collections6string116__LT_impl_u20_core__convert__From_LT_collections__string__String_GT__u20_for_u20_collections__vec__Vec_LT_u8_GT__GT_4from17hf375255348a6ced2E,b4,__ZN3std3ffi5c_str7CString18from_vec_unchecked17haae07d4f9c1dd6deE,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_13reserve_exact17h51bf2ab77942e360E,b4,b4,b4,__ZN3std9panicking15begin_panic_fmt17he05914c28470d251E,b4,b4,b4,b4,b4,__ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h4ed7741ed36dc6f0E,__ZN4core5slice22slice_index_order_fail17hba8ec71a2aed226bE,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,__ZN3std10sys_common11thread_info3set17h1ead0db35ef8c010E,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17hf62e3d317c3bfe3fE,b4,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h994e49272e95c367E_376,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h9a21139f143928f8E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZN3std5error5Error7type_id17h916570fb171be5b2E,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h64b5aec550d00294E_259,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,___stdio_close,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h1593141b212db37eE,__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h26bd916e4f84eb12E,b5,__ZN81__LT_core__cell__RefMut_LT__u27_b_C__u20_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h9b5c2735abbbf9baE,b5,b5,b5,__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17h9563817f345a3618E,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN11webplatform8HtmlNode8root_ref17h34de0e5d252bfac5E,b5,__ZN69__LT_webplatform__JSRef_LT__u27_a_GT__u20_as_u20_core__ops__Deref_GT_5deref17hc06a047d3cde0b52E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h72516150e42e5932E_25,b5,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17h2812dbe7bb8c1778E,b5,b5,__ZN35__LT_core__ptr__Shared_LT_T_GT__GT_3new17h4efb4b6447e01f0cE,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h107a40b19806ce4dE_76
,b5,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17h2c5bca2b5361c61aE,b5,b5,__ZN35__LT_core__ptr__Shared_LT_T_GT__GT_3new17ha3070fc45ea257f8E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_8capacity17h0e0ed4a1b7eab776E,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_8capacity17hd53f985907e887f4E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN31__LT_alloc__rc__Rc_LT_T_GT__GT_3new17hb938fae809de7c62E,b5
,__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3new17h44f3c9b185e9d52fE,__ZN5alloc5boxed30__LT_impl_u20_Box_LT_T_GT__GT_8into_raw17h0b2b813854dcd2a5E,__ZN35__LT_core__ptr__Shared_LT_T_GT__GT_3new17h877418937a4e6ca3E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17hf8bc393e7f3a9d8cE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZN3std6thread6Thread3new17ha1e86e68e2b3f796E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3std10sys_common12thread_local9StaticKey9lazy_init17h99fc4ab166ab9497E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17h36b6a308d6f94319E,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,__ZN11collections5slice4hack8into_vec17h772ddc8760271ab7E,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN11webplatform11rust_caller17hee7921a5aed2286aE,b6,b6,b6,b6,b6,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_4push17he1aa43e42998e393E,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,__ZN4core3ptr5write17hd6caf7237ae26be3E,b6,__ZN4core3fmt10ArgumentV13new17h4fc99b8d04e93a27E,b6,__ZN4core3fmt10ArgumentV13new17h008b2b0633a7e985E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,__ZN11webplatform8HtmlNode12html_prepend17h173a05c5542a4ef4E,__ZN53__LT_str_u20_as_u20_collections__string__ToString_GT_9to_string17h092944ddf5d7800fE,b6,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17h6c600bf934960db6E,b6,b6,b6,__ZN11webplatform8HtmlNode11html_append17h3c448a8398a0e7fbE,b6,b6,b6,b6,__ZN4core3fmt10ArgumentV13new17h018a2d28ebe4c1caE,b6,b6,b6,b6,__ZN4core3fmt10ArgumentV13new17ha2f19ba0a108ab54E,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,__ZN4core3fmt10ArgumentV13new17h4fc99b8d04e93a27E_12,b6,__ZN4core3fmt10ArgumentV13new17h018a2d28ebe4c1caE_13,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core3fmt10ArgumentV13new17h0f241fed73e88944E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h3d170cee914e2603E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17h9f18826ff54526b5E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN3std3ffi5c_str7CString3new17hab7958d187e8293dE,b6,b6,b6,b6,__ZN50__LT_T_u20_as_u20_core__convert__Into_LT_U_GT__GT_4into17h2425fe24d2f28555E
,b6,__ZN4core6result13unwrap_failed17hdffd96b76ab17f0aE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core3fmt10ArgumentV13new17h4fc99b8d04e93a27E_127,b6,__ZN4core3fmt10ArgumentV13new17h6c2fb50d9ad38205E,b6,b6,b6,b6,__ZN97__LT_collections__vec__Vec_LT_u8_GT__u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17hb40f5aa900072974E,b6,__ZN4core6result13unwrap_failed17hec8642c937e35d08E,__ZN4core3fmt10ArgumentV13new17h4ed55bf2e647755dE,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN3std9panicking11begin_panic17h8e1740626d0f752eE_234,b6,b6,b6,b6,b6,b6,b6,__ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17ha0fddc25ef6604a1E,b6,b6,b6,__ZN3std3ffi5c_str7CString3new17h3489eb30ab2a7039E,b6,b6,b6,b6
,b6,__ZN93__LT_collections__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17he1798c51f55475c1E,b6,b6,b6,b6,b6,b6,b6,__ZN4core6result13unwrap_failed17hdffd96b76ab17f0aE_245,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN57__LT_std__io__stdio__Stdout_u20_as_u20_std__io__Write_GT_9write_fmt17h5e154dddd2574f03E,b6
,b6,b6,b6,__ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h77a7452d11da03e2E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_v = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN5alloc3oom19default_oom_handler17h7d5e4045944c7055E,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN11webplatform4spin17h5b275783d7de1e4aE,b7,b7,b7,b7,__ZN5hello4main17hc543b082b7dd43fcE,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,__ZN11webplatform9leavemebe17hdeaa05b5f446203aE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN4core6result13unwrap_failed17h77140d60754f5e94E_240,b7,b7,b7,b7,b7,b7,__ZN5alloc3oom3oom17h9c08827c36eab673E,b7,__ZN4core6result13unwrap_failed17h3a93777545e30874E
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,__ZN3std6thread4park17hd846f3ddb0a676b7E,b7,__ZN3std3sys3imp4init11oom_handler17h9d6e6d0d5d4772caE,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iii = [b8,b8,b8,b8,b8,b8,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h306a512c97fa840aE,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h9148321c12e0e9b4E,b8,b8,b8,b8,b8,b8,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h306a512c97fa840aE_255,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h9148321c12e0e9b4E_256,b8,b8,b8,b8,b8,b8,b8,b8,__ZN4core3fmt5Write10write_char17h4e2d8795d1f986b2E,__ZN4core3fmt5Write9write_fmt17h6cb9985944bd383bE,b8,b8,b8
,b8,__ZN252__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h8034733c7a02f473E,__ZN250__LT__LT_Box_LT_std__error__Error_u20__u2b__u20_core__marker__Sync_u20__u2b__u20_core__marker__Send_u20__u2b__u20__u27_static_GT__u20_as_u20_core__convert__From_LT_collections__string__String_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17hd24d381124ac7156E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h257b9e7f07731cecE,b8,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h84c2d3e20bfbcbb8E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hd464ffff0aa9e12fE,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h9226ae6e0713ead4E_250,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0ae42faa4311fac1E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h4e8077f5d1a454a5E,b8,b8,b8,b8,__ZN4core3fmt5Write10write_char17h3bcd7b2ff37ba567E,__ZN4core3fmt5Write9write_fmt17h92e2bfedbf85daabE,b8,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hf3aeaca16016d973E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17ha75b529eee914ce5E,b8,b8,b8,b8,b8,__ZN4core3fmt5Write10write_char17h2d4a9fe3ac2c4589E,__ZN4core3fmt5Write9write_fmt17ha6de7e94cdeed88cE,b8,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17he2b84c48d81bac4dE,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hc5c47a29e3a8a380E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h9226ae6e0713ead4E_711
,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h1187313413a087edE,b8,b8,b8,b8,b8,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h949e5b795cd3d504E,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h96073221e77ac80bE,b8,b8,__ZN5alloc4heap15exchange_malloc17h8890b6b3bb39aab2E,b8,__ZN44__LT_i32_u20_as_u20_webplatform__Interop_GT_6as_int17h3367c0f98a6963e4E,b8,__ZN67__LT__BP_const_u20_libc__c_void_u20_as_u20_webplatform__Interop_GT_6as_int17hf35a8fa3e6501bb1E,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h8f65a8d552d87478E,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17hb8a95b15c9b7edd4E,b8,b8,b8,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17ha3b8a98364490850E,b8,__ZN63__LT_core__cell__BorrowMutError_u20_as_u20_core__fmt__Debug_GT_3fmt17hbe85a4caa29b8a8eE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN64__LT_collections__string__String_u20_as_u20_core__fmt__Debug_GT_3fmt17h88b1e273864938bbE,b8,b8,b8,b8,__ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17hcd0b142db1905adfE,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17ha3b8a98364490850E_11,b8,__ZN66__LT_collections__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17h7aa04dea3e23c901E,b8,__ZN4core3fmt5Write9write_fmt17h695ca218c314a294E,b8,b8,b8,b8,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h949e5b795cd3d504E_80,b8,b8,b8,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h525eb7a061c86864E,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN53__LT_core__fmt__Error_u20_as_u20_core__fmt__Debug_GT_3fmt17h6ef010a3af2baf90E,b8,b8,b8,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h13282f4ceb7b811aE,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h3666bfeb514b5534E_32,b8,__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17hdb8c33b52f357f07E,__ZN4core3fmt3num53__LT_impl_u20_core__fmt__UpperHex_u20_for_u20_u32_GT_3fmt17h80358c5ccdff8f76E,b8,b8,b8,b8,__ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_usize_GT_2ge17h360c8f401c674a8dE,b8,b8,b8,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17hfccf1eaec4906f8eE,b8
,b8,b8,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h79758bab893f2486E,b8,b8,b8,b8,b8,b8,b8,b8,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h3e754df2b15e50f6E,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN4core3num23__LT_impl_u20_usize_GT_14saturating_add17habeff856fb664a83E,b8,b8,b8
,b8,b8,b8,b8,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h96073221e77ac80bE_79,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN3std3ffi5c_str4CStr6as_ptr17h2d1759027091f005E,b8,b8
,b8,b8,b8,b8,b8,b8,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h415221f0d0dabf3cE,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h452f56dc7507ccaaE,b8,b8,b8,b8,b8,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17ha3b8a98364490850E_126,b8,__ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17h805872435922bd21E,b8,b8,b8,b8,b8,b8,b8,__ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17h39589df3fc3f2693E,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,__ZN66__LT_collections__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17h7aa04dea3e23c901E_257,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17h5f706c2120c63b6eE,__ZN4core3fmt9Formatter9write_fmt17h0f0e81f3f99c1f62E,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17ha3b8a98364490850E_242,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17hbb919c313d78cc8fE,__ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17hbbafb0c65faa4cd4E,b8,b8,b8,b8,b8
,b8,b8,__ZN3std3sys3imp9backtrace7tracing3imp5write8trace_fn17hf8110a1e5164afc5E,__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_isize_GT_3fmt17h5bbeb75286e8e893E,__ZN50__LT__BP_mut_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h7cf7b28774cd666dE,__ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17h700df51eb028fdccE,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hf9c9a4fd7b979535E,__ZN60__LT_core__cell__BorrowError_u20_as_u20_core__fmt__Debug_GT_3fmt17h8b8daee27e6d3129E,b8,b8,b8,b8,b8,b8,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h8770708acb05a58eE,__ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17h5116f479deb48cdaE,b8,b8,b8,b8,__ZN82__LT_std__sys_common__poison__PoisonError_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17hfc681ccd65f04d84E,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17ha3b8a98364490850E_596,__ZN4core3fmt10ArgumentV110show_usize17hafea74842859ac5eE,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h28546fd507c84a95E,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_viiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17h4b5ca56cfd27f34aE,b9,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17h5641c50d2b904642E,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_14from_raw_parts17hae92b2cc052f1c35E,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6expect17h57c3f1996cc9a614E,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN11webplatform8Document13element_query17he69b28cda2f0be41E
,b9,__ZN11webplatform8Document14element_create17h72ab34278ae96c45E,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN11webplatform8HtmlNode2on17h41ac77ef239a6a37E,b9,__ZN11webplatform8HtmlNode12prop_get_str17he4db14e1010fe13dE,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17hb75ce83d455facf1E,__ZN86__LT_core__ops__RangeFrom_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h67e78f6727331afeE,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN3std3sys3imp6memchr7memrchr17he3a29948d4e4665fE,__ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17ha913346b0f60c36dE,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,__ZN3std4sync4once4Once10call_inner17haa9b9787ced7c3faE,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];

  return { _llvm_bswap_i16: _llvm_bswap_i16, _fflush: _fflush, _main: _main, _htonl: _htonl, _i64Add: _i64Add, _memmove: _memmove, _pthread_self: _pthread_self, _memset: _memset, _pthread_mutex_unlock: _pthread_mutex_unlock, _malloc: _malloc, _free: _free, _pthread_mutex_lock: _pthread_mutex_lock, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, _sbrk: _sbrk, _htons: _htons, _bitshift64Shl: _bitshift64Shl, ___errno_location: ___errno_location, _ntohs: _ntohs, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htonl.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"]; asm["_llvm_bswap_i16"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i16.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_lock.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htons.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ntohs.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _malloc = Module["_malloc"] = asm["_malloc"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _main = Module["_main"] = asm["_main"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _memset = Module["_memset"] = asm["_memset"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _free = Module["_free"] = asm["_free"];
var _htons = Module["_htons"] = asm["_htons"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



